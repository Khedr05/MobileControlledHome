
Mobile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000378e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000025e  00800060  0000378e  00003822  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000003f  008002be  008002be  00003a80  2**0
                  ALLOC
  3 .stab         000059d0  00000000  00000000  00003a80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00005591  00000000  00000000  00009450  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e8       	ldi	r30, 0x8E	; 142
      68:	f7 e3       	ldi	r31, 0x37	; 55
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ad 3f       	cpi	r26, 0xFD	; 253
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 2b 1b 	call	0x3656	; 0x3656 <main>
      8a:	0c 94 c5 1b 	jmp	0x378a	; 0x378a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <UART_vInit>:
      92:	df 93       	push	r29
      94:	cf 93       	push	r28
      96:	00 d0       	rcall	.+0      	; 0x98 <UART_vInit+0x6>
      98:	cd b7       	in	r28, 0x3d	; 61
      9a:	de b7       	in	r29, 0x3e	; 62
      9c:	9a 83       	std	Y+2, r25	; 0x02
      9e:	89 83       	std	Y+1, r24	; 0x01
      a0:	e9 81       	ldd	r30, Y+1	; 0x01
      a2:	fa 81       	ldd	r31, Y+2	; 0x02
      a4:	80 81       	ld	r24, Z
      a6:	88 23       	and	r24, r24
      a8:	b1 f4       	brne	.+44     	; 0xd6 <UART_vInit+0x44>
      aa:	a0 e4       	ldi	r26, 0x40	; 64
      ac:	b0 e0       	ldi	r27, 0x00	; 0
      ae:	e0 e4       	ldi	r30, 0x40	; 64
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 81       	ld	r24, Z
      b4:	8d 7f       	andi	r24, 0xFD	; 253
      b6:	8c 93       	st	X, r24
      b8:	a0 e4       	ldi	r26, 0x40	; 64
      ba:	b0 e0       	ldi	r27, 0x00	; 0
      bc:	e0 e4       	ldi	r30, 0x40	; 64
      be:	f0 e0       	ldi	r31, 0x00	; 0
      c0:	80 81       	ld	r24, Z
      c2:	8b 7f       	andi	r24, 0xFB	; 251
      c4:	8c 93       	st	X, r24
      c6:	aa e2       	ldi	r26, 0x2A	; 42
      c8:	b0 e0       	ldi	r27, 0x00	; 0
      ca:	ea e2       	ldi	r30, 0x2A	; 42
      cc:	f0 e0       	ldi	r31, 0x00	; 0
      ce:	80 81       	ld	r24, Z
      d0:	8b 7f       	andi	r24, 0xFB	; 251
      d2:	8c 93       	st	X, r24
      d4:	6b c0       	rjmp	.+214    	; 0x1ac <UART_vInit+0x11a>
      d6:	e9 81       	ldd	r30, Y+1	; 0x01
      d8:	fa 81       	ldd	r31, Y+2	; 0x02
      da:	80 81       	ld	r24, Z
      dc:	81 30       	cpi	r24, 0x01	; 1
      de:	b1 f4       	brne	.+44     	; 0x10c <UART_vInit+0x7a>
      e0:	a0 e4       	ldi	r26, 0x40	; 64
      e2:	b0 e0       	ldi	r27, 0x00	; 0
      e4:	e0 e4       	ldi	r30, 0x40	; 64
      e6:	f0 e0       	ldi	r31, 0x00	; 0
      e8:	80 81       	ld	r24, Z
      ea:	82 60       	ori	r24, 0x02	; 2
      ec:	8c 93       	st	X, r24
      ee:	a0 e4       	ldi	r26, 0x40	; 64
      f0:	b0 e0       	ldi	r27, 0x00	; 0
      f2:	e0 e4       	ldi	r30, 0x40	; 64
      f4:	f0 e0       	ldi	r31, 0x00	; 0
      f6:	80 81       	ld	r24, Z
      f8:	8b 7f       	andi	r24, 0xFB	; 251
      fa:	8c 93       	st	X, r24
      fc:	aa e2       	ldi	r26, 0x2A	; 42
      fe:	b0 e0       	ldi	r27, 0x00	; 0
     100:	ea e2       	ldi	r30, 0x2A	; 42
     102:	f0 e0       	ldi	r31, 0x00	; 0
     104:	80 81       	ld	r24, Z
     106:	8b 7f       	andi	r24, 0xFB	; 251
     108:	8c 93       	st	X, r24
     10a:	50 c0       	rjmp	.+160    	; 0x1ac <UART_vInit+0x11a>
     10c:	e9 81       	ldd	r30, Y+1	; 0x01
     10e:	fa 81       	ldd	r31, Y+2	; 0x02
     110:	80 81       	ld	r24, Z
     112:	82 30       	cpi	r24, 0x02	; 2
     114:	b1 f4       	brne	.+44     	; 0x142 <UART_vInit+0xb0>
     116:	a0 e4       	ldi	r26, 0x40	; 64
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	e0 e4       	ldi	r30, 0x40	; 64
     11c:	f0 e0       	ldi	r31, 0x00	; 0
     11e:	80 81       	ld	r24, Z
     120:	8d 7f       	andi	r24, 0xFD	; 253
     122:	8c 93       	st	X, r24
     124:	a0 e4       	ldi	r26, 0x40	; 64
     126:	b0 e0       	ldi	r27, 0x00	; 0
     128:	e0 e4       	ldi	r30, 0x40	; 64
     12a:	f0 e0       	ldi	r31, 0x00	; 0
     12c:	80 81       	ld	r24, Z
     12e:	84 60       	ori	r24, 0x04	; 4
     130:	8c 93       	st	X, r24
     132:	aa e2       	ldi	r26, 0x2A	; 42
     134:	b0 e0       	ldi	r27, 0x00	; 0
     136:	ea e2       	ldi	r30, 0x2A	; 42
     138:	f0 e0       	ldi	r31, 0x00	; 0
     13a:	80 81       	ld	r24, Z
     13c:	8b 7f       	andi	r24, 0xFB	; 251
     13e:	8c 93       	st	X, r24
     140:	35 c0       	rjmp	.+106    	; 0x1ac <UART_vInit+0x11a>
     142:	e9 81       	ldd	r30, Y+1	; 0x01
     144:	fa 81       	ldd	r31, Y+2	; 0x02
     146:	80 81       	ld	r24, Z
     148:	83 30       	cpi	r24, 0x03	; 3
     14a:	b1 f4       	brne	.+44     	; 0x178 <UART_vInit+0xe6>
     14c:	a0 e4       	ldi	r26, 0x40	; 64
     14e:	b0 e0       	ldi	r27, 0x00	; 0
     150:	e0 e4       	ldi	r30, 0x40	; 64
     152:	f0 e0       	ldi	r31, 0x00	; 0
     154:	80 81       	ld	r24, Z
     156:	82 60       	ori	r24, 0x02	; 2
     158:	8c 93       	st	X, r24
     15a:	a0 e4       	ldi	r26, 0x40	; 64
     15c:	b0 e0       	ldi	r27, 0x00	; 0
     15e:	e0 e4       	ldi	r30, 0x40	; 64
     160:	f0 e0       	ldi	r31, 0x00	; 0
     162:	80 81       	ld	r24, Z
     164:	84 60       	ori	r24, 0x04	; 4
     166:	8c 93       	st	X, r24
     168:	aa e2       	ldi	r26, 0x2A	; 42
     16a:	b0 e0       	ldi	r27, 0x00	; 0
     16c:	ea e2       	ldi	r30, 0x2A	; 42
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	8b 7f       	andi	r24, 0xFB	; 251
     174:	8c 93       	st	X, r24
     176:	1a c0       	rjmp	.+52     	; 0x1ac <UART_vInit+0x11a>
     178:	e9 81       	ldd	r30, Y+1	; 0x01
     17a:	fa 81       	ldd	r31, Y+2	; 0x02
     17c:	80 81       	ld	r24, Z
     17e:	84 30       	cpi	r24, 0x04	; 4
     180:	a9 f4       	brne	.+42     	; 0x1ac <UART_vInit+0x11a>
     182:	a0 e4       	ldi	r26, 0x40	; 64
     184:	b0 e0       	ldi	r27, 0x00	; 0
     186:	e0 e4       	ldi	r30, 0x40	; 64
     188:	f0 e0       	ldi	r31, 0x00	; 0
     18a:	80 81       	ld	r24, Z
     18c:	82 60       	ori	r24, 0x02	; 2
     18e:	8c 93       	st	X, r24
     190:	a0 e4       	ldi	r26, 0x40	; 64
     192:	b0 e0       	ldi	r27, 0x00	; 0
     194:	e0 e4       	ldi	r30, 0x40	; 64
     196:	f0 e0       	ldi	r31, 0x00	; 0
     198:	80 81       	ld	r24, Z
     19a:	84 60       	ori	r24, 0x04	; 4
     19c:	8c 93       	st	X, r24
     19e:	aa e2       	ldi	r26, 0x2A	; 42
     1a0:	b0 e0       	ldi	r27, 0x00	; 0
     1a2:	ea e2       	ldi	r30, 0x2A	; 42
     1a4:	f0 e0       	ldi	r31, 0x00	; 0
     1a6:	80 81       	ld	r24, Z
     1a8:	84 60       	ori	r24, 0x04	; 4
     1aa:	8c 93       	st	X, r24
     1ac:	e9 81       	ldd	r30, Y+1	; 0x01
     1ae:	fa 81       	ldd	r31, Y+2	; 0x02
     1b0:	81 81       	ldd	r24, Z+1	; 0x01
     1b2:	88 23       	and	r24, r24
     1b4:	79 f4       	brne	.+30     	; 0x1d4 <UART_vInit+0x142>
     1b6:	a0 e4       	ldi	r26, 0x40	; 64
     1b8:	b0 e0       	ldi	r27, 0x00	; 0
     1ba:	e0 e4       	ldi	r30, 0x40	; 64
     1bc:	f0 e0       	ldi	r31, 0x00	; 0
     1be:	80 81       	ld	r24, Z
     1c0:	8f 7e       	andi	r24, 0xEF	; 239
     1c2:	8c 93       	st	X, r24
     1c4:	a0 e4       	ldi	r26, 0x40	; 64
     1c6:	b0 e0       	ldi	r27, 0x00	; 0
     1c8:	e0 e4       	ldi	r30, 0x40	; 64
     1ca:	f0 e0       	ldi	r31, 0x00	; 0
     1cc:	80 81       	ld	r24, Z
     1ce:	8f 7d       	andi	r24, 0xDF	; 223
     1d0:	8c 93       	st	X, r24
     1d2:	27 c0       	rjmp	.+78     	; 0x222 <UART_vInit+0x190>
     1d4:	e9 81       	ldd	r30, Y+1	; 0x01
     1d6:	fa 81       	ldd	r31, Y+2	; 0x02
     1d8:	81 81       	ldd	r24, Z+1	; 0x01
     1da:	81 30       	cpi	r24, 0x01	; 1
     1dc:	79 f4       	brne	.+30     	; 0x1fc <UART_vInit+0x16a>
     1de:	a0 e4       	ldi	r26, 0x40	; 64
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e0 e4       	ldi	r30, 0x40	; 64
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	8f 7e       	andi	r24, 0xEF	; 239
     1ea:	8c 93       	st	X, r24
     1ec:	a0 e4       	ldi	r26, 0x40	; 64
     1ee:	b0 e0       	ldi	r27, 0x00	; 0
     1f0:	e0 e4       	ldi	r30, 0x40	; 64
     1f2:	f0 e0       	ldi	r31, 0x00	; 0
     1f4:	80 81       	ld	r24, Z
     1f6:	80 62       	ori	r24, 0x20	; 32
     1f8:	8c 93       	st	X, r24
     1fa:	13 c0       	rjmp	.+38     	; 0x222 <UART_vInit+0x190>
     1fc:	e9 81       	ldd	r30, Y+1	; 0x01
     1fe:	fa 81       	ldd	r31, Y+2	; 0x02
     200:	81 81       	ldd	r24, Z+1	; 0x01
     202:	82 30       	cpi	r24, 0x02	; 2
     204:	71 f4       	brne	.+28     	; 0x222 <UART_vInit+0x190>
     206:	a0 e4       	ldi	r26, 0x40	; 64
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	e0 e4       	ldi	r30, 0x40	; 64
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	80 61       	ori	r24, 0x10	; 16
     212:	8c 93       	st	X, r24
     214:	a0 e4       	ldi	r26, 0x40	; 64
     216:	b0 e0       	ldi	r27, 0x00	; 0
     218:	e0 e4       	ldi	r30, 0x40	; 64
     21a:	f0 e0       	ldi	r31, 0x00	; 0
     21c:	80 81       	ld	r24, Z
     21e:	80 62       	ori	r24, 0x20	; 32
     220:	8c 93       	st	X, r24
     222:	e9 81       	ldd	r30, Y+1	; 0x01
     224:	fa 81       	ldd	r31, Y+2	; 0x02
     226:	82 81       	ldd	r24, Z+2	; 0x02
     228:	88 23       	and	r24, r24
     22a:	41 f4       	brne	.+16     	; 0x23c <UART_vInit+0x1aa>
     22c:	a0 e4       	ldi	r26, 0x40	; 64
     22e:	b0 e0       	ldi	r27, 0x00	; 0
     230:	e0 e4       	ldi	r30, 0x40	; 64
     232:	f0 e0       	ldi	r31, 0x00	; 0
     234:	80 81       	ld	r24, Z
     236:	87 7f       	andi	r24, 0xF7	; 247
     238:	8c 93       	st	X, r24
     23a:	0c c0       	rjmp	.+24     	; 0x254 <UART_vInit+0x1c2>
     23c:	e9 81       	ldd	r30, Y+1	; 0x01
     23e:	fa 81       	ldd	r31, Y+2	; 0x02
     240:	82 81       	ldd	r24, Z+2	; 0x02
     242:	81 30       	cpi	r24, 0x01	; 1
     244:	39 f4       	brne	.+14     	; 0x254 <UART_vInit+0x1c2>
     246:	a0 e4       	ldi	r26, 0x40	; 64
     248:	b0 e0       	ldi	r27, 0x00	; 0
     24a:	e0 e4       	ldi	r30, 0x40	; 64
     24c:	f0 e0       	ldi	r31, 0x00	; 0
     24e:	80 81       	ld	r24, Z
     250:	88 60       	ori	r24, 0x08	; 8
     252:	8c 93       	st	X, r24
     254:	e9 81       	ldd	r30, Y+1	; 0x01
     256:	fa 81       	ldd	r31, Y+2	; 0x02
     258:	83 81       	ldd	r24, Z+3	; 0x03
     25a:	88 23       	and	r24, r24
     25c:	b1 f4       	brne	.+44     	; 0x28a <UART_vInit+0x1f8>
     25e:	aa e2       	ldi	r26, 0x2A	; 42
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	ea e2       	ldi	r30, 0x2A	; 42
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8f 77       	andi	r24, 0x7F	; 127
     26a:	8c 93       	st	X, r24
     26c:	aa e2       	ldi	r26, 0x2A	; 42
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	ea e2       	ldi	r30, 0x2A	; 42
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	8f 7d       	andi	r24, 0xDF	; 223
     278:	8c 93       	st	X, r24
     27a:	aa e2       	ldi	r26, 0x2A	; 42
     27c:	b0 e0       	ldi	r27, 0x00	; 0
     27e:	ea e2       	ldi	r30, 0x2A	; 42
     280:	f0 e0       	ldi	r31, 0x00	; 0
     282:	80 81       	ld	r24, Z
     284:	8f 7b       	andi	r24, 0xBF	; 191
     286:	8c 93       	st	X, r24
     288:	1a c0       	rjmp	.+52     	; 0x2be <UART_vInit+0x22c>
     28a:	e9 81       	ldd	r30, Y+1	; 0x01
     28c:	fa 81       	ldd	r31, Y+2	; 0x02
     28e:	83 81       	ldd	r24, Z+3	; 0x03
     290:	81 30       	cpi	r24, 0x01	; 1
     292:	a9 f4       	brne	.+42     	; 0x2be <UART_vInit+0x22c>
     294:	aa e2       	ldi	r26, 0x2A	; 42
     296:	b0 e0       	ldi	r27, 0x00	; 0
     298:	ea e2       	ldi	r30, 0x2A	; 42
     29a:	f0 e0       	ldi	r31, 0x00	; 0
     29c:	80 81       	ld	r24, Z
     29e:	80 68       	ori	r24, 0x80	; 128
     2a0:	8c 93       	st	X, r24
     2a2:	aa e2       	ldi	r26, 0x2A	; 42
     2a4:	b0 e0       	ldi	r27, 0x00	; 0
     2a6:	ea e2       	ldi	r30, 0x2A	; 42
     2a8:	f0 e0       	ldi	r31, 0x00	; 0
     2aa:	80 81       	ld	r24, Z
     2ac:	80 62       	ori	r24, 0x20	; 32
     2ae:	8c 93       	st	X, r24
     2b0:	aa e2       	ldi	r26, 0x2A	; 42
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	ea e2       	ldi	r30, 0x2A	; 42
     2b6:	f0 e0       	ldi	r31, 0x00	; 0
     2b8:	80 81       	ld	r24, Z
     2ba:	80 64       	ori	r24, 0x40	; 64
     2bc:	8c 93       	st	X, r24
     2be:	e9 81       	ldd	r30, Y+1	; 0x01
     2c0:	fa 81       	ldd	r31, Y+2	; 0x02
     2c2:	87 81       	ldd	r24, Z+7	; 0x07
     2c4:	81 30       	cpi	r24, 0x01	; 1
     2c6:	41 f4       	brne	.+16     	; 0x2d8 <UART_vInit+0x246>
     2c8:	a0 e4       	ldi	r26, 0x40	; 64
     2ca:	b0 e0       	ldi	r27, 0x00	; 0
     2cc:	e0 e4       	ldi	r30, 0x40	; 64
     2ce:	f0 e0       	ldi	r31, 0x00	; 0
     2d0:	80 81       	ld	r24, Z
     2d2:	8f 7b       	andi	r24, 0xBF	; 191
     2d4:	8c 93       	st	X, r24
     2d6:	0c c0       	rjmp	.+24     	; 0x2f0 <UART_vInit+0x25e>
     2d8:	e9 81       	ldd	r30, Y+1	; 0x01
     2da:	fa 81       	ldd	r31, Y+2	; 0x02
     2dc:	87 81       	ldd	r24, Z+7	; 0x07
     2de:	88 23       	and	r24, r24
     2e0:	39 f4       	brne	.+14     	; 0x2f0 <UART_vInit+0x25e>
     2e2:	a0 e4       	ldi	r26, 0x40	; 64
     2e4:	b0 e0       	ldi	r27, 0x00	; 0
     2e6:	e0 e4       	ldi	r30, 0x40	; 64
     2e8:	f0 e0       	ldi	r31, 0x00	; 0
     2ea:	80 81       	ld	r24, Z
     2ec:	80 64       	ori	r24, 0x40	; 64
     2ee:	8c 93       	st	X, r24
     2f0:	e9 81       	ldd	r30, Y+1	; 0x01
     2f2:	fa 81       	ldd	r31, Y+2	; 0x02
     2f4:	80 85       	ldd	r24, Z+8	; 0x08
     2f6:	81 30       	cpi	r24, 0x01	; 1
     2f8:	c1 f4       	brne	.+48     	; 0x32a <UART_vInit+0x298>
     2fa:	ab e2       	ldi	r26, 0x2B	; 43
     2fc:	b0 e0       	ldi	r27, 0x00	; 0
     2fe:	eb e2       	ldi	r30, 0x2B	; 43
     300:	f0 e0       	ldi	r31, 0x00	; 0
     302:	80 81       	ld	r24, Z
     304:	82 60       	ori	r24, 0x02	; 2
     306:	8c 93       	st	X, r24
     308:	a9 e2       	ldi	r26, 0x29	; 41
     30a:	b0 e0       	ldi	r27, 0x00	; 0
     30c:	e9 81       	ldd	r30, Y+1	; 0x01
     30e:	fa 81       	ldd	r31, Y+2	; 0x02
     310:	84 81       	ldd	r24, Z+4	; 0x04
     312:	95 81       	ldd	r25, Z+5	; 0x05
     314:	8c 93       	st	X, r24
     316:	a0 e4       	ldi	r26, 0x40	; 64
     318:	b0 e0       	ldi	r27, 0x00	; 0
     31a:	e9 81       	ldd	r30, Y+1	; 0x01
     31c:	fa 81       	ldd	r31, Y+2	; 0x02
     31e:	84 81       	ldd	r24, Z+4	; 0x04
     320:	95 81       	ldd	r25, Z+5	; 0x05
     322:	89 2f       	mov	r24, r25
     324:	99 27       	eor	r25, r25
     326:	8c 93       	st	X, r24
     328:	1d c0       	rjmp	.+58     	; 0x364 <UART_vInit+0x2d2>
     32a:	e9 81       	ldd	r30, Y+1	; 0x01
     32c:	fa 81       	ldd	r31, Y+2	; 0x02
     32e:	80 85       	ldd	r24, Z+8	; 0x08
     330:	88 23       	and	r24, r24
     332:	c1 f4       	brne	.+48     	; 0x364 <UART_vInit+0x2d2>
     334:	ab e2       	ldi	r26, 0x2B	; 43
     336:	b0 e0       	ldi	r27, 0x00	; 0
     338:	eb e2       	ldi	r30, 0x2B	; 43
     33a:	f0 e0       	ldi	r31, 0x00	; 0
     33c:	80 81       	ld	r24, Z
     33e:	8d 7f       	andi	r24, 0xFD	; 253
     340:	8c 93       	st	X, r24
     342:	a9 e2       	ldi	r26, 0x29	; 41
     344:	b0 e0       	ldi	r27, 0x00	; 0
     346:	e9 81       	ldd	r30, Y+1	; 0x01
     348:	fa 81       	ldd	r31, Y+2	; 0x02
     34a:	86 81       	ldd	r24, Z+6	; 0x06
     34c:	8c 93       	st	X, r24
     34e:	a0 e4       	ldi	r26, 0x40	; 64
     350:	b0 e0       	ldi	r27, 0x00	; 0
     352:	e9 81       	ldd	r30, Y+1	; 0x01
     354:	fa 81       	ldd	r31, Y+2	; 0x02
     356:	86 81       	ldd	r24, Z+6	; 0x06
     358:	88 2f       	mov	r24, r24
     35a:	90 e0       	ldi	r25, 0x00	; 0
     35c:	89 2f       	mov	r24, r25
     35e:	99 0f       	add	r25, r25
     360:	99 0b       	sbc	r25, r25
     362:	8c 93       	st	X, r24
     364:	0f 90       	pop	r0
     366:	0f 90       	pop	r0
     368:	cf 91       	pop	r28
     36a:	df 91       	pop	r29
     36c:	08 95       	ret

0000036e <UART_vEnable>:
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X)>>8);
	}
	else { /* Do Nothing */ }
}

void UART_vEnable(const UART_tcfgInitialize *LOCAL_tcfgUART){
     36e:	df 93       	push	r29
     370:	cf 93       	push	r28
     372:	00 d0       	rcall	.+0      	; 0x374 <UART_vEnable+0x6>
     374:	cd b7       	in	r28, 0x3d	; 61
     376:	de b7       	in	r29, 0x3e	; 62
     378:	9a 83       	std	Y+2, r25	; 0x02
     37a:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRB_REG, RXEN_BIT);
     37c:	aa e2       	ldi	r26, 0x2A	; 42
     37e:	b0 e0       	ldi	r27, 0x00	; 0
     380:	ea e2       	ldi	r30, 0x2A	; 42
     382:	f0 e0       	ldi	r31, 0x00	; 0
     384:	80 81       	ld	r24, Z
     386:	80 61       	ori	r24, 0x10	; 16
     388:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, TXEN_BIT);
     38a:	aa e2       	ldi	r26, 0x2A	; 42
     38c:	b0 e0       	ldi	r27, 0x00	; 0
     38e:	ea e2       	ldi	r30, 0x2A	; 42
     390:	f0 e0       	ldi	r31, 0x00	; 0
     392:	80 81       	ld	r24, Z
     394:	88 60       	ori	r24, 0x08	; 8
     396:	8c 93       	st	X, r24
}
     398:	0f 90       	pop	r0
     39a:	0f 90       	pop	r0
     39c:	cf 91       	pop	r28
     39e:	df 91       	pop	r29
     3a0:	08 95       	ret

000003a2 <UART_vDisable>:

void UART_vDisable(const UART_tcfgInitialize *LOCAL_tcfgUART){
     3a2:	df 93       	push	r29
     3a4:	cf 93       	push	r28
     3a6:	00 d0       	rcall	.+0      	; 0x3a8 <UART_vDisable+0x6>
     3a8:	cd b7       	in	r28, 0x3d	; 61
     3aa:	de b7       	in	r29, 0x3e	; 62
     3ac:	9a 83       	std	Y+2, r25	; 0x02
     3ae:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB_REG, RXEN_BIT);
     3b0:	aa e2       	ldi	r26, 0x2A	; 42
     3b2:	b0 e0       	ldi	r27, 0x00	; 0
     3b4:	ea e2       	ldi	r30, 0x2A	; 42
     3b6:	f0 e0       	ldi	r31, 0x00	; 0
     3b8:	80 81       	ld	r24, Z
     3ba:	8f 7e       	andi	r24, 0xEF	; 239
     3bc:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG, TXEN_BIT);
     3be:	aa e2       	ldi	r26, 0x2A	; 42
     3c0:	b0 e0       	ldi	r27, 0x00	; 0
     3c2:	ea e2       	ldi	r30, 0x2A	; 42
     3c4:	f0 e0       	ldi	r31, 0x00	; 0
     3c6:	80 81       	ld	r24, Z
     3c8:	87 7f       	andi	r24, 0xF7	; 247
     3ca:	8c 93       	st	X, r24
}
     3cc:	0f 90       	pop	r0
     3ce:	0f 90       	pop	r0
     3d0:	cf 91       	pop	r28
     3d2:	df 91       	pop	r29
     3d4:	08 95       	ret

000003d6 <UART_vSendData>:

void UART_vSendData(u8 LOCAL_u8Data){
     3d6:	df 93       	push	r29
     3d8:	cf 93       	push	r28
     3da:	0f 92       	push	r0
     3dc:	cd b7       	in	r28, 0x3d	; 61
     3de:	de b7       	in	r29, 0x3e	; 62
     3e0:	89 83       	std	Y+1, r24	; 0x01
	while( GET_BIT(UCSRA_REG, UDRE_BIT) != 1 );
     3e2:	eb e2       	ldi	r30, 0x2B	; 43
     3e4:	f0 e0       	ldi	r31, 0x00	; 0
     3e6:	80 81       	ld	r24, Z
     3e8:	82 95       	swap	r24
     3ea:	86 95       	lsr	r24
     3ec:	87 70       	andi	r24, 0x07	; 7
     3ee:	88 2f       	mov	r24, r24
     3f0:	90 e0       	ldi	r25, 0x00	; 0
     3f2:	81 70       	andi	r24, 0x01	; 1
     3f4:	90 70       	andi	r25, 0x00	; 0
     3f6:	00 97       	sbiw	r24, 0x00	; 0
     3f8:	a1 f3       	breq	.-24     	; 0x3e2 <UART_vSendData+0xc>
	UDR_REG = LOCAL_u8Data;
     3fa:	ec e2       	ldi	r30, 0x2C	; 44
     3fc:	f0 e0       	ldi	r31, 0x00	; 0
     3fe:	89 81       	ldd	r24, Y+1	; 0x01
     400:	80 83       	st	Z, r24
}
     402:	0f 90       	pop	r0
     404:	cf 91       	pop	r28
     406:	df 91       	pop	r29
     408:	08 95       	ret

0000040a <UART_u8ReceiveData>:

u8 UART_u8ReceiveData(void){
     40a:	df 93       	push	r29
     40c:	cf 93       	push	r28
     40e:	0f 92       	push	r0
     410:	cd b7       	in	r28, 0x3d	; 61
     412:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Data;
	while( GET_BIT(UCSRA_REG, RXC_BIT) != 1 );
     414:	eb e2       	ldi	r30, 0x2B	; 43
     416:	f0 e0       	ldi	r31, 0x00	; 0
     418:	80 81       	ld	r24, Z
     41a:	88 1f       	adc	r24, r24
     41c:	88 27       	eor	r24, r24
     41e:	88 1f       	adc	r24, r24
     420:	81 30       	cpi	r24, 0x01	; 1
     422:	c1 f7       	brne	.-16     	; 0x414 <UART_u8ReceiveData+0xa>
	local_u8Data = UDR_REG;
     424:	ec e2       	ldi	r30, 0x2C	; 44
     426:	f0 e0       	ldi	r31, 0x00	; 0
     428:	80 81       	ld	r24, Z
     42a:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRA_REG, RXC_BIT);
     42c:	ab e2       	ldi	r26, 0x2B	; 43
     42e:	b0 e0       	ldi	r27, 0x00	; 0
     430:	eb e2       	ldi	r30, 0x2B	; 43
     432:	f0 e0       	ldi	r31, 0x00	; 0
     434:	80 81       	ld	r24, Z
     436:	8f 77       	andi	r24, 0x7F	; 127
     438:	8c 93       	st	X, r24
	return local_u8Data;
     43a:	89 81       	ldd	r24, Y+1	; 0x01
}
     43c:	0f 90       	pop	r0
     43e:	cf 91       	pop	r28
     440:	df 91       	pop	r29
     442:	08 95       	ret

00000444 <UART_vSendString>:

void UART_vSendString(u8 *Copy_u8Str){
     444:	df 93       	push	r29
     446:	cf 93       	push	r28
     448:	00 d0       	rcall	.+0      	; 0x44a <UART_vSendString+0x6>
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	9a 83       	std	Y+2, r25	; 0x02
     450:	89 83       	std	Y+1, r24	; 0x01
     452:	0b c0       	rjmp	.+22     	; 0x46a <UART_vSendString+0x26>
	while(*Copy_u8Str){
		UART_vSendData(*(Copy_u8Str++));
     454:	e9 81       	ldd	r30, Y+1	; 0x01
     456:	fa 81       	ldd	r31, Y+2	; 0x02
     458:	20 81       	ld	r18, Z
     45a:	89 81       	ldd	r24, Y+1	; 0x01
     45c:	9a 81       	ldd	r25, Y+2	; 0x02
     45e:	01 96       	adiw	r24, 0x01	; 1
     460:	9a 83       	std	Y+2, r25	; 0x02
     462:	89 83       	std	Y+1, r24	; 0x01
     464:	82 2f       	mov	r24, r18
     466:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <UART_vSendData>
	CLR_BIT(UCSRA_REG, RXC_BIT);
	return local_u8Data;
}

void UART_vSendString(u8 *Copy_u8Str){
	while(*Copy_u8Str){
     46a:	e9 81       	ldd	r30, Y+1	; 0x01
     46c:	fa 81       	ldd	r31, Y+2	; 0x02
     46e:	80 81       	ld	r24, Z
     470:	88 23       	and	r24, r24
     472:	81 f7       	brne	.-32     	; 0x454 <UART_vSendString+0x10>
		UART_vSendData(*(Copy_u8Str++));
	}
}
     474:	0f 90       	pop	r0
     476:	0f 90       	pop	r0
     478:	cf 91       	pop	r28
     47a:	df 91       	pop	r29
     47c:	08 95       	ret

0000047e <TWI_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "TWI_interface.h"

void TWI_vInit(){
     47e:	df 93       	push	r29
     480:	cf 93       	push	r28
     482:	cd b7       	in	r28, 0x3d	; 61
     484:	de b7       	in	r29, 0x3e	; 62
	DIO_vPinInit(PORTC, PIN0, INPUT, LOW);
     486:	82 e0       	ldi	r24, 0x02	; 2
     488:	60 e0       	ldi	r22, 0x00	; 0
     48a:	40 e0       	ldi	r20, 0x00	; 0
     48c:	20 e0       	ldi	r18, 0x00	; 0
     48e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_vPinInit>
	DIO_vPinInit(PORTC, PIN1, INPUT, LOW);
     492:	82 e0       	ldi	r24, 0x02	; 2
     494:	61 e0       	ldi	r22, 0x01	; 1
     496:	40 e0       	ldi	r20, 0x00	; 0
     498:	20 e0       	ldi	r18, 0x00	; 0
     49a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_vPinInit>
	// TWBR Value
	TWBR_REG = ((F_CPU/SCL_CLOCK)-16)/2; // 8Mhz oscillator and 100Khz bus freq.
     49e:	e0 e2       	ldi	r30, 0x20	; 32
     4a0:	f0 e0       	ldi	r31, 0x00	; 0
     4a2:	80 e2       	ldi	r24, 0x20	; 32
     4a4:	80 83       	st	Z, r24
	// Prescale value
	TWSR_REG = 0x00; // Set Prescaler to 1
     4a6:	e1 e2       	ldi	r30, 0x21	; 33
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	10 82       	st	Z, r1
	// Set address (TWAR = 0x02)
	TWAR_REG = DEVICE_ADDR;
     4ac:	e2 e2       	ldi	r30, 0x22	; 34
     4ae:	f0 e0       	ldi	r31, 0x00	; 0
     4b0:	80 e5       	ldi	r24, 0x50	; 80
     4b2:	80 83       	st	Z, r24
	// Enable TWI
	TWCR_REG = (1<<TWEN);
     4b4:	e6 e5       	ldi	r30, 0x56	; 86
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	84 e0       	ldi	r24, 0x04	; 4
     4ba:	80 83       	st	Z, r24
}
     4bc:	cf 91       	pop	r28
     4be:	df 91       	pop	r29
     4c0:	08 95       	ret

000004c2 <TWI_vStart>:

void TWI_vStart(){
     4c2:	df 93       	push	r29
     4c4:	cf 93       	push	r28
     4c6:	cd b7       	in	r28, 0x3d	; 61
     4c8:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWINT);
	// Send Start Condition
	TWCR_REG |= (1<<TWSTA);
	// Enable TWI
	TWCR_REG |= (1<<TWEN);*/
	TWCR_REG = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     4ca:	e6 e5       	ldi	r30, 0x56	; 86
     4cc:	f0 e0       	ldi	r31, 0x00	; 0
     4ce:	84 ea       	ldi	r24, 0xA4	; 164
     4d0:	80 83       	st	Z, r24
	// Polling until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
     4d2:	e6 e5       	ldi	r30, 0x56	; 86
     4d4:	f0 e0       	ldi	r31, 0x00	; 0
     4d6:	80 81       	ld	r24, Z
     4d8:	88 23       	and	r24, r24
     4da:	dc f7       	brge	.-10     	; 0x4d2 <TWI_vStart+0x10>
}
     4dc:	cf 91       	pop	r28
     4de:	df 91       	pop	r29
     4e0:	08 95       	ret

000004e2 <TWI_vStop>:

void TWI_vStop(){
     4e2:	df 93       	push	r29
     4e4:	cf 93       	push	r28
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWINT);
	// Send stop condition
	TWCR_REG |= (1<<TWSTO);
	// Enable TWI
	TWCR_REG |= (1<<TWEN);*/
	TWCR_REG = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     4ea:	e6 e5       	ldi	r30, 0x56	; 86
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	84 e9       	ldi	r24, 0x94	; 148
     4f0:	80 83       	st	Z, r24
}
     4f2:	cf 91       	pop	r28
     4f4:	df 91       	pop	r29
     4f6:	08 95       	ret

000004f8 <TWI_vWriteData>:

void TWI_vWriteData(u8 Copy_u8Data){
     4f8:	df 93       	push	r29
     4fa:	cf 93       	push	r28
     4fc:	0f 92       	push	r0
     4fe:	cd b7       	in	r28, 0x3d	; 61
     500:	de b7       	in	r29, 0x3e	; 62
     502:	89 83       	std	Y+1, r24	; 0x01
	// Write data on TWI DR
	TWDR_REG = Copy_u8Data;
     504:	e3 e2       	ldi	r30, 0x23	; 35
     506:	f0 e0       	ldi	r31, 0x00	; 0
     508:	89 81       	ldd	r24, Y+1	; 0x01
     50a:	80 83       	st	Z, r24
	TWCR_REG = (1<<TWINT);
	// Enable Ack
	TWCR_REG |= (1<<TWEA);
	// Enable TWI
	TWCR_REG |= (1<<TWEN);*/
	TWCR_REG = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     50c:	e6 e5       	ldi	r30, 0x56	; 86
     50e:	f0 e0       	ldi	r31, 0x00	; 0
     510:	84 ec       	ldi	r24, 0xC4	; 196
     512:	80 83       	st	Z, r24
	// Polling until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
     514:	e6 e5       	ldi	r30, 0x56	; 86
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	88 23       	and	r24, r24
     51c:	dc f7       	brge	.-10     	; 0x514 <TWI_vWriteData+0x1c>
}
     51e:	0f 90       	pop	r0
     520:	cf 91       	pop	r28
     522:	df 91       	pop	r29
     524:	08 95       	ret

00000526 <TWI_u8ReadWithAck>:

u8 TWI_u8ReadWithAck(){
     526:	df 93       	push	r29
     528:	cf 93       	push	r28
     52a:	0f 92       	push	r0
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
	u8 Data;
	// Clear flag
	while(!(GET_BIT(TWCR_REG, TWINT)));
     530:	e6 e5       	ldi	r30, 0x56	; 86
     532:	f0 e0       	ldi	r31, 0x00	; 0
     534:	80 81       	ld	r24, Z
     536:	88 23       	and	r24, r24
     538:	dc f7       	brge	.-10     	; 0x530 <TWI_u8ReadWithAck+0xa>
	// Enable Ack
	TWCR_REG |= (1<<TWEA);
     53a:	a6 e5       	ldi	r26, 0x56	; 86
     53c:	b0 e0       	ldi	r27, 0x00	; 0
     53e:	e6 e5       	ldi	r30, 0x56	; 86
     540:	f0 e0       	ldi	r31, 0x00	; 0
     542:	80 81       	ld	r24, Z
     544:	80 64       	ori	r24, 0x40	; 64
     546:	8c 93       	st	X, r24
	// Enable TWI
	TWCR_REG |= (1<<TWEN);
     548:	a6 e5       	ldi	r26, 0x56	; 86
     54a:	b0 e0       	ldi	r27, 0x00	; 0
     54c:	e6 e5       	ldi	r30, 0x56	; 86
     54e:	f0 e0       	ldi	r31, 0x00	; 0
     550:	80 81       	ld	r24, Z
     552:	84 60       	ori	r24, 0x04	; 4
     554:	8c 93       	st	X, r24
	// Poll until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
     556:	e6 e5       	ldi	r30, 0x56	; 86
     558:	f0 e0       	ldi	r31, 0x00	; 0
     55a:	80 81       	ld	r24, Z
     55c:	88 23       	and	r24, r24
     55e:	dc f7       	brge	.-10     	; 0x556 <TWI_u8ReadWithAck+0x30>
	// Read received data
	Data = TWDR_REG;
     560:	e3 e2       	ldi	r30, 0x23	; 35
     562:	f0 e0       	ldi	r31, 0x00	; 0
     564:	80 81       	ld	r24, Z
     566:	89 83       	std	Y+1, r24	; 0x01
	return Data;
     568:	89 81       	ldd	r24, Y+1	; 0x01
}
     56a:	0f 90       	pop	r0
     56c:	cf 91       	pop	r28
     56e:	df 91       	pop	r29
     570:	08 95       	ret

00000572 <TWI_u8ReadWithNoAck>:

u8 TWI_u8ReadWithNoAck(){
     572:	df 93       	push	r29
     574:	cf 93       	push	r28
     576:	0f 92       	push	r0
     578:	cd b7       	in	r28, 0x3d	; 61
     57a:	de b7       	in	r29, 0x3e	; 62
	u8 Data;
	// Clear flag
	while(!(GET_BIT(TWCR_REG, TWINT)));
     57c:	e6 e5       	ldi	r30, 0x56	; 86
     57e:	f0 e0       	ldi	r31, 0x00	; 0
     580:	80 81       	ld	r24, Z
     582:	88 23       	and	r24, r24
     584:	dc f7       	brge	.-10     	; 0x57c <TWI_u8ReadWithNoAck+0xa>
	// Enable TWI
	TWCR_REG |= (1<<TWEN);
     586:	a6 e5       	ldi	r26, 0x56	; 86
     588:	b0 e0       	ldi	r27, 0x00	; 0
     58a:	e6 e5       	ldi	r30, 0x56	; 86
     58c:	f0 e0       	ldi	r31, 0x00	; 0
     58e:	80 81       	ld	r24, Z
     590:	84 60       	ori	r24, 0x04	; 4
     592:	8c 93       	st	X, r24
	// Poll until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
     594:	e6 e5       	ldi	r30, 0x56	; 86
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	80 81       	ld	r24, Z
     59a:	88 23       	and	r24, r24
     59c:	dc f7       	brge	.-10     	; 0x594 <TWI_u8ReadWithNoAck+0x22>
	// Read received data
	Data = TWDR_REG;
     59e:	e3 e2       	ldi	r30, 0x23	; 35
     5a0:	f0 e0       	ldi	r31, 0x00	; 0
     5a2:	80 81       	ld	r24, Z
     5a4:	89 83       	std	Y+1, r24	; 0x01
	return Data;
     5a6:	89 81       	ldd	r24, Y+1	; 0x01
}
     5a8:	0f 90       	pop	r0
     5aa:	cf 91       	pop	r28
     5ac:	df 91       	pop	r29
     5ae:	08 95       	ret

000005b0 <TWI_u8GetStatus>:

u8 TWI_u8GetStatus(){
     5b0:	df 93       	push	r29
     5b2:	cf 93       	push	r28
     5b4:	0f 92       	push	r0
     5b6:	cd b7       	in	r28, 0x3d	; 61
     5b8:	de b7       	in	r29, 0x3e	; 62
	u8 Status;
	// Read status register (&0xF8)
	Status = TWSR_REG & 0xF8;
     5ba:	e1 e2       	ldi	r30, 0x21	; 33
     5bc:	f0 e0       	ldi	r31, 0x00	; 0
     5be:	80 81       	ld	r24, Z
     5c0:	88 7f       	andi	r24, 0xF8	; 248
     5c2:	89 83       	std	Y+1, r24	; 0x01
	return Status;
     5c4:	89 81       	ldd	r24, Y+1	; 0x01
}
     5c6:	0f 90       	pop	r0
     5c8:	cf 91       	pop	r28
     5ca:	df 91       	pop	r29
     5cc:	08 95       	ret

000005ce <TMR_vInit>:
/******************  ******************/

#include "TMR_interface.h"
#include "TMR_config.h"

void TMR_vInit(const TMR_cfg_t *TMR){
     5ce:	df 93       	push	r29
     5d0:	cf 93       	push	r28
     5d2:	00 d0       	rcall	.+0      	; 0x5d4 <TMR_vInit+0x6>
     5d4:	00 d0       	rcall	.+0      	; 0x5d6 <TMR_vInit+0x8>
     5d6:	cd b7       	in	r28, 0x3d	; 61
     5d8:	de b7       	in	r29, 0x3e	; 62
     5da:	9a 83       	std	Y+2, r25	; 0x02
     5dc:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
     5de:	89 81       	ldd	r24, Y+1	; 0x01
     5e0:	9a 81       	ldd	r25, Y+2	; 0x02
     5e2:	00 97       	sbiw	r24, 0x00	; 0
     5e4:	09 f4       	brne	.+2      	; 0x5e8 <TMR_vInit+0x1a>
     5e6:	88 c2       	rjmp	.+1296   	; 0xaf8 <__stack+0x299>
		switch(TMR->TMR_TimerChannel){
     5e8:	e9 81       	ldd	r30, Y+1	; 0x01
     5ea:	fa 81       	ldd	r31, Y+2	; 0x02
     5ec:	80 81       	ld	r24, Z
     5ee:	28 2f       	mov	r18, r24
     5f0:	30 e0       	ldi	r19, 0x00	; 0
     5f2:	3c 83       	std	Y+4, r19	; 0x04
     5f4:	2b 83       	std	Y+3, r18	; 0x03
     5f6:	8b 81       	ldd	r24, Y+3	; 0x03
     5f8:	9c 81       	ldd	r25, Y+4	; 0x04
     5fa:	83 30       	cpi	r24, 0x03	; 3
     5fc:	91 05       	cpc	r25, r1
     5fe:	09 f4       	brne	.+2      	; 0x602 <TMR_vInit+0x34>
     600:	27 c1       	rjmp	.+590    	; 0x850 <TMR_vInit+0x282>
     602:	2b 81       	ldd	r18, Y+3	; 0x03
     604:	3c 81       	ldd	r19, Y+4	; 0x04
     606:	24 30       	cpi	r18, 0x04	; 4
     608:	31 05       	cpc	r19, r1
     60a:	8c f4       	brge	.+34     	; 0x62e <TMR_vInit+0x60>
     60c:	8b 81       	ldd	r24, Y+3	; 0x03
     60e:	9c 81       	ldd	r25, Y+4	; 0x04
     610:	81 30       	cpi	r24, 0x01	; 1
     612:	91 05       	cpc	r25, r1
     614:	09 f4       	brne	.+2      	; 0x618 <TMR_vInit+0x4a>
     616:	70 c0       	rjmp	.+224    	; 0x6f8 <TMR_vInit+0x12a>
     618:	2b 81       	ldd	r18, Y+3	; 0x03
     61a:	3c 81       	ldd	r19, Y+4	; 0x04
     61c:	22 30       	cpi	r18, 0x02	; 2
     61e:	31 05       	cpc	r19, r1
     620:	0c f0       	brlt	.+2      	; 0x624 <TMR_vInit+0x56>
     622:	bd c0       	rjmp	.+378    	; 0x79e <TMR_vInit+0x1d0>
     624:	8b 81       	ldd	r24, Y+3	; 0x03
     626:	9c 81       	ldd	r25, Y+4	; 0x04
     628:	00 97       	sbiw	r24, 0x00	; 0
     62a:	a1 f0       	breq	.+40     	; 0x654 <TMR_vInit+0x86>
     62c:	65 c2       	rjmp	.+1226   	; 0xaf8 <__stack+0x299>
     62e:	2b 81       	ldd	r18, Y+3	; 0x03
     630:	3c 81       	ldd	r19, Y+4	; 0x04
     632:	25 30       	cpi	r18, 0x05	; 5
     634:	31 05       	cpc	r19, r1
     636:	09 f4       	brne	.+2      	; 0x63a <TMR_vInit+0x6c>
     638:	be c1       	rjmp	.+892    	; 0x9b6 <__stack+0x157>
     63a:	8b 81       	ldd	r24, Y+3	; 0x03
     63c:	9c 81       	ldd	r25, Y+4	; 0x04
     63e:	85 30       	cpi	r24, 0x05	; 5
     640:	91 05       	cpc	r25, r1
     642:	0c f4       	brge	.+2      	; 0x646 <TMR_vInit+0x78>
     644:	5f c1       	rjmp	.+702    	; 0x904 <__stack+0xa5>
     646:	2b 81       	ldd	r18, Y+3	; 0x03
     648:	3c 81       	ldd	r19, Y+4	; 0x04
     64a:	26 30       	cpi	r18, 0x06	; 6
     64c:	31 05       	cpc	r19, r1
     64e:	09 f4       	brne	.+2      	; 0x652 <TMR_vInit+0x84>
     650:	04 c2       	rjmp	.+1032   	; 0xa5a <__stack+0x1fb>
     652:	52 c2       	rjmp	.+1188   	; 0xaf8 <__stack+0x299>
		case TIMER0_NORMAL:
			TCCR0_REG = (TCCR0_REG&0xB7);
     654:	a3 e5       	ldi	r26, 0x53	; 83
     656:	b0 e0       	ldi	r27, 0x00	; 0
     658:	e3 e5       	ldi	r30, 0x53	; 83
     65a:	f0 e0       	ldi	r31, 0x00	; 0
     65c:	80 81       	ld	r24, Z
     65e:	87 7b       	andi	r24, 0xB7	; 183
     660:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
     662:	e9 81       	ldd	r30, Y+1	; 0x01
     664:	fa 81       	ldd	r31, Y+2	; 0x02
     666:	82 81       	ldd	r24, Z+2	; 0x02
     668:	81 30       	cpi	r24, 0x01	; 1
     66a:	49 f4       	brne	.+18     	; 0x67e <TMR_vInit+0xb0>
				TIMSK_REG = (TIMSK_REG&0xFC) | 0x01;
     66c:	a9 e5       	ldi	r26, 0x59	; 89
     66e:	b0 e0       	ldi	r27, 0x00	; 0
     670:	e9 e5       	ldi	r30, 0x59	; 89
     672:	f0 e0       	ldi	r31, 0x00	; 0
     674:	80 81       	ld	r24, Z
     676:	8c 7f       	andi	r24, 0xFC	; 252
     678:	81 60       	ori	r24, 0x01	; 1
     67a:	8c 93       	st	X, r24
     67c:	3d c2       	rjmp	.+1146   	; 0xaf8 <__stack+0x299>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
     67e:	e9 81       	ldd	r30, Y+1	; 0x01
     680:	fa 81       	ldd	r31, Y+2	; 0x02
     682:	82 81       	ldd	r24, Z+2	; 0x02
     684:	88 23       	and	r24, r24
     686:	09 f0       	breq	.+2      	; 0x68a <TMR_vInit+0xbc>
     688:	37 c2       	rjmp	.+1134   	; 0xaf8 <__stack+0x299>
				if(TMR->TMR_OCMode == OC_Disconnected){
     68a:	e9 81       	ldd	r30, Y+1	; 0x01
     68c:	fa 81       	ldd	r31, Y+2	; 0x02
     68e:	83 81       	ldd	r24, Z+3	; 0x03
     690:	88 23       	and	r24, r24
     692:	41 f4       	brne	.+16     	; 0x6a4 <TMR_vInit+0xd6>
					TCCR0_REG = (TCCR0_REG & 0xCF);
     694:	a3 e5       	ldi	r26, 0x53	; 83
     696:	b0 e0       	ldi	r27, 0x00	; 0
     698:	e3 e5       	ldi	r30, 0x53	; 83
     69a:	f0 e0       	ldi	r31, 0x00	; 0
     69c:	80 81       	ld	r24, Z
     69e:	8f 7c       	andi	r24, 0xCF	; 207
     6a0:	8c 93       	st	X, r24
     6a2:	2a c2       	rjmp	.+1108   	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
     6a4:	e9 81       	ldd	r30, Y+1	; 0x01
     6a6:	fa 81       	ldd	r31, Y+2	; 0x02
     6a8:	83 81       	ldd	r24, Z+3	; 0x03
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	49 f4       	brne	.+18     	; 0x6c0 <TMR_vInit+0xf2>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x10;
     6ae:	a3 e5       	ldi	r26, 0x53	; 83
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	e3 e5       	ldi	r30, 0x53	; 83
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	80 81       	ld	r24, Z
     6b8:	8f 7c       	andi	r24, 0xCF	; 207
     6ba:	80 61       	ori	r24, 0x10	; 16
     6bc:	8c 93       	st	X, r24
     6be:	1c c2       	rjmp	.+1080   	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
     6c0:	e9 81       	ldd	r30, Y+1	; 0x01
     6c2:	fa 81       	ldd	r31, Y+2	; 0x02
     6c4:	83 81       	ldd	r24, Z+3	; 0x03
     6c6:	82 30       	cpi	r24, 0x02	; 2
     6c8:	49 f4       	brne	.+18     	; 0x6dc <TMR_vInit+0x10e>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
     6ca:	a3 e5       	ldi	r26, 0x53	; 83
     6cc:	b0 e0       	ldi	r27, 0x00	; 0
     6ce:	e3 e5       	ldi	r30, 0x53	; 83
     6d0:	f0 e0       	ldi	r31, 0x00	; 0
     6d2:	80 81       	ld	r24, Z
     6d4:	8f 7c       	andi	r24, 0xCF	; 207
     6d6:	80 62       	ori	r24, 0x20	; 32
     6d8:	8c 93       	st	X, r24
     6da:	0e c2       	rjmp	.+1052   	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Set){
     6dc:	e9 81       	ldd	r30, Y+1	; 0x01
     6de:	fa 81       	ldd	r31, Y+2	; 0x02
     6e0:	83 81       	ldd	r24, Z+3	; 0x03
     6e2:	83 30       	cpi	r24, 0x03	; 3
     6e4:	09 f0       	breq	.+2      	; 0x6e8 <TMR_vInit+0x11a>
     6e6:	08 c2       	rjmp	.+1040   	; 0xaf8 <__stack+0x299>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
     6e8:	a3 e5       	ldi	r26, 0x53	; 83
     6ea:	b0 e0       	ldi	r27, 0x00	; 0
     6ec:	e3 e5       	ldi	r30, 0x53	; 83
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	80 81       	ld	r24, Z
     6f2:	80 63       	ori	r24, 0x30	; 48
     6f4:	8c 93       	st	X, r24
     6f6:	00 c2       	rjmp	.+1024   	; 0xaf8 <__stack+0x299>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER0_CTC:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x8;
     6f8:	a3 e5       	ldi	r26, 0x53	; 83
     6fa:	b0 e0       	ldi	r27, 0x00	; 0
     6fc:	e3 e5       	ldi	r30, 0x53	; 83
     6fe:	f0 e0       	ldi	r31, 0x00	; 0
     700:	80 81       	ld	r24, Z
     702:	87 7b       	andi	r24, 0xB7	; 183
     704:	88 60       	ori	r24, 0x08	; 8
     706:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
     708:	e9 81       	ldd	r30, Y+1	; 0x01
     70a:	fa 81       	ldd	r31, Y+2	; 0x02
     70c:	82 81       	ldd	r24, Z+2	; 0x02
     70e:	81 30       	cpi	r24, 0x01	; 1
     710:	49 f4       	brne	.+18     	; 0x724 <TMR_vInit+0x156>
				TIMSK_REG = (TIMSK_REG&0xFC) | 0x02;
     712:	a9 e5       	ldi	r26, 0x59	; 89
     714:	b0 e0       	ldi	r27, 0x00	; 0
     716:	e9 e5       	ldi	r30, 0x59	; 89
     718:	f0 e0       	ldi	r31, 0x00	; 0
     71a:	80 81       	ld	r24, Z
     71c:	8c 7f       	andi	r24, 0xFC	; 252
     71e:	82 60       	ori	r24, 0x02	; 2
     720:	8c 93       	st	X, r24
     722:	ea c1       	rjmp	.+980    	; 0xaf8 <__stack+0x299>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
     724:	e9 81       	ldd	r30, Y+1	; 0x01
     726:	fa 81       	ldd	r31, Y+2	; 0x02
     728:	82 81       	ldd	r24, Z+2	; 0x02
     72a:	88 23       	and	r24, r24
     72c:	09 f0       	breq	.+2      	; 0x730 <TMR_vInit+0x162>
     72e:	e4 c1       	rjmp	.+968    	; 0xaf8 <__stack+0x299>
				if(TMR->TMR_OCMode == OC_Disconnected){
     730:	e9 81       	ldd	r30, Y+1	; 0x01
     732:	fa 81       	ldd	r31, Y+2	; 0x02
     734:	83 81       	ldd	r24, Z+3	; 0x03
     736:	88 23       	and	r24, r24
     738:	41 f4       	brne	.+16     	; 0x74a <TMR_vInit+0x17c>
					TCCR0_REG = (TCCR0_REG & 0xCF);
     73a:	a3 e5       	ldi	r26, 0x53	; 83
     73c:	b0 e0       	ldi	r27, 0x00	; 0
     73e:	e3 e5       	ldi	r30, 0x53	; 83
     740:	f0 e0       	ldi	r31, 0x00	; 0
     742:	80 81       	ld	r24, Z
     744:	8f 7c       	andi	r24, 0xCF	; 207
     746:	8c 93       	st	X, r24
     748:	d7 c1       	rjmp	.+942    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
     74a:	e9 81       	ldd	r30, Y+1	; 0x01
     74c:	fa 81       	ldd	r31, Y+2	; 0x02
     74e:	83 81       	ldd	r24, Z+3	; 0x03
     750:	81 30       	cpi	r24, 0x01	; 1
     752:	49 f4       	brne	.+18     	; 0x766 <TMR_vInit+0x198>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x10;
     754:	a3 e5       	ldi	r26, 0x53	; 83
     756:	b0 e0       	ldi	r27, 0x00	; 0
     758:	e3 e5       	ldi	r30, 0x53	; 83
     75a:	f0 e0       	ldi	r31, 0x00	; 0
     75c:	80 81       	ld	r24, Z
     75e:	8f 7c       	andi	r24, 0xCF	; 207
     760:	80 61       	ori	r24, 0x10	; 16
     762:	8c 93       	st	X, r24
     764:	c9 c1       	rjmp	.+914    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
     766:	e9 81       	ldd	r30, Y+1	; 0x01
     768:	fa 81       	ldd	r31, Y+2	; 0x02
     76a:	83 81       	ldd	r24, Z+3	; 0x03
     76c:	82 30       	cpi	r24, 0x02	; 2
     76e:	49 f4       	brne	.+18     	; 0x782 <TMR_vInit+0x1b4>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
     770:	a3 e5       	ldi	r26, 0x53	; 83
     772:	b0 e0       	ldi	r27, 0x00	; 0
     774:	e3 e5       	ldi	r30, 0x53	; 83
     776:	f0 e0       	ldi	r31, 0x00	; 0
     778:	80 81       	ld	r24, Z
     77a:	8f 7c       	andi	r24, 0xCF	; 207
     77c:	80 62       	ori	r24, 0x20	; 32
     77e:	8c 93       	st	X, r24
     780:	bb c1       	rjmp	.+886    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Set){
     782:	e9 81       	ldd	r30, Y+1	; 0x01
     784:	fa 81       	ldd	r31, Y+2	; 0x02
     786:	83 81       	ldd	r24, Z+3	; 0x03
     788:	83 30       	cpi	r24, 0x03	; 3
     78a:	09 f0       	breq	.+2      	; 0x78e <TMR_vInit+0x1c0>
     78c:	b5 c1       	rjmp	.+874    	; 0xaf8 <__stack+0x299>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
     78e:	a3 e5       	ldi	r26, 0x53	; 83
     790:	b0 e0       	ldi	r27, 0x00	; 0
     792:	e3 e5       	ldi	r30, 0x53	; 83
     794:	f0 e0       	ldi	r31, 0x00	; 0
     796:	80 81       	ld	r24, Z
     798:	80 63       	ori	r24, 0x30	; 48
     79a:	8c 93       	st	X, r24
     79c:	ad c1       	rjmp	.+858    	; 0xaf8 <__stack+0x299>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_NORMAL:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
     79e:	af e4       	ldi	r26, 0x4F	; 79
     7a0:	b0 e0       	ldi	r27, 0x00	; 0
     7a2:	ef e4       	ldi	r30, 0x4F	; 79
     7a4:	f0 e0       	ldi	r31, 0x00	; 0
     7a6:	80 81       	ld	r24, Z
     7a8:	8c 7f       	andi	r24, 0xFC	; 252
     7aa:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
     7ac:	ae e4       	ldi	r26, 0x4E	; 78
     7ae:	b0 e0       	ldi	r27, 0x00	; 0
     7b0:	ee e4       	ldi	r30, 0x4E	; 78
     7b2:	f0 e0       	ldi	r31, 0x00	; 0
     7b4:	80 81       	ld	r24, Z
     7b6:	87 7e       	andi	r24, 0xE7	; 231
     7b8:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
     7ba:	e9 81       	ldd	r30, Y+1	; 0x01
     7bc:	fa 81       	ldd	r31, Y+2	; 0x02
     7be:	82 81       	ldd	r24, Z+2	; 0x02
     7c0:	81 30       	cpi	r24, 0x01	; 1
     7c2:	49 f4       	brne	.+18     	; 0x7d6 <TMR_vInit+0x208>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x04;
     7c4:	a9 e5       	ldi	r26, 0x59	; 89
     7c6:	b0 e0       	ldi	r27, 0x00	; 0
     7c8:	e9 e5       	ldi	r30, 0x59	; 89
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	80 81       	ld	r24, Z
     7ce:	83 7c       	andi	r24, 0xC3	; 195
     7d0:	84 60       	ori	r24, 0x04	; 4
     7d2:	8c 93       	st	X, r24
     7d4:	91 c1       	rjmp	.+802    	; 0xaf8 <__stack+0x299>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
     7d6:	e9 81       	ldd	r30, Y+1	; 0x01
     7d8:	fa 81       	ldd	r31, Y+2	; 0x02
     7da:	82 81       	ldd	r24, Z+2	; 0x02
     7dc:	88 23       	and	r24, r24
     7de:	09 f0       	breq	.+2      	; 0x7e2 <TMR_vInit+0x214>
     7e0:	8b c1       	rjmp	.+790    	; 0xaf8 <__stack+0x299>
				if(TMR->TMR_OCMode == OC_Disconnected){
     7e2:	e9 81       	ldd	r30, Y+1	; 0x01
     7e4:	fa 81       	ldd	r31, Y+2	; 0x02
     7e6:	83 81       	ldd	r24, Z+3	; 0x03
     7e8:	88 23       	and	r24, r24
     7ea:	41 f4       	brne	.+16     	; 0x7fc <TMR_vInit+0x22e>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
     7ec:	af e4       	ldi	r26, 0x4F	; 79
     7ee:	b0 e0       	ldi	r27, 0x00	; 0
     7f0:	ef e4       	ldi	r30, 0x4F	; 79
     7f2:	f0 e0       	ldi	r31, 0x00	; 0
     7f4:	80 81       	ld	r24, Z
     7f6:	8f 7c       	andi	r24, 0xCF	; 207
     7f8:	8c 93       	st	X, r24
     7fa:	7e c1       	rjmp	.+764    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
     7fc:	e9 81       	ldd	r30, Y+1	; 0x01
     7fe:	fa 81       	ldd	r31, Y+2	; 0x02
     800:	83 81       	ldd	r24, Z+3	; 0x03
     802:	81 30       	cpi	r24, 0x01	; 1
     804:	49 f4       	brne	.+18     	; 0x818 <TMR_vInit+0x24a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
     806:	af e4       	ldi	r26, 0x4F	; 79
     808:	b0 e0       	ldi	r27, 0x00	; 0
     80a:	ef e4       	ldi	r30, 0x4F	; 79
     80c:	f0 e0       	ldi	r31, 0x00	; 0
     80e:	80 81       	ld	r24, Z
     810:	8f 7c       	andi	r24, 0xCF	; 207
     812:	80 61       	ori	r24, 0x10	; 16
     814:	8c 93       	st	X, r24
     816:	70 c1       	rjmp	.+736    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
     818:	e9 81       	ldd	r30, Y+1	; 0x01
     81a:	fa 81       	ldd	r31, Y+2	; 0x02
     81c:	83 81       	ldd	r24, Z+3	; 0x03
     81e:	82 30       	cpi	r24, 0x02	; 2
     820:	49 f4       	brne	.+18     	; 0x834 <TMR_vInit+0x266>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
     822:	af e4       	ldi	r26, 0x4F	; 79
     824:	b0 e0       	ldi	r27, 0x00	; 0
     826:	ef e4       	ldi	r30, 0x4F	; 79
     828:	f0 e0       	ldi	r31, 0x00	; 0
     82a:	80 81       	ld	r24, Z
     82c:	8f 7c       	andi	r24, 0xCF	; 207
     82e:	80 62       	ori	r24, 0x20	; 32
     830:	8c 93       	st	X, r24
     832:	62 c1       	rjmp	.+708    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Set){
     834:	e9 81       	ldd	r30, Y+1	; 0x01
     836:	fa 81       	ldd	r31, Y+2	; 0x02
     838:	83 81       	ldd	r24, Z+3	; 0x03
     83a:	83 30       	cpi	r24, 0x03	; 3
     83c:	09 f0       	breq	.+2      	; 0x840 <TMR_vInit+0x272>
     83e:	5c c1       	rjmp	.+696    	; 0xaf8 <__stack+0x299>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
     840:	af e4       	ldi	r26, 0x4F	; 79
     842:	b0 e0       	ldi	r27, 0x00	; 0
     844:	ef e4       	ldi	r30, 0x4F	; 79
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	80 81       	ld	r24, Z
     84a:	80 63       	ori	r24, 0x30	; 48
     84c:	8c 93       	st	X, r24
     84e:	54 c1       	rjmp	.+680    	; 0xaf8 <__stack+0x299>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_CTC_OCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
     850:	af e4       	ldi	r26, 0x4F	; 79
     852:	b0 e0       	ldi	r27, 0x00	; 0
     854:	ef e4       	ldi	r30, 0x4F	; 79
     856:	f0 e0       	ldi	r31, 0x00	; 0
     858:	80 81       	ld	r24, Z
     85a:	8c 7f       	andi	r24, 0xFC	; 252
     85c:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x08;
     85e:	ae e4       	ldi	r26, 0x4E	; 78
     860:	b0 e0       	ldi	r27, 0x00	; 0
     862:	ee e4       	ldi	r30, 0x4E	; 78
     864:	f0 e0       	ldi	r31, 0x00	; 0
     866:	80 81       	ld	r24, Z
     868:	87 7e       	andi	r24, 0xE7	; 231
     86a:	88 60       	ori	r24, 0x08	; 8
     86c:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
     86e:	e9 81       	ldd	r30, Y+1	; 0x01
     870:	fa 81       	ldd	r31, Y+2	; 0x02
     872:	82 81       	ldd	r24, Z+2	; 0x02
     874:	81 30       	cpi	r24, 0x01	; 1
     876:	49 f4       	brne	.+18     	; 0x88a <__stack+0x2b>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x18;
     878:	a9 e5       	ldi	r26, 0x59	; 89
     87a:	b0 e0       	ldi	r27, 0x00	; 0
     87c:	e9 e5       	ldi	r30, 0x59	; 89
     87e:	f0 e0       	ldi	r31, 0x00	; 0
     880:	80 81       	ld	r24, Z
     882:	83 7c       	andi	r24, 0xC3	; 195
     884:	88 61       	ori	r24, 0x18	; 24
     886:	8c 93       	st	X, r24
     888:	37 c1       	rjmp	.+622    	; 0xaf8 <__stack+0x299>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
     88a:	e9 81       	ldd	r30, Y+1	; 0x01
     88c:	fa 81       	ldd	r31, Y+2	; 0x02
     88e:	82 81       	ldd	r24, Z+2	; 0x02
     890:	88 23       	and	r24, r24
     892:	09 f0       	breq	.+2      	; 0x896 <__stack+0x37>
     894:	31 c1       	rjmp	.+610    	; 0xaf8 <__stack+0x299>
				if(TMR->TMR_OCMode == OC_Disconnected){
     896:	e9 81       	ldd	r30, Y+1	; 0x01
     898:	fa 81       	ldd	r31, Y+2	; 0x02
     89a:	83 81       	ldd	r24, Z+3	; 0x03
     89c:	88 23       	and	r24, r24
     89e:	41 f4       	brne	.+16     	; 0x8b0 <__stack+0x51>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
     8a0:	af e4       	ldi	r26, 0x4F	; 79
     8a2:	b0 e0       	ldi	r27, 0x00	; 0
     8a4:	ef e4       	ldi	r30, 0x4F	; 79
     8a6:	f0 e0       	ldi	r31, 0x00	; 0
     8a8:	80 81       	ld	r24, Z
     8aa:	8f 7c       	andi	r24, 0xCF	; 207
     8ac:	8c 93       	st	X, r24
     8ae:	24 c1       	rjmp	.+584    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
     8b0:	e9 81       	ldd	r30, Y+1	; 0x01
     8b2:	fa 81       	ldd	r31, Y+2	; 0x02
     8b4:	83 81       	ldd	r24, Z+3	; 0x03
     8b6:	81 30       	cpi	r24, 0x01	; 1
     8b8:	49 f4       	brne	.+18     	; 0x8cc <__stack+0x6d>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
     8ba:	af e4       	ldi	r26, 0x4F	; 79
     8bc:	b0 e0       	ldi	r27, 0x00	; 0
     8be:	ef e4       	ldi	r30, 0x4F	; 79
     8c0:	f0 e0       	ldi	r31, 0x00	; 0
     8c2:	80 81       	ld	r24, Z
     8c4:	8f 7c       	andi	r24, 0xCF	; 207
     8c6:	80 61       	ori	r24, 0x10	; 16
     8c8:	8c 93       	st	X, r24
     8ca:	16 c1       	rjmp	.+556    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
     8cc:	e9 81       	ldd	r30, Y+1	; 0x01
     8ce:	fa 81       	ldd	r31, Y+2	; 0x02
     8d0:	83 81       	ldd	r24, Z+3	; 0x03
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	49 f4       	brne	.+18     	; 0x8e8 <__stack+0x89>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
     8d6:	af e4       	ldi	r26, 0x4F	; 79
     8d8:	b0 e0       	ldi	r27, 0x00	; 0
     8da:	ef e4       	ldi	r30, 0x4F	; 79
     8dc:	f0 e0       	ldi	r31, 0x00	; 0
     8de:	80 81       	ld	r24, Z
     8e0:	8f 7c       	andi	r24, 0xCF	; 207
     8e2:	80 62       	ori	r24, 0x20	; 32
     8e4:	8c 93       	st	X, r24
     8e6:	08 c1       	rjmp	.+528    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Set){
     8e8:	e9 81       	ldd	r30, Y+1	; 0x01
     8ea:	fa 81       	ldd	r31, Y+2	; 0x02
     8ec:	83 81       	ldd	r24, Z+3	; 0x03
     8ee:	83 30       	cpi	r24, 0x03	; 3
     8f0:	09 f0       	breq	.+2      	; 0x8f4 <__stack+0x95>
     8f2:	02 c1       	rjmp	.+516    	; 0xaf8 <__stack+0x299>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
     8f4:	af e4       	ldi	r26, 0x4F	; 79
     8f6:	b0 e0       	ldi	r27, 0x00	; 0
     8f8:	ef e4       	ldi	r30, 0x4F	; 79
     8fa:	f0 e0       	ldi	r31, 0x00	; 0
     8fc:	80 81       	ld	r24, Z
     8fe:	80 63       	ori	r24, 0x30	; 48
     900:	8c 93       	st	X, r24
     902:	fa c0       	rjmp	.+500    	; 0xaf8 <__stack+0x299>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_CTC_ICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
     904:	af e4       	ldi	r26, 0x4F	; 79
     906:	b0 e0       	ldi	r27, 0x00	; 0
     908:	ef e4       	ldi	r30, 0x4F	; 79
     90a:	f0 e0       	ldi	r31, 0x00	; 0
     90c:	80 81       	ld	r24, Z
     90e:	8c 7f       	andi	r24, 0xFC	; 252
     910:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
     912:	ae e4       	ldi	r26, 0x4E	; 78
     914:	b0 e0       	ldi	r27, 0x00	; 0
     916:	ee e4       	ldi	r30, 0x4E	; 78
     918:	f0 e0       	ldi	r31, 0x00	; 0
     91a:	80 81       	ld	r24, Z
     91c:	88 61       	ori	r24, 0x18	; 24
     91e:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
     920:	e9 81       	ldd	r30, Y+1	; 0x01
     922:	fa 81       	ldd	r31, Y+2	; 0x02
     924:	82 81       	ldd	r24, Z+2	; 0x02
     926:	81 30       	cpi	r24, 0x01	; 1
     928:	49 f4       	brne	.+18     	; 0x93c <__stack+0xdd>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x18;
     92a:	a9 e5       	ldi	r26, 0x59	; 89
     92c:	b0 e0       	ldi	r27, 0x00	; 0
     92e:	e9 e5       	ldi	r30, 0x59	; 89
     930:	f0 e0       	ldi	r31, 0x00	; 0
     932:	80 81       	ld	r24, Z
     934:	83 7c       	andi	r24, 0xC3	; 195
     936:	88 61       	ori	r24, 0x18	; 24
     938:	8c 93       	st	X, r24
     93a:	de c0       	rjmp	.+444    	; 0xaf8 <__stack+0x299>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
     93c:	e9 81       	ldd	r30, Y+1	; 0x01
     93e:	fa 81       	ldd	r31, Y+2	; 0x02
     940:	82 81       	ldd	r24, Z+2	; 0x02
     942:	88 23       	and	r24, r24
     944:	09 f0       	breq	.+2      	; 0x948 <__stack+0xe9>
     946:	d8 c0       	rjmp	.+432    	; 0xaf8 <__stack+0x299>
				if(TMR->TMR_OCMode == OC_Disconnected){
     948:	e9 81       	ldd	r30, Y+1	; 0x01
     94a:	fa 81       	ldd	r31, Y+2	; 0x02
     94c:	83 81       	ldd	r24, Z+3	; 0x03
     94e:	88 23       	and	r24, r24
     950:	41 f4       	brne	.+16     	; 0x962 <__stack+0x103>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
     952:	af e4       	ldi	r26, 0x4F	; 79
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef e4       	ldi	r30, 0x4F	; 79
     958:	f0 e0       	ldi	r31, 0x00	; 0
     95a:	80 81       	ld	r24, Z
     95c:	8f 7c       	andi	r24, 0xCF	; 207
     95e:	8c 93       	st	X, r24
     960:	cb c0       	rjmp	.+406    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
     962:	e9 81       	ldd	r30, Y+1	; 0x01
     964:	fa 81       	ldd	r31, Y+2	; 0x02
     966:	83 81       	ldd	r24, Z+3	; 0x03
     968:	81 30       	cpi	r24, 0x01	; 1
     96a:	49 f4       	brne	.+18     	; 0x97e <__stack+0x11f>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
     96c:	af e4       	ldi	r26, 0x4F	; 79
     96e:	b0 e0       	ldi	r27, 0x00	; 0
     970:	ef e4       	ldi	r30, 0x4F	; 79
     972:	f0 e0       	ldi	r31, 0x00	; 0
     974:	80 81       	ld	r24, Z
     976:	8f 7c       	andi	r24, 0xCF	; 207
     978:	80 61       	ori	r24, 0x10	; 16
     97a:	8c 93       	st	X, r24
     97c:	bd c0       	rjmp	.+378    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
     97e:	e9 81       	ldd	r30, Y+1	; 0x01
     980:	fa 81       	ldd	r31, Y+2	; 0x02
     982:	83 81       	ldd	r24, Z+3	; 0x03
     984:	82 30       	cpi	r24, 0x02	; 2
     986:	49 f4       	brne	.+18     	; 0x99a <__stack+0x13b>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
     988:	af e4       	ldi	r26, 0x4F	; 79
     98a:	b0 e0       	ldi	r27, 0x00	; 0
     98c:	ef e4       	ldi	r30, 0x4F	; 79
     98e:	f0 e0       	ldi	r31, 0x00	; 0
     990:	80 81       	ld	r24, Z
     992:	8f 7c       	andi	r24, 0xCF	; 207
     994:	80 62       	ori	r24, 0x20	; 32
     996:	8c 93       	st	X, r24
     998:	af c0       	rjmp	.+350    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Set){
     99a:	e9 81       	ldd	r30, Y+1	; 0x01
     99c:	fa 81       	ldd	r31, Y+2	; 0x02
     99e:	83 81       	ldd	r24, Z+3	; 0x03
     9a0:	83 30       	cpi	r24, 0x03	; 3
     9a2:	09 f0       	breq	.+2      	; 0x9a6 <__stack+0x147>
     9a4:	a9 c0       	rjmp	.+338    	; 0xaf8 <__stack+0x299>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
     9a6:	af e4       	ldi	r26, 0x4F	; 79
     9a8:	b0 e0       	ldi	r27, 0x00	; 0
     9aa:	ef e4       	ldi	r30, 0x4F	; 79
     9ac:	f0 e0       	ldi	r31, 0x00	; 0
     9ae:	80 81       	ld	r24, Z
     9b0:	80 63       	ori	r24, 0x30	; 48
     9b2:	8c 93       	st	X, r24
     9b4:	a1 c0       	rjmp	.+322    	; 0xaf8 <__stack+0x299>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_NORMAL:
			TCCR2_REG = (TCCR2_REG&0xB7);
     9b6:	a5 e4       	ldi	r26, 0x45	; 69
     9b8:	b0 e0       	ldi	r27, 0x00	; 0
     9ba:	e5 e4       	ldi	r30, 0x45	; 69
     9bc:	f0 e0       	ldi	r31, 0x00	; 0
     9be:	80 81       	ld	r24, Z
     9c0:	87 7b       	andi	r24, 0xB7	; 183
     9c2:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
     9c4:	e9 81       	ldd	r30, Y+1	; 0x01
     9c6:	fa 81       	ldd	r31, Y+2	; 0x02
     9c8:	82 81       	ldd	r24, Z+2	; 0x02
     9ca:	81 30       	cpi	r24, 0x01	; 1
     9cc:	49 f4       	brne	.+18     	; 0x9e0 <__stack+0x181>
				TIMSK_REG = (TIMSK_REG&0x3F) | 0x40;
     9ce:	a9 e5       	ldi	r26, 0x59	; 89
     9d0:	b0 e0       	ldi	r27, 0x00	; 0
     9d2:	e9 e5       	ldi	r30, 0x59	; 89
     9d4:	f0 e0       	ldi	r31, 0x00	; 0
     9d6:	80 81       	ld	r24, Z
     9d8:	8f 73       	andi	r24, 0x3F	; 63
     9da:	80 64       	ori	r24, 0x40	; 64
     9dc:	8c 93       	st	X, r24
     9de:	8c c0       	rjmp	.+280    	; 0xaf8 <__stack+0x299>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
     9e0:	e9 81       	ldd	r30, Y+1	; 0x01
     9e2:	fa 81       	ldd	r31, Y+2	; 0x02
     9e4:	82 81       	ldd	r24, Z+2	; 0x02
     9e6:	88 23       	and	r24, r24
     9e8:	09 f0       	breq	.+2      	; 0x9ec <__stack+0x18d>
     9ea:	86 c0       	rjmp	.+268    	; 0xaf8 <__stack+0x299>
				if(TMR->TMR_OCMode == OC_Disconnected){
     9ec:	e9 81       	ldd	r30, Y+1	; 0x01
     9ee:	fa 81       	ldd	r31, Y+2	; 0x02
     9f0:	83 81       	ldd	r24, Z+3	; 0x03
     9f2:	88 23       	and	r24, r24
     9f4:	41 f4       	brne	.+16     	; 0xa06 <__stack+0x1a7>
					TCCR2_REG = (TCCR2_REG & 0xCF);
     9f6:	a5 e4       	ldi	r26, 0x45	; 69
     9f8:	b0 e0       	ldi	r27, 0x00	; 0
     9fa:	e5 e4       	ldi	r30, 0x45	; 69
     9fc:	f0 e0       	ldi	r31, 0x00	; 0
     9fe:	80 81       	ld	r24, Z
     a00:	8f 7c       	andi	r24, 0xCF	; 207
     a02:	8c 93       	st	X, r24
     a04:	79 c0       	rjmp	.+242    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
     a06:	e9 81       	ldd	r30, Y+1	; 0x01
     a08:	fa 81       	ldd	r31, Y+2	; 0x02
     a0a:	83 81       	ldd	r24, Z+3	; 0x03
     a0c:	81 30       	cpi	r24, 0x01	; 1
     a0e:	49 f4       	brne	.+18     	; 0xa22 <__stack+0x1c3>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x10;
     a10:	a5 e4       	ldi	r26, 0x45	; 69
     a12:	b0 e0       	ldi	r27, 0x00	; 0
     a14:	e5 e4       	ldi	r30, 0x45	; 69
     a16:	f0 e0       	ldi	r31, 0x00	; 0
     a18:	80 81       	ld	r24, Z
     a1a:	8f 7c       	andi	r24, 0xCF	; 207
     a1c:	80 61       	ori	r24, 0x10	; 16
     a1e:	8c 93       	st	X, r24
     a20:	6b c0       	rjmp	.+214    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
     a22:	e9 81       	ldd	r30, Y+1	; 0x01
     a24:	fa 81       	ldd	r31, Y+2	; 0x02
     a26:	83 81       	ldd	r24, Z+3	; 0x03
     a28:	82 30       	cpi	r24, 0x02	; 2
     a2a:	49 f4       	brne	.+18     	; 0xa3e <__stack+0x1df>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x20;
     a2c:	a5 e4       	ldi	r26, 0x45	; 69
     a2e:	b0 e0       	ldi	r27, 0x00	; 0
     a30:	e5 e4       	ldi	r30, 0x45	; 69
     a32:	f0 e0       	ldi	r31, 0x00	; 0
     a34:	80 81       	ld	r24, Z
     a36:	8f 7c       	andi	r24, 0xCF	; 207
     a38:	80 62       	ori	r24, 0x20	; 32
     a3a:	8c 93       	st	X, r24
     a3c:	5d c0       	rjmp	.+186    	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Set){
     a3e:	e9 81       	ldd	r30, Y+1	; 0x01
     a40:	fa 81       	ldd	r31, Y+2	; 0x02
     a42:	83 81       	ldd	r24, Z+3	; 0x03
     a44:	83 30       	cpi	r24, 0x03	; 3
     a46:	09 f0       	breq	.+2      	; 0xa4a <__stack+0x1eb>
     a48:	57 c0       	rjmp	.+174    	; 0xaf8 <__stack+0x299>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x30;
     a4a:	a5 e4       	ldi	r26, 0x45	; 69
     a4c:	b0 e0       	ldi	r27, 0x00	; 0
     a4e:	e5 e4       	ldi	r30, 0x45	; 69
     a50:	f0 e0       	ldi	r31, 0x00	; 0
     a52:	80 81       	ld	r24, Z
     a54:	80 63       	ori	r24, 0x30	; 48
     a56:	8c 93       	st	X, r24
     a58:	4f c0       	rjmp	.+158    	; 0xaf8 <__stack+0x299>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_CTC:
			TCCR2_REG = (TCCR2_REG&0xB7);
     a5a:	a5 e4       	ldi	r26, 0x45	; 69
     a5c:	b0 e0       	ldi	r27, 0x00	; 0
     a5e:	e5 e4       	ldi	r30, 0x45	; 69
     a60:	f0 e0       	ldi	r31, 0x00	; 0
     a62:	80 81       	ld	r24, Z
     a64:	87 7b       	andi	r24, 0xB7	; 183
     a66:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
     a68:	e9 81       	ldd	r30, Y+1	; 0x01
     a6a:	fa 81       	ldd	r31, Y+2	; 0x02
     a6c:	82 81       	ldd	r24, Z+2	; 0x02
     a6e:	81 30       	cpi	r24, 0x01	; 1
     a70:	49 f4       	brne	.+18     	; 0xa84 <__stack+0x225>
				TIMSK_REG = (TIMSK_REG&0x3F) | 0x80;
     a72:	a9 e5       	ldi	r26, 0x59	; 89
     a74:	b0 e0       	ldi	r27, 0x00	; 0
     a76:	e9 e5       	ldi	r30, 0x59	; 89
     a78:	f0 e0       	ldi	r31, 0x00	; 0
     a7a:	80 81       	ld	r24, Z
     a7c:	8f 73       	andi	r24, 0x3F	; 63
     a7e:	80 68       	ori	r24, 0x80	; 128
     a80:	8c 93       	st	X, r24
     a82:	3a c0       	rjmp	.+116    	; 0xaf8 <__stack+0x299>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
     a84:	e9 81       	ldd	r30, Y+1	; 0x01
     a86:	fa 81       	ldd	r31, Y+2	; 0x02
     a88:	82 81       	ldd	r24, Z+2	; 0x02
     a8a:	88 23       	and	r24, r24
     a8c:	a9 f5       	brne	.+106    	; 0xaf8 <__stack+0x299>
				if(TMR->TMR_OCMode == OC_Disconnected){
     a8e:	e9 81       	ldd	r30, Y+1	; 0x01
     a90:	fa 81       	ldd	r31, Y+2	; 0x02
     a92:	83 81       	ldd	r24, Z+3	; 0x03
     a94:	88 23       	and	r24, r24
     a96:	41 f4       	brne	.+16     	; 0xaa8 <__stack+0x249>
					TCCR2_REG = (TCCR2_REG & 0xCF);
     a98:	a5 e4       	ldi	r26, 0x45	; 69
     a9a:	b0 e0       	ldi	r27, 0x00	; 0
     a9c:	e5 e4       	ldi	r30, 0x45	; 69
     a9e:	f0 e0       	ldi	r31, 0x00	; 0
     aa0:	80 81       	ld	r24, Z
     aa2:	8f 7c       	andi	r24, 0xCF	; 207
     aa4:	8c 93       	st	X, r24
     aa6:	28 c0       	rjmp	.+80     	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
     aa8:	e9 81       	ldd	r30, Y+1	; 0x01
     aaa:	fa 81       	ldd	r31, Y+2	; 0x02
     aac:	83 81       	ldd	r24, Z+3	; 0x03
     aae:	81 30       	cpi	r24, 0x01	; 1
     ab0:	49 f4       	brne	.+18     	; 0xac4 <__stack+0x265>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x10;
     ab2:	a5 e4       	ldi	r26, 0x45	; 69
     ab4:	b0 e0       	ldi	r27, 0x00	; 0
     ab6:	e5 e4       	ldi	r30, 0x45	; 69
     ab8:	f0 e0       	ldi	r31, 0x00	; 0
     aba:	80 81       	ld	r24, Z
     abc:	8f 7c       	andi	r24, 0xCF	; 207
     abe:	80 61       	ori	r24, 0x10	; 16
     ac0:	8c 93       	st	X, r24
     ac2:	1a c0       	rjmp	.+52     	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
     ac4:	e9 81       	ldd	r30, Y+1	; 0x01
     ac6:	fa 81       	ldd	r31, Y+2	; 0x02
     ac8:	83 81       	ldd	r24, Z+3	; 0x03
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	49 f4       	brne	.+18     	; 0xae0 <__stack+0x281>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x20;
     ace:	a5 e4       	ldi	r26, 0x45	; 69
     ad0:	b0 e0       	ldi	r27, 0x00	; 0
     ad2:	e5 e4       	ldi	r30, 0x45	; 69
     ad4:	f0 e0       	ldi	r31, 0x00	; 0
     ad6:	80 81       	ld	r24, Z
     ad8:	8f 7c       	andi	r24, 0xCF	; 207
     ada:	80 62       	ori	r24, 0x20	; 32
     adc:	8c 93       	st	X, r24
     ade:	0c c0       	rjmp	.+24     	; 0xaf8 <__stack+0x299>
				}
				else if(TMR->TMR_OCMode == OC_Set){
     ae0:	e9 81       	ldd	r30, Y+1	; 0x01
     ae2:	fa 81       	ldd	r31, Y+2	; 0x02
     ae4:	83 81       	ldd	r24, Z+3	; 0x03
     ae6:	83 30       	cpi	r24, 0x03	; 3
     ae8:	39 f4       	brne	.+14     	; 0xaf8 <__stack+0x299>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x30;
     aea:	a5 e4       	ldi	r26, 0x45	; 69
     aec:	b0 e0       	ldi	r27, 0x00	; 0
     aee:	e5 e4       	ldi	r30, 0x45	; 69
     af0:	f0 e0       	ldi	r31, 0x00	; 0
     af2:	80 81       	ld	r24, Z
     af4:	80 63       	ori	r24, 0x30	; 48
     af6:	8c 93       	st	X, r24
			else{ /* Do Nothing */ }
			break;
		default: /* Do Nothing */ break;
		}
	}
}
     af8:	0f 90       	pop	r0
     afa:	0f 90       	pop	r0
     afc:	0f 90       	pop	r0
     afe:	0f 90       	pop	r0
     b00:	cf 91       	pop	r28
     b02:	df 91       	pop	r29
     b04:	08 95       	ret

00000b06 <TMR_vStartTimer>:

void TMR_vStartTimer(const TMR_cfg_t *TMR){
     b06:	df 93       	push	r29
     b08:	cf 93       	push	r28
     b0a:	cd b7       	in	r28, 0x3d	; 61
     b0c:	de b7       	in	r29, 0x3e	; 62
     b0e:	2a 97       	sbiw	r28, 0x0a	; 10
     b10:	0f b6       	in	r0, 0x3f	; 63
     b12:	f8 94       	cli
     b14:	de bf       	out	0x3e, r29	; 62
     b16:	0f be       	out	0x3f, r0	; 63
     b18:	cd bf       	out	0x3d, r28	; 61
     b1a:	9a 83       	std	Y+2, r25	; 0x02
     b1c:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
     b1e:	89 81       	ldd	r24, Y+1	; 0x01
     b20:	9a 81       	ldd	r25, Y+2	; 0x02
     b22:	00 97       	sbiw	r24, 0x00	; 0
     b24:	09 f4       	brne	.+2      	; 0xb28 <TMR_vStartTimer+0x22>
     b26:	98 c1       	rjmp	.+816    	; 0xe58 <TMR_vStartTimer+0x352>
		switch(TMR->TMR_TimerChannel){
     b28:	e9 81       	ldd	r30, Y+1	; 0x01
     b2a:	fa 81       	ldd	r31, Y+2	; 0x02
     b2c:	80 81       	ld	r24, Z
     b2e:	28 2f       	mov	r18, r24
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	3a 87       	std	Y+10, r19	; 0x0a
     b34:	29 87       	std	Y+9, r18	; 0x09
     b36:	89 85       	ldd	r24, Y+9	; 0x09
     b38:	9a 85       	ldd	r25, Y+10	; 0x0a
     b3a:	85 30       	cpi	r24, 0x05	; 5
     b3c:	91 05       	cpc	r25, r1
     b3e:	64 f4       	brge	.+24     	; 0xb58 <TMR_vStartTimer+0x52>
     b40:	29 85       	ldd	r18, Y+9	; 0x09
     b42:	3a 85       	ldd	r19, Y+10	; 0x0a
     b44:	22 30       	cpi	r18, 0x02	; 2
     b46:	31 05       	cpc	r19, r1
     b48:	0c f0       	brlt	.+2      	; 0xb4c <TMR_vStartTimer+0x46>
     b4a:	8b c0       	rjmp	.+278    	; 0xc62 <TMR_vStartTimer+0x15c>
     b4c:	89 85       	ldd	r24, Y+9	; 0x09
     b4e:	9a 85       	ldd	r25, Y+10	; 0x0a
     b50:	99 23       	and	r25, r25
     b52:	0c f4       	brge	.+2      	; 0xb56 <TMR_vStartTimer+0x50>
     b54:	81 c1       	rjmp	.+770    	; 0xe58 <TMR_vStartTimer+0x352>
     b56:	07 c0       	rjmp	.+14     	; 0xb66 <TMR_vStartTimer+0x60>
     b58:	29 85       	ldd	r18, Y+9	; 0x09
     b5a:	3a 85       	ldd	r19, Y+10	; 0x0a
     b5c:	27 30       	cpi	r18, 0x07	; 7
     b5e:	31 05       	cpc	r19, r1
     b60:	0c f0       	brlt	.+2      	; 0xb64 <TMR_vStartTimer+0x5e>
     b62:	7a c1       	rjmp	.+756    	; 0xe58 <TMR_vStartTimer+0x352>
     b64:	fc c0       	rjmp	.+504    	; 0xd5e <TMR_vStartTimer+0x258>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			switch(TMR->TMR_Prescale){
     b66:	e9 81       	ldd	r30, Y+1	; 0x01
     b68:	fa 81       	ldd	r31, Y+2	; 0x02
     b6a:	81 81       	ldd	r24, Z+1	; 0x01
     b6c:	28 2f       	mov	r18, r24
     b6e:	30 e0       	ldi	r19, 0x00	; 0
     b70:	38 87       	std	Y+8, r19	; 0x08
     b72:	2f 83       	std	Y+7, r18	; 0x07
     b74:	8f 81       	ldd	r24, Y+7	; 0x07
     b76:	98 85       	ldd	r25, Y+8	; 0x08
     b78:	83 30       	cpi	r24, 0x03	; 3
     b7a:	91 05       	cpc	r25, r1
     b7c:	09 f4       	brne	.+2      	; 0xb80 <TMR_vStartTimer+0x7a>
     b7e:	45 c0       	rjmp	.+138    	; 0xc0a <TMR_vStartTimer+0x104>
     b80:	2f 81       	ldd	r18, Y+7	; 0x07
     b82:	38 85       	ldd	r19, Y+8	; 0x08
     b84:	24 30       	cpi	r18, 0x04	; 4
     b86:	31 05       	cpc	r19, r1
     b88:	7c f4       	brge	.+30     	; 0xba8 <TMR_vStartTimer+0xa2>
     b8a:	8f 81       	ldd	r24, Y+7	; 0x07
     b8c:	98 85       	ldd	r25, Y+8	; 0x08
     b8e:	81 30       	cpi	r24, 0x01	; 1
     b90:	91 05       	cpc	r25, r1
     b92:	49 f1       	breq	.+82     	; 0xbe6 <TMR_vStartTimer+0xe0>
     b94:	2f 81       	ldd	r18, Y+7	; 0x07
     b96:	38 85       	ldd	r19, Y+8	; 0x08
     b98:	22 30       	cpi	r18, 0x02	; 2
     b9a:	31 05       	cpc	r19, r1
     b9c:	6c f5       	brge	.+90     	; 0xbf8 <TMR_vStartTimer+0xf2>
     b9e:	8f 81       	ldd	r24, Y+7	; 0x07
     ba0:	98 85       	ldd	r25, Y+8	; 0x08
     ba2:	00 97       	sbiw	r24, 0x00	; 0
     ba4:	c1 f0       	breq	.+48     	; 0xbd6 <TMR_vStartTimer+0xd0>
     ba6:	58 c1       	rjmp	.+688    	; 0xe58 <TMR_vStartTimer+0x352>
     ba8:	2f 81       	ldd	r18, Y+7	; 0x07
     baa:	38 85       	ldd	r19, Y+8	; 0x08
     bac:	25 30       	cpi	r18, 0x05	; 5
     bae:	31 05       	cpc	r19, r1
     bb0:	09 f4       	brne	.+2      	; 0xbb4 <TMR_vStartTimer+0xae>
     bb2:	3d c0       	rjmp	.+122    	; 0xc2e <TMR_vStartTimer+0x128>
     bb4:	8f 81       	ldd	r24, Y+7	; 0x07
     bb6:	98 85       	ldd	r25, Y+8	; 0x08
     bb8:	85 30       	cpi	r24, 0x05	; 5
     bba:	91 05       	cpc	r25, r1
     bbc:	7c f1       	brlt	.+94     	; 0xc1c <TMR_vStartTimer+0x116>
     bbe:	2f 81       	ldd	r18, Y+7	; 0x07
     bc0:	38 85       	ldd	r19, Y+8	; 0x08
     bc2:	26 30       	cpi	r18, 0x06	; 6
     bc4:	31 05       	cpc	r19, r1
     bc6:	e1 f1       	breq	.+120    	; 0xc40 <TMR_vStartTimer+0x13a>
     bc8:	8f 81       	ldd	r24, Y+7	; 0x07
     bca:	98 85       	ldd	r25, Y+8	; 0x08
     bcc:	87 30       	cpi	r24, 0x07	; 7
     bce:	91 05       	cpc	r25, r1
     bd0:	09 f4       	brne	.+2      	; 0xbd4 <TMR_vStartTimer+0xce>
     bd2:	3f c0       	rjmp	.+126    	; 0xc52 <TMR_vStartTimer+0x14c>
     bd4:	41 c1       	rjmp	.+642    	; 0xe58 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR0_REG = (TCCR0_REG&0xF8);
     bd6:	a3 e5       	ldi	r26, 0x53	; 83
     bd8:	b0 e0       	ldi	r27, 0x00	; 0
     bda:	e3 e5       	ldi	r30, 0x53	; 83
     bdc:	f0 e0       	ldi	r31, 0x00	; 0
     bde:	80 81       	ld	r24, Z
     be0:	88 7f       	andi	r24, 0xF8	; 248
     be2:	8c 93       	st	X, r24
     be4:	39 c1       	rjmp	.+626    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR0_REG = (TCCR0_REG&0xF8) | 1;
     be6:	a3 e5       	ldi	r26, 0x53	; 83
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e3 e5       	ldi	r30, 0x53	; 83
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	88 7f       	andi	r24, 0xF8	; 248
     bf2:	81 60       	ori	r24, 0x01	; 1
     bf4:	8c 93       	st	X, r24
     bf6:	30 c1       	rjmp	.+608    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR0_REG = (TCCR0_REG&0xF8) | 2;
     bf8:	a3 e5       	ldi	r26, 0x53	; 83
     bfa:	b0 e0       	ldi	r27, 0x00	; 0
     bfc:	e3 e5       	ldi	r30, 0x53	; 83
     bfe:	f0 e0       	ldi	r31, 0x00	; 0
     c00:	80 81       	ld	r24, Z
     c02:	88 7f       	andi	r24, 0xF8	; 248
     c04:	82 60       	ori	r24, 0x02	; 2
     c06:	8c 93       	st	X, r24
     c08:	27 c1       	rjmp	.+590    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR0_REG = (TCCR0_REG&0xF8) | 3;
     c0a:	a3 e5       	ldi	r26, 0x53	; 83
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e3 e5       	ldi	r30, 0x53	; 83
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	88 7f       	andi	r24, 0xF8	; 248
     c16:	83 60       	ori	r24, 0x03	; 3
     c18:	8c 93       	st	X, r24
     c1a:	1e c1       	rjmp	.+572    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR0_REG = (TCCR0_REG&0xF8) | 4;
     c1c:	a3 e5       	ldi	r26, 0x53	; 83
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	e3 e5       	ldi	r30, 0x53	; 83
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	88 7f       	andi	r24, 0xF8	; 248
     c28:	84 60       	ori	r24, 0x04	; 4
     c2a:	8c 93       	st	X, r24
     c2c:	15 c1       	rjmp	.+554    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR0_REG = (TCCR0_REG&0xF8) | 5;
     c2e:	a3 e5       	ldi	r26, 0x53	; 83
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e3 e5       	ldi	r30, 0x53	; 83
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	88 7f       	andi	r24, 0xF8	; 248
     c3a:	85 60       	ori	r24, 0x05	; 5
     c3c:	8c 93       	st	X, r24
     c3e:	0c c1       	rjmp	.+536    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_FALLING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 6;
     c40:	a3 e5       	ldi	r26, 0x53	; 83
     c42:	b0 e0       	ldi	r27, 0x00	; 0
     c44:	e3 e5       	ldi	r30, 0x53	; 83
     c46:	f0 e0       	ldi	r31, 0x00	; 0
     c48:	80 81       	ld	r24, Z
     c4a:	88 7f       	andi	r24, 0xF8	; 248
     c4c:	86 60       	ori	r24, 0x06	; 6
     c4e:	8c 93       	st	X, r24
     c50:	03 c1       	rjmp	.+518    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_RISING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 7;
     c52:	a3 e5       	ldi	r26, 0x53	; 83
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	e3 e5       	ldi	r30, 0x53	; 83
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	87 60       	ori	r24, 0x07	; 7
     c5e:	8c 93       	st	X, r24
     c60:	fb c0       	rjmp	.+502    	; 0xe58 <TMR_vStartTimer+0x352>
			}
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			switch(TMR->TMR_Prescale){
     c62:	e9 81       	ldd	r30, Y+1	; 0x01
     c64:	fa 81       	ldd	r31, Y+2	; 0x02
     c66:	81 81       	ldd	r24, Z+1	; 0x01
     c68:	28 2f       	mov	r18, r24
     c6a:	30 e0       	ldi	r19, 0x00	; 0
     c6c:	3e 83       	std	Y+6, r19	; 0x06
     c6e:	2d 83       	std	Y+5, r18	; 0x05
     c70:	8d 81       	ldd	r24, Y+5	; 0x05
     c72:	9e 81       	ldd	r25, Y+6	; 0x06
     c74:	83 30       	cpi	r24, 0x03	; 3
     c76:	91 05       	cpc	r25, r1
     c78:	09 f4       	brne	.+2      	; 0xc7c <TMR_vStartTimer+0x176>
     c7a:	45 c0       	rjmp	.+138    	; 0xd06 <TMR_vStartTimer+0x200>
     c7c:	2d 81       	ldd	r18, Y+5	; 0x05
     c7e:	3e 81       	ldd	r19, Y+6	; 0x06
     c80:	24 30       	cpi	r18, 0x04	; 4
     c82:	31 05       	cpc	r19, r1
     c84:	7c f4       	brge	.+30     	; 0xca4 <TMR_vStartTimer+0x19e>
     c86:	8d 81       	ldd	r24, Y+5	; 0x05
     c88:	9e 81       	ldd	r25, Y+6	; 0x06
     c8a:	81 30       	cpi	r24, 0x01	; 1
     c8c:	91 05       	cpc	r25, r1
     c8e:	49 f1       	breq	.+82     	; 0xce2 <TMR_vStartTimer+0x1dc>
     c90:	2d 81       	ldd	r18, Y+5	; 0x05
     c92:	3e 81       	ldd	r19, Y+6	; 0x06
     c94:	22 30       	cpi	r18, 0x02	; 2
     c96:	31 05       	cpc	r19, r1
     c98:	6c f5       	brge	.+90     	; 0xcf4 <TMR_vStartTimer+0x1ee>
     c9a:	8d 81       	ldd	r24, Y+5	; 0x05
     c9c:	9e 81       	ldd	r25, Y+6	; 0x06
     c9e:	00 97       	sbiw	r24, 0x00	; 0
     ca0:	c1 f0       	breq	.+48     	; 0xcd2 <TMR_vStartTimer+0x1cc>
     ca2:	da c0       	rjmp	.+436    	; 0xe58 <TMR_vStartTimer+0x352>
     ca4:	2d 81       	ldd	r18, Y+5	; 0x05
     ca6:	3e 81       	ldd	r19, Y+6	; 0x06
     ca8:	25 30       	cpi	r18, 0x05	; 5
     caa:	31 05       	cpc	r19, r1
     cac:	09 f4       	brne	.+2      	; 0xcb0 <TMR_vStartTimer+0x1aa>
     cae:	3d c0       	rjmp	.+122    	; 0xd2a <TMR_vStartTimer+0x224>
     cb0:	8d 81       	ldd	r24, Y+5	; 0x05
     cb2:	9e 81       	ldd	r25, Y+6	; 0x06
     cb4:	85 30       	cpi	r24, 0x05	; 5
     cb6:	91 05       	cpc	r25, r1
     cb8:	7c f1       	brlt	.+94     	; 0xd18 <TMR_vStartTimer+0x212>
     cba:	2d 81       	ldd	r18, Y+5	; 0x05
     cbc:	3e 81       	ldd	r19, Y+6	; 0x06
     cbe:	26 30       	cpi	r18, 0x06	; 6
     cc0:	31 05       	cpc	r19, r1
     cc2:	e1 f1       	breq	.+120    	; 0xd3c <TMR_vStartTimer+0x236>
     cc4:	8d 81       	ldd	r24, Y+5	; 0x05
     cc6:	9e 81       	ldd	r25, Y+6	; 0x06
     cc8:	87 30       	cpi	r24, 0x07	; 7
     cca:	91 05       	cpc	r25, r1
     ccc:	09 f4       	brne	.+2      	; 0xcd0 <TMR_vStartTimer+0x1ca>
     cce:	3f c0       	rjmp	.+126    	; 0xd4e <TMR_vStartTimer+0x248>
     cd0:	c3 c0       	rjmp	.+390    	; 0xe58 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR1B_REG = (TCCR1B_REG&0xF8);
     cd2:	ae e4       	ldi	r26, 0x4E	; 78
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	ee e4       	ldi	r30, 0x4E	; 78
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	88 7f       	andi	r24, 0xF8	; 248
     cde:	8c 93       	st	X, r24
     ce0:	bb c0       	rjmp	.+374    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
     ce2:	ae e4       	ldi	r26, 0x4E	; 78
     ce4:	b0 e0       	ldi	r27, 0x00	; 0
     ce6:	ee e4       	ldi	r30, 0x4E	; 78
     ce8:	f0 e0       	ldi	r31, 0x00	; 0
     cea:	80 81       	ld	r24, Z
     cec:	88 7f       	andi	r24, 0xF8	; 248
     cee:	81 60       	ori	r24, 0x01	; 1
     cf0:	8c 93       	st	X, r24
     cf2:	b2 c0       	rjmp	.+356    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 2;
     cf4:	ae e4       	ldi	r26, 0x4E	; 78
     cf6:	b0 e0       	ldi	r27, 0x00	; 0
     cf8:	ee e4       	ldi	r30, 0x4E	; 78
     cfa:	f0 e0       	ldi	r31, 0x00	; 0
     cfc:	80 81       	ld	r24, Z
     cfe:	88 7f       	andi	r24, 0xF8	; 248
     d00:	82 60       	ori	r24, 0x02	; 2
     d02:	8c 93       	st	X, r24
     d04:	a9 c0       	rjmp	.+338    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 3;
     d06:	ae e4       	ldi	r26, 0x4E	; 78
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	ee e4       	ldi	r30, 0x4E	; 78
     d0c:	f0 e0       	ldi	r31, 0x00	; 0
     d0e:	80 81       	ld	r24, Z
     d10:	88 7f       	andi	r24, 0xF8	; 248
     d12:	83 60       	ori	r24, 0x03	; 3
     d14:	8c 93       	st	X, r24
     d16:	a0 c0       	rjmp	.+320    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 4;
     d18:	ae e4       	ldi	r26, 0x4E	; 78
     d1a:	b0 e0       	ldi	r27, 0x00	; 0
     d1c:	ee e4       	ldi	r30, 0x4E	; 78
     d1e:	f0 e0       	ldi	r31, 0x00	; 0
     d20:	80 81       	ld	r24, Z
     d22:	88 7f       	andi	r24, 0xF8	; 248
     d24:	84 60       	ori	r24, 0x04	; 4
     d26:	8c 93       	st	X, r24
     d28:	97 c0       	rjmp	.+302    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 5;
     d2a:	ae e4       	ldi	r26, 0x4E	; 78
     d2c:	b0 e0       	ldi	r27, 0x00	; 0
     d2e:	ee e4       	ldi	r30, 0x4E	; 78
     d30:	f0 e0       	ldi	r31, 0x00	; 0
     d32:	80 81       	ld	r24, Z
     d34:	88 7f       	andi	r24, 0xF8	; 248
     d36:	85 60       	ori	r24, 0x05	; 5
     d38:	8c 93       	st	X, r24
     d3a:	8e c0       	rjmp	.+284    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_FALLING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 6;
     d3c:	ae e4       	ldi	r26, 0x4E	; 78
     d3e:	b0 e0       	ldi	r27, 0x00	; 0
     d40:	ee e4       	ldi	r30, 0x4E	; 78
     d42:	f0 e0       	ldi	r31, 0x00	; 0
     d44:	80 81       	ld	r24, Z
     d46:	88 7f       	andi	r24, 0xF8	; 248
     d48:	86 60       	ori	r24, 0x06	; 6
     d4a:	8c 93       	st	X, r24
     d4c:	85 c0       	rjmp	.+266    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_RISING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 7;
     d4e:	ae e4       	ldi	r26, 0x4E	; 78
     d50:	b0 e0       	ldi	r27, 0x00	; 0
     d52:	ee e4       	ldi	r30, 0x4E	; 78
     d54:	f0 e0       	ldi	r31, 0x00	; 0
     d56:	80 81       	ld	r24, Z
     d58:	87 60       	ori	r24, 0x07	; 7
     d5a:	8c 93       	st	X, r24
     d5c:	7d c0       	rjmp	.+250    	; 0xe58 <TMR_vStartTimer+0x352>
			default: /* Do Nothing */ break;
			}
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			switch(TMR->TMR_Prescale){
     d5e:	e9 81       	ldd	r30, Y+1	; 0x01
     d60:	fa 81       	ldd	r31, Y+2	; 0x02
     d62:	81 81       	ldd	r24, Z+1	; 0x01
     d64:	28 2f       	mov	r18, r24
     d66:	30 e0       	ldi	r19, 0x00	; 0
     d68:	3c 83       	std	Y+4, r19	; 0x04
     d6a:	2b 83       	std	Y+3, r18	; 0x03
     d6c:	8b 81       	ldd	r24, Y+3	; 0x03
     d6e:	9c 81       	ldd	r25, Y+4	; 0x04
     d70:	83 30       	cpi	r24, 0x03	; 3
     d72:	91 05       	cpc	r25, r1
     d74:	09 f4       	brne	.+2      	; 0xd78 <TMR_vStartTimer+0x272>
     d76:	4e c0       	rjmp	.+156    	; 0xe14 <TMR_vStartTimer+0x30e>
     d78:	2b 81       	ldd	r18, Y+3	; 0x03
     d7a:	3c 81       	ldd	r19, Y+4	; 0x04
     d7c:	24 30       	cpi	r18, 0x04	; 4
     d7e:	31 05       	cpc	r19, r1
     d80:	7c f4       	brge	.+30     	; 0xda0 <TMR_vStartTimer+0x29a>
     d82:	8b 81       	ldd	r24, Y+3	; 0x03
     d84:	9c 81       	ldd	r25, Y+4	; 0x04
     d86:	81 30       	cpi	r24, 0x01	; 1
     d88:	91 05       	cpc	r25, r1
     d8a:	49 f1       	breq	.+82     	; 0xdde <TMR_vStartTimer+0x2d8>
     d8c:	2b 81       	ldd	r18, Y+3	; 0x03
     d8e:	3c 81       	ldd	r19, Y+4	; 0x04
     d90:	22 30       	cpi	r18, 0x02	; 2
     d92:	31 05       	cpc	r19, r1
     d94:	6c f5       	brge	.+90     	; 0xdf0 <TMR_vStartTimer+0x2ea>
     d96:	8b 81       	ldd	r24, Y+3	; 0x03
     d98:	9c 81       	ldd	r25, Y+4	; 0x04
     d9a:	00 97       	sbiw	r24, 0x00	; 0
     d9c:	c1 f0       	breq	.+48     	; 0xdce <TMR_vStartTimer+0x2c8>
     d9e:	5c c0       	rjmp	.+184    	; 0xe58 <TMR_vStartTimer+0x352>
     da0:	2b 81       	ldd	r18, Y+3	; 0x03
     da2:	3c 81       	ldd	r19, Y+4	; 0x04
     da4:	25 30       	cpi	r18, 0x05	; 5
     da6:	31 05       	cpc	r19, r1
     da8:	09 f4       	brne	.+2      	; 0xdac <TMR_vStartTimer+0x2a6>
     daa:	4f c0       	rjmp	.+158    	; 0xe4a <TMR_vStartTimer+0x344>
     dac:	8b 81       	ldd	r24, Y+3	; 0x03
     dae:	9c 81       	ldd	r25, Y+4	; 0x04
     db0:	85 30       	cpi	r24, 0x05	; 5
     db2:	91 05       	cpc	r25, r1
     db4:	0c f4       	brge	.+2      	; 0xdb8 <TMR_vStartTimer+0x2b2>
     db6:	40 c0       	rjmp	.+128    	; 0xe38 <TMR_vStartTimer+0x332>
     db8:	2b 81       	ldd	r18, Y+3	; 0x03
     dba:	3c 81       	ldd	r19, Y+4	; 0x04
     dbc:	28 30       	cpi	r18, 0x08	; 8
     dbe:	31 05       	cpc	r19, r1
     dc0:	01 f1       	breq	.+64     	; 0xe02 <TMR_vStartTimer+0x2fc>
     dc2:	8b 81       	ldd	r24, Y+3	; 0x03
     dc4:	9c 81       	ldd	r25, Y+4	; 0x04
     dc6:	89 30       	cpi	r24, 0x09	; 9
     dc8:	91 05       	cpc	r25, r1
     dca:	69 f1       	breq	.+90     	; 0xe26 <TMR_vStartTimer+0x320>
     dcc:	45 c0       	rjmp	.+138    	; 0xe58 <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR2_REG = (TCCR2_REG&0xF8);
     dce:	a5 e4       	ldi	r26, 0x45	; 69
     dd0:	b0 e0       	ldi	r27, 0x00	; 0
     dd2:	e5 e4       	ldi	r30, 0x45	; 69
     dd4:	f0 e0       	ldi	r31, 0x00	; 0
     dd6:	80 81       	ld	r24, Z
     dd8:	88 7f       	andi	r24, 0xF8	; 248
     dda:	8c 93       	st	X, r24
     ddc:	3d c0       	rjmp	.+122    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR2_REG = (TCCR2_REG&0xF8) | 1;
     dde:	a5 e4       	ldi	r26, 0x45	; 69
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	e5 e4       	ldi	r30, 0x45	; 69
     de4:	f0 e0       	ldi	r31, 0x00	; 0
     de6:	80 81       	ld	r24, Z
     de8:	88 7f       	andi	r24, 0xF8	; 248
     dea:	81 60       	ori	r24, 0x01	; 1
     dec:	8c 93       	st	X, r24
     dee:	34 c0       	rjmp	.+104    	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR2_REG = (TCCR2_REG&0xF8) | 2;
     df0:	a5 e4       	ldi	r26, 0x45	; 69
     df2:	b0 e0       	ldi	r27, 0x00	; 0
     df4:	e5 e4       	ldi	r30, 0x45	; 69
     df6:	f0 e0       	ldi	r31, 0x00	; 0
     df8:	80 81       	ld	r24, Z
     dfa:	88 7f       	andi	r24, 0xF8	; 248
     dfc:	82 60       	ori	r24, 0x02	; 2
     dfe:	8c 93       	st	X, r24
     e00:	2b c0       	rjmp	.+86     	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_32:
				TCCR2_REG = (TCCR2_REG&0xF8) | 3;
     e02:	a5 e4       	ldi	r26, 0x45	; 69
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e5 e4       	ldi	r30, 0x45	; 69
     e08:	f0 e0       	ldi	r31, 0x00	; 0
     e0a:	80 81       	ld	r24, Z
     e0c:	88 7f       	andi	r24, 0xF8	; 248
     e0e:	83 60       	ori	r24, 0x03	; 3
     e10:	8c 93       	st	X, r24
     e12:	22 c0       	rjmp	.+68     	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR2_REG = (TCCR2_REG&0xF8) | 4;
     e14:	a5 e4       	ldi	r26, 0x45	; 69
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e5 e4       	ldi	r30, 0x45	; 69
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	88 7f       	andi	r24, 0xF8	; 248
     e20:	84 60       	ori	r24, 0x04	; 4
     e22:	8c 93       	st	X, r24
     e24:	19 c0       	rjmp	.+50     	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_128:
				TCCR2_REG = (TCCR2_REG&0xF8) | 5;
     e26:	a5 e4       	ldi	r26, 0x45	; 69
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e5 e4       	ldi	r30, 0x45	; 69
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	88 7f       	andi	r24, 0xF8	; 248
     e32:	85 60       	ori	r24, 0x05	; 5
     e34:	8c 93       	st	X, r24
     e36:	10 c0       	rjmp	.+32     	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR2_REG = (TCCR2_REG&0xF8) | 6;
     e38:	a5 e4       	ldi	r26, 0x45	; 69
     e3a:	b0 e0       	ldi	r27, 0x00	; 0
     e3c:	e5 e4       	ldi	r30, 0x45	; 69
     e3e:	f0 e0       	ldi	r31, 0x00	; 0
     e40:	80 81       	ld	r24, Z
     e42:	88 7f       	andi	r24, 0xF8	; 248
     e44:	86 60       	ori	r24, 0x06	; 6
     e46:	8c 93       	st	X, r24
     e48:	07 c0       	rjmp	.+14     	; 0xe58 <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR2_REG = (TCCR2_REG&0xF8) | 7;
     e4a:	a5 e4       	ldi	r26, 0x45	; 69
     e4c:	b0 e0       	ldi	r27, 0x00	; 0
     e4e:	e5 e4       	ldi	r30, 0x45	; 69
     e50:	f0 e0       	ldi	r31, 0x00	; 0
     e52:	80 81       	ld	r24, Z
     e54:	87 60       	ori	r24, 0x07	; 7
     e56:	8c 93       	st	X, r24
			}
			break;
		default: /* Do Nothing */ break;
		}
	}
}
     e58:	2a 96       	adiw	r28, 0x0a	; 10
     e5a:	0f b6       	in	r0, 0x3f	; 63
     e5c:	f8 94       	cli
     e5e:	de bf       	out	0x3e, r29	; 62
     e60:	0f be       	out	0x3f, r0	; 63
     e62:	cd bf       	out	0x3d, r28	; 61
     e64:	cf 91       	pop	r28
     e66:	df 91       	pop	r29
     e68:	08 95       	ret

00000e6a <TMR_vStop>:

void TMR_vStop(const TMR_cfg_t *TMR){
     e6a:	df 93       	push	r29
     e6c:	cf 93       	push	r28
     e6e:	00 d0       	rcall	.+0      	; 0xe70 <TMR_vStop+0x6>
     e70:	00 d0       	rcall	.+0      	; 0xe72 <TMR_vStop+0x8>
     e72:	cd b7       	in	r28, 0x3d	; 61
     e74:	de b7       	in	r29, 0x3e	; 62
     e76:	9a 83       	std	Y+2, r25	; 0x02
     e78:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
     e7a:	89 81       	ldd	r24, Y+1	; 0x01
     e7c:	9a 81       	ldd	r25, Y+2	; 0x02
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	99 f1       	breq	.+102    	; 0xee8 <TMR_vStop+0x7e>
		switch(TMR->TMR_TimerChannel){
     e82:	e9 81       	ldd	r30, Y+1	; 0x01
     e84:	fa 81       	ldd	r31, Y+2	; 0x02
     e86:	80 81       	ld	r24, Z
     e88:	28 2f       	mov	r18, r24
     e8a:	30 e0       	ldi	r19, 0x00	; 0
     e8c:	3c 83       	std	Y+4, r19	; 0x04
     e8e:	2b 83       	std	Y+3, r18	; 0x03
     e90:	8b 81       	ldd	r24, Y+3	; 0x03
     e92:	9c 81       	ldd	r25, Y+4	; 0x04
     e94:	85 30       	cpi	r24, 0x05	; 5
     e96:	91 05       	cpc	r25, r1
     e98:	54 f4       	brge	.+20     	; 0xeae <TMR_vStop+0x44>
     e9a:	2b 81       	ldd	r18, Y+3	; 0x03
     e9c:	3c 81       	ldd	r19, Y+4	; 0x04
     e9e:	22 30       	cpi	r18, 0x02	; 2
     ea0:	31 05       	cpc	r19, r1
     ea2:	9c f4       	brge	.+38     	; 0xeca <TMR_vStop+0x60>
     ea4:	8b 81       	ldd	r24, Y+3	; 0x03
     ea6:	9c 81       	ldd	r25, Y+4	; 0x04
     ea8:	99 23       	and	r25, r25
     eaa:	f4 f0       	brlt	.+60     	; 0xee8 <TMR_vStop+0x7e>
     eac:	06 c0       	rjmp	.+12     	; 0xeba <TMR_vStop+0x50>
     eae:	2b 81       	ldd	r18, Y+3	; 0x03
     eb0:	3c 81       	ldd	r19, Y+4	; 0x04
     eb2:	27 30       	cpi	r18, 0x07	; 7
     eb4:	31 05       	cpc	r19, r1
     eb6:	c4 f4       	brge	.+48     	; 0xee8 <TMR_vStop+0x7e>
     eb8:	10 c0       	rjmp	.+32     	; 0xeda <TMR_vStop+0x70>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			TCCR0_REG &= 0xF8;
     eba:	a3 e5       	ldi	r26, 0x53	; 83
     ebc:	b0 e0       	ldi	r27, 0x00	; 0
     ebe:	e3 e5       	ldi	r30, 0x53	; 83
     ec0:	f0 e0       	ldi	r31, 0x00	; 0
     ec2:	80 81       	ld	r24, Z
     ec4:	88 7f       	andi	r24, 0xF8	; 248
     ec6:	8c 93       	st	X, r24
     ec8:	0f c0       	rjmp	.+30     	; 0xee8 <TMR_vStop+0x7e>
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			TCCR1B_REG &= 0xF8;
     eca:	ae e4       	ldi	r26, 0x4E	; 78
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	ee e4       	ldi	r30, 0x4E	; 78
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	80 81       	ld	r24, Z
     ed4:	88 7f       	andi	r24, 0xF8	; 248
     ed6:	8c 93       	st	X, r24
     ed8:	07 c0       	rjmp	.+14     	; 0xee8 <TMR_vStop+0x7e>
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			TCCR2_REG &= 0xF8;
     eda:	a5 e4       	ldi	r26, 0x45	; 69
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e5 e4       	ldi	r30, 0x45	; 69
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	88 7f       	andi	r24, 0xF8	; 248
     ee6:	8c 93       	st	X, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	0f 90       	pop	r0
     eee:	0f 90       	pop	r0
     ef0:	cf 91       	pop	r28
     ef2:	df 91       	pop	r29
     ef4:	08 95       	ret

00000ef6 <TMR_vSetICRValue>:

void TMR_vSetICRValue(const TMR_cfg_t *TMR, u16 Copy_u16ICRValue){
     ef6:	df 93       	push	r29
     ef8:	cf 93       	push	r28
     efa:	00 d0       	rcall	.+0      	; 0xefc <TMR_vSetICRValue+0x6>
     efc:	00 d0       	rcall	.+0      	; 0xefe <TMR_vSetICRValue+0x8>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	7c 83       	std	Y+4, r23	; 0x04
     f08:	6b 83       	std	Y+3, r22	; 0x03
	if(TMR != NULL){
     f0a:	89 81       	ldd	r24, Y+1	; 0x01
     f0c:	9a 81       	ldd	r25, Y+2	; 0x02
     f0e:	00 97       	sbiw	r24, 0x00	; 0
     f10:	79 f0       	breq	.+30     	; 0xf30 <TMR_vSetICRValue+0x3a>
		switch(TMR->TMR_TimerChannel){
     f12:	e9 81       	ldd	r30, Y+1	; 0x01
     f14:	fa 81       	ldd	r31, Y+2	; 0x02
     f16:	80 81       	ld	r24, Z
     f18:	88 2f       	mov	r24, r24
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 97       	sbiw	r24, 0x02	; 2
     f1e:	83 30       	cpi	r24, 0x03	; 3
     f20:	91 05       	cpc	r25, r1
     f22:	30 f4       	brcc	.+12     	; 0xf30 <TMR_vSetICRValue+0x3a>

		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			ICR1_REG = Copy_u16ICRValue;
     f24:	e6 e4       	ldi	r30, 0x46	; 70
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	8b 81       	ldd	r24, Y+3	; 0x03
     f2a:	9c 81       	ldd	r25, Y+4	; 0x04
     f2c:	91 83       	std	Z+1, r25	; 0x01
     f2e:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
     f30:	0f 90       	pop	r0
     f32:	0f 90       	pop	r0
     f34:	0f 90       	pop	r0
     f36:	0f 90       	pop	r0
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	08 95       	ret

00000f3e <TMR_vSetOCRValue>:

void TMR_vSetOCRValue(const TMR_cfg_t *TMR, u16 Copy_u16OCRValue){
     f3e:	df 93       	push	r29
     f40:	cf 93       	push	r28
     f42:	00 d0       	rcall	.+0      	; 0xf44 <TMR_vSetOCRValue+0x6>
     f44:	00 d0       	rcall	.+0      	; 0xf46 <TMR_vSetOCRValue+0x8>
     f46:	00 d0       	rcall	.+0      	; 0xf48 <TMR_vSetOCRValue+0xa>
     f48:	cd b7       	in	r28, 0x3d	; 61
     f4a:	de b7       	in	r29, 0x3e	; 62
     f4c:	9a 83       	std	Y+2, r25	; 0x02
     f4e:	89 83       	std	Y+1, r24	; 0x01
     f50:	7c 83       	std	Y+4, r23	; 0x04
     f52:	6b 83       	std	Y+3, r22	; 0x03
	if(TMR != NULL){
     f54:	89 81       	ldd	r24, Y+1	; 0x01
     f56:	9a 81       	ldd	r25, Y+2	; 0x02
     f58:	00 97       	sbiw	r24, 0x00	; 0
     f5a:	61 f1       	breq	.+88     	; 0xfb4 <TMR_vSetOCRValue+0x76>
		switch(TMR->TMR_TimerChannel){
     f5c:	e9 81       	ldd	r30, Y+1	; 0x01
     f5e:	fa 81       	ldd	r31, Y+2	; 0x02
     f60:	80 81       	ld	r24, Z
     f62:	28 2f       	mov	r18, r24
     f64:	30 e0       	ldi	r19, 0x00	; 0
     f66:	3e 83       	std	Y+6, r19	; 0x06
     f68:	2d 83       	std	Y+5, r18	; 0x05
     f6a:	8d 81       	ldd	r24, Y+5	; 0x05
     f6c:	9e 81       	ldd	r25, Y+6	; 0x06
     f6e:	85 30       	cpi	r24, 0x05	; 5
     f70:	91 05       	cpc	r25, r1
     f72:	54 f4       	brge	.+20     	; 0xf88 <TMR_vSetOCRValue+0x4a>
     f74:	2d 81       	ldd	r18, Y+5	; 0x05
     f76:	3e 81       	ldd	r19, Y+6	; 0x06
     f78:	22 30       	cpi	r18, 0x02	; 2
     f7a:	31 05       	cpc	r19, r1
     f7c:	84 f4       	brge	.+32     	; 0xf9e <TMR_vSetOCRValue+0x60>
     f7e:	8d 81       	ldd	r24, Y+5	; 0x05
     f80:	9e 81       	ldd	r25, Y+6	; 0x06
     f82:	99 23       	and	r25, r25
     f84:	bc f0       	brlt	.+46     	; 0xfb4 <TMR_vSetOCRValue+0x76>
     f86:	06 c0       	rjmp	.+12     	; 0xf94 <TMR_vSetOCRValue+0x56>
     f88:	2d 81       	ldd	r18, Y+5	; 0x05
     f8a:	3e 81       	ldd	r19, Y+6	; 0x06
     f8c:	27 30       	cpi	r18, 0x07	; 7
     f8e:	31 05       	cpc	r19, r1
     f90:	8c f4       	brge	.+34     	; 0xfb4 <TMR_vSetOCRValue+0x76>
     f92:	0c c0       	rjmp	.+24     	; 0xfac <TMR_vSetOCRValue+0x6e>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			OCR0_REG = (u8)Copy_u16OCRValue;
     f94:	ec e5       	ldi	r30, 0x5C	; 92
     f96:	f0 e0       	ldi	r31, 0x00	; 0
     f98:	8b 81       	ldd	r24, Y+3	; 0x03
     f9a:	80 83       	st	Z, r24
     f9c:	0b c0       	rjmp	.+22     	; 0xfb4 <TMR_vSetOCRValue+0x76>
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			OCR1A_REG = Copy_u16OCRValue;
     f9e:	ea e4       	ldi	r30, 0x4A	; 74
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	8b 81       	ldd	r24, Y+3	; 0x03
     fa4:	9c 81       	ldd	r25, Y+4	; 0x04
     fa6:	91 83       	std	Z+1, r25	; 0x01
     fa8:	80 83       	st	Z, r24
     faa:	04 c0       	rjmp	.+8      	; 0xfb4 <TMR_vSetOCRValue+0x76>
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			OCR2_REG = (u8)Copy_u16OCRValue;
     fac:	e3 e4       	ldi	r30, 0x43	; 67
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	8b 81       	ldd	r24, Y+3	; 0x03
     fb2:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
     fb4:	26 96       	adiw	r28, 0x06	; 6
     fb6:	0f b6       	in	r0, 0x3f	; 63
     fb8:	f8 94       	cli
     fba:	de bf       	out	0x3e, r29	; 62
     fbc:	0f be       	out	0x3f, r0	; 63
     fbe:	cd bf       	out	0x3d, r28	; 61
     fc0:	cf 91       	pop	r28
     fc2:	df 91       	pop	r29
     fc4:	08 95       	ret

00000fc6 <PWM_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "PWM_interface.h"

void PWM_vInit(const PWM_cfg_t *PWM){
     fc6:	df 93       	push	r29
     fc8:	cf 93       	push	r28
     fca:	00 d0       	rcall	.+0      	; 0xfcc <PWM_vInit+0x6>
     fcc:	00 d0       	rcall	.+0      	; 0xfce <PWM_vInit+0x8>
     fce:	cd b7       	in	r28, 0x3d	; 61
     fd0:	de b7       	in	r29, 0x3e	; 62
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
     fd6:	89 81       	ldd	r24, Y+1	; 0x01
     fd8:	9a 81       	ldd	r25, Y+2	; 0x02
     fda:	00 97       	sbiw	r24, 0x00	; 0
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <PWM_vInit+0x1a>
     fde:	2d c4       	rjmp	.+2138   	; 0x183a <PWM_vInit+0x874>
		/* Set PWM Mode */
		switch(PWM->PWM_TimerChannel){
     fe0:	e9 81       	ldd	r30, Y+1	; 0x01
     fe2:	fa 81       	ldd	r31, Y+2	; 0x02
     fe4:	80 81       	ld	r24, Z
     fe6:	28 2f       	mov	r18, r24
     fe8:	30 e0       	ldi	r19, 0x00	; 0
     fea:	3c 83       	std	Y+4, r19	; 0x04
     fec:	2b 83       	std	Y+3, r18	; 0x03
     fee:	8b 81       	ldd	r24, Y+3	; 0x03
     ff0:	9c 81       	ldd	r25, Y+4	; 0x04
     ff2:	87 30       	cpi	r24, 0x07	; 7
     ff4:	91 05       	cpc	r25, r1
     ff6:	09 f4       	brne	.+2      	; 0xffa <PWM_vInit+0x34>
     ff8:	04 c2       	rjmp	.+1032   	; 0x1402 <PWM_vInit+0x43c>
     ffa:	2b 81       	ldd	r18, Y+3	; 0x03
     ffc:	3c 81       	ldd	r19, Y+4	; 0x04
     ffe:	28 30       	cpi	r18, 0x08	; 8
    1000:	31 05       	cpc	r19, r1
    1002:	54 f5       	brge	.+84     	; 0x1058 <PWM_vInit+0x92>
    1004:	8b 81       	ldd	r24, Y+3	; 0x03
    1006:	9c 81       	ldd	r25, Y+4	; 0x04
    1008:	83 30       	cpi	r24, 0x03	; 3
    100a:	91 05       	cpc	r25, r1
    100c:	09 f4       	brne	.+2      	; 0x1010 <PWM_vInit+0x4a>
    100e:	00 c1       	rjmp	.+512    	; 0x1210 <PWM_vInit+0x24a>
    1010:	2b 81       	ldd	r18, Y+3	; 0x03
    1012:	3c 81       	ldd	r19, Y+4	; 0x04
    1014:	24 30       	cpi	r18, 0x04	; 4
    1016:	31 05       	cpc	r19, r1
    1018:	94 f4       	brge	.+36     	; 0x103e <PWM_vInit+0x78>
    101a:	8b 81       	ldd	r24, Y+3	; 0x03
    101c:	9c 81       	ldd	r25, Y+4	; 0x04
    101e:	81 30       	cpi	r24, 0x01	; 1
    1020:	91 05       	cpc	r25, r1
    1022:	09 f4       	brne	.+2      	; 0x1026 <PWM_vInit+0x60>
    1024:	81 c0       	rjmp	.+258    	; 0x1128 <PWM_vInit+0x162>
    1026:	2b 81       	ldd	r18, Y+3	; 0x03
    1028:	3c 81       	ldd	r19, Y+4	; 0x04
    102a:	22 30       	cpi	r18, 0x02	; 2
    102c:	31 05       	cpc	r19, r1
    102e:	0c f0       	brlt	.+2      	; 0x1032 <PWM_vInit+0x6c>
    1030:	b1 c0       	rjmp	.+354    	; 0x1194 <PWM_vInit+0x1ce>
    1032:	8b 81       	ldd	r24, Y+3	; 0x03
    1034:	9c 81       	ldd	r25, Y+4	; 0x04
    1036:	00 97       	sbiw	r24, 0x00	; 0
    1038:	09 f4       	brne	.+2      	; 0x103c <PWM_vInit+0x76>
    103a:	3f c0       	rjmp	.+126    	; 0x10ba <PWM_vInit+0xf4>
    103c:	fe c3       	rjmp	.+2044   	; 0x183a <PWM_vInit+0x874>
    103e:	2b 81       	ldd	r18, Y+3	; 0x03
    1040:	3c 81       	ldd	r19, Y+4	; 0x04
    1042:	25 30       	cpi	r18, 0x05	; 5
    1044:	31 05       	cpc	r19, r1
    1046:	09 f4       	brne	.+2      	; 0x104a <PWM_vInit+0x84>
    1048:	5e c1       	rjmp	.+700    	; 0x1306 <PWM_vInit+0x340>
    104a:	8b 81       	ldd	r24, Y+3	; 0x03
    104c:	9c 81       	ldd	r25, Y+4	; 0x04
    104e:	86 30       	cpi	r24, 0x06	; 6
    1050:	91 05       	cpc	r25, r1
    1052:	0c f0       	brlt	.+2      	; 0x1056 <PWM_vInit+0x90>
    1054:	97 c1       	rjmp	.+814    	; 0x1384 <PWM_vInit+0x3be>
    1056:	1a c1       	rjmp	.+564    	; 0x128c <PWM_vInit+0x2c6>
    1058:	2b 81       	ldd	r18, Y+3	; 0x03
    105a:	3c 81       	ldd	r19, Y+4	; 0x04
    105c:	2b 30       	cpi	r18, 0x0B	; 11
    105e:	31 05       	cpc	r19, r1
    1060:	09 f4       	brne	.+2      	; 0x1064 <PWM_vInit+0x9e>
    1062:	c9 c2       	rjmp	.+1426   	; 0x15f6 <PWM_vInit+0x630>
    1064:	8b 81       	ldd	r24, Y+3	; 0x03
    1066:	9c 81       	ldd	r25, Y+4	; 0x04
    1068:	8c 30       	cpi	r24, 0x0C	; 12
    106a:	91 05       	cpc	r25, r1
    106c:	6c f4       	brge	.+26     	; 0x1088 <PWM_vInit+0xc2>
    106e:	2b 81       	ldd	r18, Y+3	; 0x03
    1070:	3c 81       	ldd	r19, Y+4	; 0x04
    1072:	29 30       	cpi	r18, 0x09	; 9
    1074:	31 05       	cpc	r19, r1
    1076:	09 f4       	brne	.+2      	; 0x107a <PWM_vInit+0xb4>
    1078:	40 c2       	rjmp	.+1152   	; 0x14fa <PWM_vInit+0x534>
    107a:	8b 81       	ldd	r24, Y+3	; 0x03
    107c:	9c 81       	ldd	r25, Y+4	; 0x04
    107e:	8a 30       	cpi	r24, 0x0A	; 10
    1080:	91 05       	cpc	r25, r1
    1082:	0c f0       	brlt	.+2      	; 0x1086 <PWM_vInit+0xc0>
    1084:	79 c2       	rjmp	.+1266   	; 0x1578 <PWM_vInit+0x5b2>
    1086:	fb c1       	rjmp	.+1014   	; 0x147e <PWM_vInit+0x4b8>
    1088:	2b 81       	ldd	r18, Y+3	; 0x03
    108a:	3c 81       	ldd	r19, Y+4	; 0x04
    108c:	2d 30       	cpi	r18, 0x0D	; 13
    108e:	31 05       	cpc	r19, r1
    1090:	09 f4       	brne	.+2      	; 0x1094 <PWM_vInit+0xce>
    1092:	2d c3       	rjmp	.+1626   	; 0x16ee <PWM_vInit+0x728>
    1094:	8b 81       	ldd	r24, Y+3	; 0x03
    1096:	9c 81       	ldd	r25, Y+4	; 0x04
    1098:	8d 30       	cpi	r24, 0x0D	; 13
    109a:	91 05       	cpc	r25, r1
    109c:	0c f4       	brge	.+2      	; 0x10a0 <PWM_vInit+0xda>
    109e:	e9 c2       	rjmp	.+1490   	; 0x1672 <PWM_vInit+0x6ac>
    10a0:	2b 81       	ldd	r18, Y+3	; 0x03
    10a2:	3c 81       	ldd	r19, Y+4	; 0x04
    10a4:	2e 30       	cpi	r18, 0x0E	; 14
    10a6:	31 05       	cpc	r19, r1
    10a8:	09 f4       	brne	.+2      	; 0x10ac <PWM_vInit+0xe6>
    10aa:	5e c3       	rjmp	.+1724   	; 0x1768 <PWM_vInit+0x7a2>
    10ac:	8b 81       	ldd	r24, Y+3	; 0x03
    10ae:	9c 81       	ldd	r25, Y+4	; 0x04
    10b0:	8f 30       	cpi	r24, 0x0F	; 15
    10b2:	91 05       	cpc	r25, r1
    10b4:	09 f4       	brne	.+2      	; 0x10b8 <PWM_vInit+0xf2>
    10b6:	8e c3       	rjmp	.+1820   	; 0x17d4 <PWM_vInit+0x80e>
    10b8:	c0 c3       	rjmp	.+1920   	; 0x183a <PWM_vInit+0x874>
		case TIMER0_PhaseCorrect:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x40;
    10ba:	a3 e5       	ldi	r26, 0x53	; 83
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e3 e5       	ldi	r30, 0x53	; 83
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	87 7b       	andi	r24, 0xB7	; 183
    10c6:	80 64       	ori	r24, 0x40	; 64
    10c8:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    10ca:	e9 81       	ldd	r30, Y+1	; 0x01
    10cc:	fa 81       	ldd	r31, Y+2	; 0x02
    10ce:	82 81       	ldd	r24, Z+2	; 0x02
    10d0:	81 30       	cpi	r24, 0x01	; 1
    10d2:	41 f4       	brne	.+16     	; 0x10e4 <PWM_vInit+0x11e>
				TIMSK_REG |= 0x03;
    10d4:	a9 e5       	ldi	r26, 0x59	; 89
    10d6:	b0 e0       	ldi	r27, 0x00	; 0
    10d8:	e9 e5       	ldi	r30, 0x59	; 89
    10da:	f0 e0       	ldi	r31, 0x00	; 0
    10dc:	80 81       	ld	r24, Z
    10de:	83 60       	ori	r24, 0x03	; 3
    10e0:	8c 93       	st	X, r24
    10e2:	ab c3       	rjmp	.+1878   	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    10e4:	e9 81       	ldd	r30, Y+1	; 0x01
    10e6:	fa 81       	ldd	r31, Y+2	; 0x02
    10e8:	82 81       	ldd	r24, Z+2	; 0x02
    10ea:	88 23       	and	r24, r24
    10ec:	09 f0       	breq	.+2      	; 0x10f0 <PWM_vInit+0x12a>
    10ee:	a5 c3       	rjmp	.+1866   	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    10f0:	e9 81       	ldd	r30, Y+1	; 0x01
    10f2:	fa 81       	ldd	r31, Y+2	; 0x02
    10f4:	83 81       	ldd	r24, Z+3	; 0x03
    10f6:	81 30       	cpi	r24, 0x01	; 1
    10f8:	49 f4       	brne	.+18     	; 0x110c <PWM_vInit+0x146>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    10fa:	a3 e5       	ldi	r26, 0x53	; 83
    10fc:	b0 e0       	ldi	r27, 0x00	; 0
    10fe:	e3 e5       	ldi	r30, 0x53	; 83
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	8f 7c       	andi	r24, 0xCF	; 207
    1106:	80 62       	ori	r24, 0x20	; 32
    1108:	8c 93       	st	X, r24
    110a:	97 c3       	rjmp	.+1838   	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    110c:	e9 81       	ldd	r30, Y+1	; 0x01
    110e:	fa 81       	ldd	r31, Y+2	; 0x02
    1110:	83 81       	ldd	r24, Z+3	; 0x03
    1112:	88 23       	and	r24, r24
    1114:	09 f0       	breq	.+2      	; 0x1118 <PWM_vInit+0x152>
    1116:	91 c3       	rjmp	.+1826   	; 0x183a <PWM_vInit+0x874>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    1118:	a3 e5       	ldi	r26, 0x53	; 83
    111a:	b0 e0       	ldi	r27, 0x00	; 0
    111c:	e3 e5       	ldi	r30, 0x53	; 83
    111e:	f0 e0       	ldi	r31, 0x00	; 0
    1120:	80 81       	ld	r24, Z
    1122:	80 63       	ori	r24, 0x30	; 48
    1124:	8c 93       	st	X, r24
    1126:	89 c3       	rjmp	.+1810   	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER0_FastPWM:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x48;
    1128:	a3 e5       	ldi	r26, 0x53	; 83
    112a:	b0 e0       	ldi	r27, 0x00	; 0
    112c:	e3 e5       	ldi	r30, 0x53	; 83
    112e:	f0 e0       	ldi	r31, 0x00	; 0
    1130:	80 81       	ld	r24, Z
    1132:	88 64       	ori	r24, 0x48	; 72
    1134:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1136:	e9 81       	ldd	r30, Y+1	; 0x01
    1138:	fa 81       	ldd	r31, Y+2	; 0x02
    113a:	82 81       	ldd	r24, Z+2	; 0x02
    113c:	81 30       	cpi	r24, 0x01	; 1
    113e:	41 f4       	brne	.+16     	; 0x1150 <PWM_vInit+0x18a>
				TIMSK_REG |= 0x03;
    1140:	a9 e5       	ldi	r26, 0x59	; 89
    1142:	b0 e0       	ldi	r27, 0x00	; 0
    1144:	e9 e5       	ldi	r30, 0x59	; 89
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	80 81       	ld	r24, Z
    114a:	83 60       	ori	r24, 0x03	; 3
    114c:	8c 93       	st	X, r24
    114e:	75 c3       	rjmp	.+1770   	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1150:	e9 81       	ldd	r30, Y+1	; 0x01
    1152:	fa 81       	ldd	r31, Y+2	; 0x02
    1154:	82 81       	ldd	r24, Z+2	; 0x02
    1156:	88 23       	and	r24, r24
    1158:	09 f0       	breq	.+2      	; 0x115c <PWM_vInit+0x196>
    115a:	6f c3       	rjmp	.+1758   	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    115c:	e9 81       	ldd	r30, Y+1	; 0x01
    115e:	fa 81       	ldd	r31, Y+2	; 0x02
    1160:	83 81       	ldd	r24, Z+3	; 0x03
    1162:	81 30       	cpi	r24, 0x01	; 1
    1164:	49 f4       	brne	.+18     	; 0x1178 <PWM_vInit+0x1b2>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    1166:	a3 e5       	ldi	r26, 0x53	; 83
    1168:	b0 e0       	ldi	r27, 0x00	; 0
    116a:	e3 e5       	ldi	r30, 0x53	; 83
    116c:	f0 e0       	ldi	r31, 0x00	; 0
    116e:	80 81       	ld	r24, Z
    1170:	8f 7c       	andi	r24, 0xCF	; 207
    1172:	80 62       	ori	r24, 0x20	; 32
    1174:	8c 93       	st	X, r24
    1176:	61 c3       	rjmp	.+1730   	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1178:	e9 81       	ldd	r30, Y+1	; 0x01
    117a:	fa 81       	ldd	r31, Y+2	; 0x02
    117c:	83 81       	ldd	r24, Z+3	; 0x03
    117e:	88 23       	and	r24, r24
    1180:	09 f0       	breq	.+2      	; 0x1184 <PWM_vInit+0x1be>
    1182:	5b c3       	rjmp	.+1718   	; 0x183a <PWM_vInit+0x874>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    1184:	a3 e5       	ldi	r26, 0x53	; 83
    1186:	b0 e0       	ldi	r27, 0x00	; 0
    1188:	e3 e5       	ldi	r30, 0x53	; 83
    118a:	f0 e0       	ldi	r31, 0x00	; 0
    118c:	80 81       	ld	r24, Z
    118e:	80 63       	ori	r24, 0x30	; 48
    1190:	8c 93       	st	X, r24
    1192:	53 c3       	rjmp	.+1702   	; 0x183a <PWM_vInit+0x874>
			/*
			 * WGM10 WGM11 bit 0,1 in TCCR1A
			 * WGM12 WGM13 bit 3,4 in TCCR1B
			 */
		case TIMER1_Phase8:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    1194:	af e4       	ldi	r26, 0x4F	; 79
    1196:	b0 e0       	ldi	r27, 0x00	; 0
    1198:	ef e4       	ldi	r30, 0x4F	; 79
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	80 81       	ld	r24, Z
    119e:	8c 7f       	andi	r24, 0xFC	; 252
    11a0:	81 60       	ori	r24, 0x01	; 1
    11a2:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    11a4:	ae e4       	ldi	r26, 0x4E	; 78
    11a6:	b0 e0       	ldi	r27, 0x00	; 0
    11a8:	ee e4       	ldi	r30, 0x4E	; 78
    11aa:	f0 e0       	ldi	r31, 0x00	; 0
    11ac:	80 81       	ld	r24, Z
    11ae:	87 7e       	andi	r24, 0xE7	; 231
    11b0:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    11b2:	e9 81       	ldd	r30, Y+1	; 0x01
    11b4:	fa 81       	ldd	r31, Y+2	; 0x02
    11b6:	82 81       	ldd	r24, Z+2	; 0x02
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	41 f4       	brne	.+16     	; 0x11cc <PWM_vInit+0x206>
				TIMSK_REG |= 0x3C;
    11bc:	a9 e5       	ldi	r26, 0x59	; 89
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e9 e5       	ldi	r30, 0x59	; 89
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8c 63       	ori	r24, 0x3C	; 60
    11c8:	8c 93       	st	X, r24
    11ca:	37 c3       	rjmp	.+1646   	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    11cc:	e9 81       	ldd	r30, Y+1	; 0x01
    11ce:	fa 81       	ldd	r31, Y+2	; 0x02
    11d0:	82 81       	ldd	r24, Z+2	; 0x02
    11d2:	88 23       	and	r24, r24
    11d4:	09 f0       	breq	.+2      	; 0x11d8 <PWM_vInit+0x212>
    11d6:	31 c3       	rjmp	.+1634   	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    11d8:	e9 81       	ldd	r30, Y+1	; 0x01
    11da:	fa 81       	ldd	r31, Y+2	; 0x02
    11dc:	83 81       	ldd	r24, Z+3	; 0x03
    11de:	81 30       	cpi	r24, 0x01	; 1
    11e0:	49 f4       	brne	.+18     	; 0x11f4 <PWM_vInit+0x22e>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    11e2:	af e4       	ldi	r26, 0x4F	; 79
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	ef e4       	ldi	r30, 0x4F	; 79
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	8f 7c       	andi	r24, 0xCF	; 207
    11ee:	80 62       	ori	r24, 0x20	; 32
    11f0:	8c 93       	st	X, r24
    11f2:	23 c3       	rjmp	.+1606   	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    11f4:	e9 81       	ldd	r30, Y+1	; 0x01
    11f6:	fa 81       	ldd	r31, Y+2	; 0x02
    11f8:	83 81       	ldd	r24, Z+3	; 0x03
    11fa:	88 23       	and	r24, r24
    11fc:	09 f0       	breq	.+2      	; 0x1200 <PWM_vInit+0x23a>
    11fe:	1d c3       	rjmp	.+1594   	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1200:	af e4       	ldi	r26, 0x4F	; 79
    1202:	b0 e0       	ldi	r27, 0x00	; 0
    1204:	ef e4       	ldi	r30, 0x4F	; 79
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	80 63       	ori	r24, 0x30	; 48
    120c:	8c 93       	st	X, r24
    120e:	15 c3       	rjmp	.+1578   	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Phase9:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    1210:	af e4       	ldi	r26, 0x4F	; 79
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	ef e4       	ldi	r30, 0x4F	; 79
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	8c 7f       	andi	r24, 0xFC	; 252
    121c:	82 60       	ori	r24, 0x02	; 2
    121e:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    1220:	ae e4       	ldi	r26, 0x4E	; 78
    1222:	b0 e0       	ldi	r27, 0x00	; 0
    1224:	ee e4       	ldi	r30, 0x4E	; 78
    1226:	f0 e0       	ldi	r31, 0x00	; 0
    1228:	80 81       	ld	r24, Z
    122a:	87 7e       	andi	r24, 0xE7	; 231
    122c:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    122e:	e9 81       	ldd	r30, Y+1	; 0x01
    1230:	fa 81       	ldd	r31, Y+2	; 0x02
    1232:	82 81       	ldd	r24, Z+2	; 0x02
    1234:	81 30       	cpi	r24, 0x01	; 1
    1236:	41 f4       	brne	.+16     	; 0x1248 <PWM_vInit+0x282>
				TIMSK_REG |= 0x3C;
    1238:	a9 e5       	ldi	r26, 0x59	; 89
    123a:	b0 e0       	ldi	r27, 0x00	; 0
    123c:	e9 e5       	ldi	r30, 0x59	; 89
    123e:	f0 e0       	ldi	r31, 0x00	; 0
    1240:	80 81       	ld	r24, Z
    1242:	8c 63       	ori	r24, 0x3C	; 60
    1244:	8c 93       	st	X, r24
    1246:	f9 c2       	rjmp	.+1522   	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1248:	e9 81       	ldd	r30, Y+1	; 0x01
    124a:	fa 81       	ldd	r31, Y+2	; 0x02
    124c:	82 81       	ldd	r24, Z+2	; 0x02
    124e:	88 23       	and	r24, r24
    1250:	09 f0       	breq	.+2      	; 0x1254 <PWM_vInit+0x28e>
    1252:	f3 c2       	rjmp	.+1510   	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1254:	e9 81       	ldd	r30, Y+1	; 0x01
    1256:	fa 81       	ldd	r31, Y+2	; 0x02
    1258:	83 81       	ldd	r24, Z+3	; 0x03
    125a:	81 30       	cpi	r24, 0x01	; 1
    125c:	49 f4       	brne	.+18     	; 0x1270 <PWM_vInit+0x2aa>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    125e:	af e4       	ldi	r26, 0x4F	; 79
    1260:	b0 e0       	ldi	r27, 0x00	; 0
    1262:	ef e4       	ldi	r30, 0x4F	; 79
    1264:	f0 e0       	ldi	r31, 0x00	; 0
    1266:	80 81       	ld	r24, Z
    1268:	8f 7c       	andi	r24, 0xCF	; 207
    126a:	80 62       	ori	r24, 0x20	; 32
    126c:	8c 93       	st	X, r24
    126e:	e5 c2       	rjmp	.+1482   	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1270:	e9 81       	ldd	r30, Y+1	; 0x01
    1272:	fa 81       	ldd	r31, Y+2	; 0x02
    1274:	83 81       	ldd	r24, Z+3	; 0x03
    1276:	88 23       	and	r24, r24
    1278:	09 f0       	breq	.+2      	; 0x127c <PWM_vInit+0x2b6>
    127a:	df c2       	rjmp	.+1470   	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    127c:	af e4       	ldi	r26, 0x4F	; 79
    127e:	b0 e0       	ldi	r27, 0x00	; 0
    1280:	ef e4       	ldi	r30, 0x4F	; 79
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	80 63       	ori	r24, 0x30	; 48
    1288:	8c 93       	st	X, r24
    128a:	d7 c2       	rjmp	.+1454   	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Phase10:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    128c:	af e4       	ldi	r26, 0x4F	; 79
    128e:	b0 e0       	ldi	r27, 0x00	; 0
    1290:	ef e4       	ldi	r30, 0x4F	; 79
    1292:	f0 e0       	ldi	r31, 0x00	; 0
    1294:	80 81       	ld	r24, Z
    1296:	83 60       	ori	r24, 0x03	; 3
    1298:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    129a:	ae e4       	ldi	r26, 0x4E	; 78
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	ee e4       	ldi	r30, 0x4E	; 78
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	87 7e       	andi	r24, 0xE7	; 231
    12a6:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    12a8:	e9 81       	ldd	r30, Y+1	; 0x01
    12aa:	fa 81       	ldd	r31, Y+2	; 0x02
    12ac:	82 81       	ldd	r24, Z+2	; 0x02
    12ae:	81 30       	cpi	r24, 0x01	; 1
    12b0:	41 f4       	brne	.+16     	; 0x12c2 <PWM_vInit+0x2fc>
				TIMSK_REG |= 0x3C;
    12b2:	a9 e5       	ldi	r26, 0x59	; 89
    12b4:	b0 e0       	ldi	r27, 0x00	; 0
    12b6:	e9 e5       	ldi	r30, 0x59	; 89
    12b8:	f0 e0       	ldi	r31, 0x00	; 0
    12ba:	80 81       	ld	r24, Z
    12bc:	8c 63       	ori	r24, 0x3C	; 60
    12be:	8c 93       	st	X, r24
    12c0:	bc c2       	rjmp	.+1400   	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    12c2:	e9 81       	ldd	r30, Y+1	; 0x01
    12c4:	fa 81       	ldd	r31, Y+2	; 0x02
    12c6:	82 81       	ldd	r24, Z+2	; 0x02
    12c8:	88 23       	and	r24, r24
    12ca:	09 f0       	breq	.+2      	; 0x12ce <PWM_vInit+0x308>
    12cc:	b6 c2       	rjmp	.+1388   	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    12ce:	e9 81       	ldd	r30, Y+1	; 0x01
    12d0:	fa 81       	ldd	r31, Y+2	; 0x02
    12d2:	83 81       	ldd	r24, Z+3	; 0x03
    12d4:	81 30       	cpi	r24, 0x01	; 1
    12d6:	49 f4       	brne	.+18     	; 0x12ea <PWM_vInit+0x324>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    12d8:	af e4       	ldi	r26, 0x4F	; 79
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	ef e4       	ldi	r30, 0x4F	; 79
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	8f 7c       	andi	r24, 0xCF	; 207
    12e4:	80 62       	ori	r24, 0x20	; 32
    12e6:	8c 93       	st	X, r24
    12e8:	a8 c2       	rjmp	.+1360   	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    12ea:	e9 81       	ldd	r30, Y+1	; 0x01
    12ec:	fa 81       	ldd	r31, Y+2	; 0x02
    12ee:	83 81       	ldd	r24, Z+3	; 0x03
    12f0:	88 23       	and	r24, r24
    12f2:	09 f0       	breq	.+2      	; 0x12f6 <PWM_vInit+0x330>
    12f4:	a2 c2       	rjmp	.+1348   	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    12f6:	af e4       	ldi	r26, 0x4F	; 79
    12f8:	b0 e0       	ldi	r27, 0x00	; 0
    12fa:	ef e4       	ldi	r30, 0x4F	; 79
    12fc:	f0 e0       	ldi	r31, 0x00	; 0
    12fe:	80 81       	ld	r24, Z
    1300:	80 63       	ori	r24, 0x30	; 48
    1302:	8c 93       	st	X, r24
    1304:	9a c2       	rjmp	.+1332   	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast8:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    1306:	af e4       	ldi	r26, 0x4F	; 79
    1308:	b0 e0       	ldi	r27, 0x00	; 0
    130a:	ef e4       	ldi	r30, 0x4F	; 79
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	8c 7f       	andi	r24, 0xFC	; 252
    1312:	81 60       	ori	r24, 0x01	; 1
    1314:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    1316:	ae e4       	ldi	r26, 0x4E	; 78
    1318:	b0 e0       	ldi	r27, 0x00	; 0
    131a:	ee e4       	ldi	r30, 0x4E	; 78
    131c:	f0 e0       	ldi	r31, 0x00	; 0
    131e:	80 81       	ld	r24, Z
    1320:	87 7e       	andi	r24, 0xE7	; 231
    1322:	88 60       	ori	r24, 0x08	; 8
    1324:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1326:	e9 81       	ldd	r30, Y+1	; 0x01
    1328:	fa 81       	ldd	r31, Y+2	; 0x02
    132a:	82 81       	ldd	r24, Z+2	; 0x02
    132c:	81 30       	cpi	r24, 0x01	; 1
    132e:	41 f4       	brne	.+16     	; 0x1340 <PWM_vInit+0x37a>
				TIMSK_REG |= 0x3C;
    1330:	a9 e5       	ldi	r26, 0x59	; 89
    1332:	b0 e0       	ldi	r27, 0x00	; 0
    1334:	e9 e5       	ldi	r30, 0x59	; 89
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	8c 63       	ori	r24, 0x3C	; 60
    133c:	8c 93       	st	X, r24
    133e:	7d c2       	rjmp	.+1274   	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1340:	e9 81       	ldd	r30, Y+1	; 0x01
    1342:	fa 81       	ldd	r31, Y+2	; 0x02
    1344:	82 81       	ldd	r24, Z+2	; 0x02
    1346:	88 23       	and	r24, r24
    1348:	09 f0       	breq	.+2      	; 0x134c <PWM_vInit+0x386>
    134a:	77 c2       	rjmp	.+1262   	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    134c:	e9 81       	ldd	r30, Y+1	; 0x01
    134e:	fa 81       	ldd	r31, Y+2	; 0x02
    1350:	83 81       	ldd	r24, Z+3	; 0x03
    1352:	81 30       	cpi	r24, 0x01	; 1
    1354:	49 f4       	brne	.+18     	; 0x1368 <PWM_vInit+0x3a2>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1356:	af e4       	ldi	r26, 0x4F	; 79
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	ef e4       	ldi	r30, 0x4F	; 79
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	8f 7c       	andi	r24, 0xCF	; 207
    1362:	80 62       	ori	r24, 0x20	; 32
    1364:	8c 93       	st	X, r24
    1366:	69 c2       	rjmp	.+1234   	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1368:	e9 81       	ldd	r30, Y+1	; 0x01
    136a:	fa 81       	ldd	r31, Y+2	; 0x02
    136c:	83 81       	ldd	r24, Z+3	; 0x03
    136e:	88 23       	and	r24, r24
    1370:	09 f0       	breq	.+2      	; 0x1374 <PWM_vInit+0x3ae>
    1372:	63 c2       	rjmp	.+1222   	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1374:	af e4       	ldi	r26, 0x4F	; 79
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ef e4       	ldi	r30, 0x4F	; 79
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	80 63       	ori	r24, 0x30	; 48
    1380:	8c 93       	st	X, r24
    1382:	5b c2       	rjmp	.+1206   	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast9:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    1384:	af e4       	ldi	r26, 0x4F	; 79
    1386:	b0 e0       	ldi	r27, 0x00	; 0
    1388:	ef e4       	ldi	r30, 0x4F	; 79
    138a:	f0 e0       	ldi	r31, 0x00	; 0
    138c:	80 81       	ld	r24, Z
    138e:	8c 7f       	andi	r24, 0xFC	; 252
    1390:	82 60       	ori	r24, 0x02	; 2
    1392:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    1394:	ae e4       	ldi	r26, 0x4E	; 78
    1396:	b0 e0       	ldi	r27, 0x00	; 0
    1398:	ee e4       	ldi	r30, 0x4E	; 78
    139a:	f0 e0       	ldi	r31, 0x00	; 0
    139c:	80 81       	ld	r24, Z
    139e:	87 7e       	andi	r24, 0xE7	; 231
    13a0:	88 60       	ori	r24, 0x08	; 8
    13a2:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    13a4:	e9 81       	ldd	r30, Y+1	; 0x01
    13a6:	fa 81       	ldd	r31, Y+2	; 0x02
    13a8:	82 81       	ldd	r24, Z+2	; 0x02
    13aa:	81 30       	cpi	r24, 0x01	; 1
    13ac:	41 f4       	brne	.+16     	; 0x13be <PWM_vInit+0x3f8>
				TIMSK_REG |= 0x3C;
    13ae:	a9 e5       	ldi	r26, 0x59	; 89
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e9 e5       	ldi	r30, 0x59	; 89
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	8c 63       	ori	r24, 0x3C	; 60
    13ba:	8c 93       	st	X, r24
    13bc:	3e c2       	rjmp	.+1148   	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    13be:	e9 81       	ldd	r30, Y+1	; 0x01
    13c0:	fa 81       	ldd	r31, Y+2	; 0x02
    13c2:	82 81       	ldd	r24, Z+2	; 0x02
    13c4:	88 23       	and	r24, r24
    13c6:	09 f0       	breq	.+2      	; 0x13ca <PWM_vInit+0x404>
    13c8:	38 c2       	rjmp	.+1136   	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    13ca:	e9 81       	ldd	r30, Y+1	; 0x01
    13cc:	fa 81       	ldd	r31, Y+2	; 0x02
    13ce:	83 81       	ldd	r24, Z+3	; 0x03
    13d0:	81 30       	cpi	r24, 0x01	; 1
    13d2:	49 f4       	brne	.+18     	; 0x13e6 <PWM_vInit+0x420>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    13d4:	af e4       	ldi	r26, 0x4F	; 79
    13d6:	b0 e0       	ldi	r27, 0x00	; 0
    13d8:	ef e4       	ldi	r30, 0x4F	; 79
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	8f 7c       	andi	r24, 0xCF	; 207
    13e0:	80 62       	ori	r24, 0x20	; 32
    13e2:	8c 93       	st	X, r24
    13e4:	2a c2       	rjmp	.+1108   	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    13e6:	e9 81       	ldd	r30, Y+1	; 0x01
    13e8:	fa 81       	ldd	r31, Y+2	; 0x02
    13ea:	83 81       	ldd	r24, Z+3	; 0x03
    13ec:	88 23       	and	r24, r24
    13ee:	09 f0       	breq	.+2      	; 0x13f2 <PWM_vInit+0x42c>
    13f0:	24 c2       	rjmp	.+1096   	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    13f2:	af e4       	ldi	r26, 0x4F	; 79
    13f4:	b0 e0       	ldi	r27, 0x00	; 0
    13f6:	ef e4       	ldi	r30, 0x4F	; 79
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	80 81       	ld	r24, Z
    13fc:	80 63       	ori	r24, 0x30	; 48
    13fe:	8c 93       	st	X, r24
    1400:	1c c2       	rjmp	.+1080   	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast10:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    1402:	af e4       	ldi	r26, 0x4F	; 79
    1404:	b0 e0       	ldi	r27, 0x00	; 0
    1406:	ef e4       	ldi	r30, 0x4F	; 79
    1408:	f0 e0       	ldi	r31, 0x00	; 0
    140a:	80 81       	ld	r24, Z
    140c:	83 60       	ori	r24, 0x03	; 3
    140e:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    1410:	ae e4       	ldi	r26, 0x4E	; 78
    1412:	b0 e0       	ldi	r27, 0x00	; 0
    1414:	ee e4       	ldi	r30, 0x4E	; 78
    1416:	f0 e0       	ldi	r31, 0x00	; 0
    1418:	80 81       	ld	r24, Z
    141a:	87 7e       	andi	r24, 0xE7	; 231
    141c:	88 60       	ori	r24, 0x08	; 8
    141e:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1420:	e9 81       	ldd	r30, Y+1	; 0x01
    1422:	fa 81       	ldd	r31, Y+2	; 0x02
    1424:	82 81       	ldd	r24, Z+2	; 0x02
    1426:	81 30       	cpi	r24, 0x01	; 1
    1428:	41 f4       	brne	.+16     	; 0x143a <PWM_vInit+0x474>
				TIMSK_REG |= 0x3C;
    142a:	a9 e5       	ldi	r26, 0x59	; 89
    142c:	b0 e0       	ldi	r27, 0x00	; 0
    142e:	e9 e5       	ldi	r30, 0x59	; 89
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	80 81       	ld	r24, Z
    1434:	8c 63       	ori	r24, 0x3C	; 60
    1436:	8c 93       	st	X, r24
    1438:	00 c2       	rjmp	.+1024   	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    143a:	e9 81       	ldd	r30, Y+1	; 0x01
    143c:	fa 81       	ldd	r31, Y+2	; 0x02
    143e:	82 81       	ldd	r24, Z+2	; 0x02
    1440:	88 23       	and	r24, r24
    1442:	09 f0       	breq	.+2      	; 0x1446 <PWM_vInit+0x480>
    1444:	fa c1       	rjmp	.+1012   	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1446:	e9 81       	ldd	r30, Y+1	; 0x01
    1448:	fa 81       	ldd	r31, Y+2	; 0x02
    144a:	83 81       	ldd	r24, Z+3	; 0x03
    144c:	81 30       	cpi	r24, 0x01	; 1
    144e:	49 f4       	brne	.+18     	; 0x1462 <PWM_vInit+0x49c>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1450:	af e4       	ldi	r26, 0x4F	; 79
    1452:	b0 e0       	ldi	r27, 0x00	; 0
    1454:	ef e4       	ldi	r30, 0x4F	; 79
    1456:	f0 e0       	ldi	r31, 0x00	; 0
    1458:	80 81       	ld	r24, Z
    145a:	8f 7c       	andi	r24, 0xCF	; 207
    145c:	80 62       	ori	r24, 0x20	; 32
    145e:	8c 93       	st	X, r24
    1460:	ec c1       	rjmp	.+984    	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1462:	e9 81       	ldd	r30, Y+1	; 0x01
    1464:	fa 81       	ldd	r31, Y+2	; 0x02
    1466:	83 81       	ldd	r24, Z+3	; 0x03
    1468:	88 23       	and	r24, r24
    146a:	09 f0       	breq	.+2      	; 0x146e <PWM_vInit+0x4a8>
    146c:	e6 c1       	rjmp	.+972    	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    146e:	af e4       	ldi	r26, 0x4F	; 79
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	ef e4       	ldi	r30, 0x4F	; 79
    1474:	f0 e0       	ldi	r31, 0x00	; 0
    1476:	80 81       	ld	r24, Z
    1478:	80 63       	ori	r24, 0x30	; 48
    147a:	8c 93       	st	X, r24
    147c:	de c1       	rjmp	.+956    	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseFreqICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    147e:	af e4       	ldi	r26, 0x4F	; 79
    1480:	b0 e0       	ldi	r27, 0x00	; 0
    1482:	ef e4       	ldi	r30, 0x4F	; 79
    1484:	f0 e0       	ldi	r31, 0x00	; 0
    1486:	80 81       	ld	r24, Z
    1488:	8c 7f       	andi	r24, 0xFC	; 252
    148a:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    148c:	ae e4       	ldi	r26, 0x4E	; 78
    148e:	b0 e0       	ldi	r27, 0x00	; 0
    1490:	ee e4       	ldi	r30, 0x4E	; 78
    1492:	f0 e0       	ldi	r31, 0x00	; 0
    1494:	80 81       	ld	r24, Z
    1496:	87 7e       	andi	r24, 0xE7	; 231
    1498:	80 61       	ori	r24, 0x10	; 16
    149a:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    149c:	e9 81       	ldd	r30, Y+1	; 0x01
    149e:	fa 81       	ldd	r31, Y+2	; 0x02
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	81 30       	cpi	r24, 0x01	; 1
    14a4:	41 f4       	brne	.+16     	; 0x14b6 <PWM_vInit+0x4f0>
				TIMSK_REG |= 0x3C;
    14a6:	a9 e5       	ldi	r26, 0x59	; 89
    14a8:	b0 e0       	ldi	r27, 0x00	; 0
    14aa:	e9 e5       	ldi	r30, 0x59	; 89
    14ac:	f0 e0       	ldi	r31, 0x00	; 0
    14ae:	80 81       	ld	r24, Z
    14b0:	8c 63       	ori	r24, 0x3C	; 60
    14b2:	8c 93       	st	X, r24
    14b4:	c2 c1       	rjmp	.+900    	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    14b6:	e9 81       	ldd	r30, Y+1	; 0x01
    14b8:	fa 81       	ldd	r31, Y+2	; 0x02
    14ba:	82 81       	ldd	r24, Z+2	; 0x02
    14bc:	88 23       	and	r24, r24
    14be:	09 f0       	breq	.+2      	; 0x14c2 <PWM_vInit+0x4fc>
    14c0:	bc c1       	rjmp	.+888    	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    14c2:	e9 81       	ldd	r30, Y+1	; 0x01
    14c4:	fa 81       	ldd	r31, Y+2	; 0x02
    14c6:	83 81       	ldd	r24, Z+3	; 0x03
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	49 f4       	brne	.+18     	; 0x14de <PWM_vInit+0x518>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    14cc:	af e4       	ldi	r26, 0x4F	; 79
    14ce:	b0 e0       	ldi	r27, 0x00	; 0
    14d0:	ef e4       	ldi	r30, 0x4F	; 79
    14d2:	f0 e0       	ldi	r31, 0x00	; 0
    14d4:	80 81       	ld	r24, Z
    14d6:	8f 7c       	andi	r24, 0xCF	; 207
    14d8:	80 62       	ori	r24, 0x20	; 32
    14da:	8c 93       	st	X, r24
    14dc:	ae c1       	rjmp	.+860    	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    14de:	e9 81       	ldd	r30, Y+1	; 0x01
    14e0:	fa 81       	ldd	r31, Y+2	; 0x02
    14e2:	83 81       	ldd	r24, Z+3	; 0x03
    14e4:	88 23       	and	r24, r24
    14e6:	09 f0       	breq	.+2      	; 0x14ea <PWM_vInit+0x524>
    14e8:	a8 c1       	rjmp	.+848    	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    14ea:	af e4       	ldi	r26, 0x4F	; 79
    14ec:	b0 e0       	ldi	r27, 0x00	; 0
    14ee:	ef e4       	ldi	r30, 0x4F	; 79
    14f0:	f0 e0       	ldi	r31, 0x00	; 0
    14f2:	80 81       	ld	r24, Z
    14f4:	80 63       	ori	r24, 0x30	; 48
    14f6:	8c 93       	st	X, r24
    14f8:	a0 c1       	rjmp	.+832    	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseFreqOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    14fa:	af e4       	ldi	r26, 0x4F	; 79
    14fc:	b0 e0       	ldi	r27, 0x00	; 0
    14fe:	ef e4       	ldi	r30, 0x4F	; 79
    1500:	f0 e0       	ldi	r31, 0x00	; 0
    1502:	80 81       	ld	r24, Z
    1504:	8c 7f       	andi	r24, 0xFC	; 252
    1506:	81 60       	ori	r24, 0x01	; 1
    1508:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    150a:	ae e4       	ldi	r26, 0x4E	; 78
    150c:	b0 e0       	ldi	r27, 0x00	; 0
    150e:	ee e4       	ldi	r30, 0x4E	; 78
    1510:	f0 e0       	ldi	r31, 0x00	; 0
    1512:	80 81       	ld	r24, Z
    1514:	87 7e       	andi	r24, 0xE7	; 231
    1516:	80 61       	ori	r24, 0x10	; 16
    1518:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    151a:	e9 81       	ldd	r30, Y+1	; 0x01
    151c:	fa 81       	ldd	r31, Y+2	; 0x02
    151e:	82 81       	ldd	r24, Z+2	; 0x02
    1520:	81 30       	cpi	r24, 0x01	; 1
    1522:	41 f4       	brne	.+16     	; 0x1534 <PWM_vInit+0x56e>
				TIMSK_REG |= 0x3C;
    1524:	a9 e5       	ldi	r26, 0x59	; 89
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e9 e5       	ldi	r30, 0x59	; 89
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8c 63       	ori	r24, 0x3C	; 60
    1530:	8c 93       	st	X, r24
    1532:	83 c1       	rjmp	.+774    	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1534:	e9 81       	ldd	r30, Y+1	; 0x01
    1536:	fa 81       	ldd	r31, Y+2	; 0x02
    1538:	82 81       	ldd	r24, Z+2	; 0x02
    153a:	88 23       	and	r24, r24
    153c:	09 f0       	breq	.+2      	; 0x1540 <PWM_vInit+0x57a>
    153e:	7d c1       	rjmp	.+762    	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1540:	e9 81       	ldd	r30, Y+1	; 0x01
    1542:	fa 81       	ldd	r31, Y+2	; 0x02
    1544:	83 81       	ldd	r24, Z+3	; 0x03
    1546:	81 30       	cpi	r24, 0x01	; 1
    1548:	49 f4       	brne	.+18     	; 0x155c <PWM_vInit+0x596>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    154a:	af e4       	ldi	r26, 0x4F	; 79
    154c:	b0 e0       	ldi	r27, 0x00	; 0
    154e:	ef e4       	ldi	r30, 0x4F	; 79
    1550:	f0 e0       	ldi	r31, 0x00	; 0
    1552:	80 81       	ld	r24, Z
    1554:	8f 7c       	andi	r24, 0xCF	; 207
    1556:	80 62       	ori	r24, 0x20	; 32
    1558:	8c 93       	st	X, r24
    155a:	6f c1       	rjmp	.+734    	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    155c:	e9 81       	ldd	r30, Y+1	; 0x01
    155e:	fa 81       	ldd	r31, Y+2	; 0x02
    1560:	83 81       	ldd	r24, Z+3	; 0x03
    1562:	88 23       	and	r24, r24
    1564:	09 f0       	breq	.+2      	; 0x1568 <PWM_vInit+0x5a2>
    1566:	69 c1       	rjmp	.+722    	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1568:	af e4       	ldi	r26, 0x4F	; 79
    156a:	b0 e0       	ldi	r27, 0x00	; 0
    156c:	ef e4       	ldi	r30, 0x4F	; 79
    156e:	f0 e0       	ldi	r31, 0x00	; 0
    1570:	80 81       	ld	r24, Z
    1572:	80 63       	ori	r24, 0x30	; 48
    1574:	8c 93       	st	X, r24
    1576:	61 c1       	rjmp	.+706    	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    1578:	af e4       	ldi	r26, 0x4F	; 79
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	ef e4       	ldi	r30, 0x4F	; 79
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	8c 7f       	andi	r24, 0xFC	; 252
    1584:	82 60       	ori	r24, 0x02	; 2
    1586:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    1588:	ae e4       	ldi	r26, 0x4E	; 78
    158a:	b0 e0       	ldi	r27, 0x00	; 0
    158c:	ee e4       	ldi	r30, 0x4E	; 78
    158e:	f0 e0       	ldi	r31, 0x00	; 0
    1590:	80 81       	ld	r24, Z
    1592:	87 7e       	andi	r24, 0xE7	; 231
    1594:	80 61       	ori	r24, 0x10	; 16
    1596:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1598:	e9 81       	ldd	r30, Y+1	; 0x01
    159a:	fa 81       	ldd	r31, Y+2	; 0x02
    159c:	82 81       	ldd	r24, Z+2	; 0x02
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	41 f4       	brne	.+16     	; 0x15b2 <PWM_vInit+0x5ec>
				TIMSK_REG |= 0x3C;
    15a2:	a9 e5       	ldi	r26, 0x59	; 89
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	e9 e5       	ldi	r30, 0x59	; 89
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	8c 63       	ori	r24, 0x3C	; 60
    15ae:	8c 93       	st	X, r24
    15b0:	44 c1       	rjmp	.+648    	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    15b2:	e9 81       	ldd	r30, Y+1	; 0x01
    15b4:	fa 81       	ldd	r31, Y+2	; 0x02
    15b6:	82 81       	ldd	r24, Z+2	; 0x02
    15b8:	88 23       	and	r24, r24
    15ba:	09 f0       	breq	.+2      	; 0x15be <PWM_vInit+0x5f8>
    15bc:	3e c1       	rjmp	.+636    	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    15be:	e9 81       	ldd	r30, Y+1	; 0x01
    15c0:	fa 81       	ldd	r31, Y+2	; 0x02
    15c2:	83 81       	ldd	r24, Z+3	; 0x03
    15c4:	81 30       	cpi	r24, 0x01	; 1
    15c6:	49 f4       	brne	.+18     	; 0x15da <PWM_vInit+0x614>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    15c8:	af e4       	ldi	r26, 0x4F	; 79
    15ca:	b0 e0       	ldi	r27, 0x00	; 0
    15cc:	ef e4       	ldi	r30, 0x4F	; 79
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	8f 7c       	andi	r24, 0xCF	; 207
    15d4:	80 62       	ori	r24, 0x20	; 32
    15d6:	8c 93       	st	X, r24
    15d8:	30 c1       	rjmp	.+608    	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    15da:	e9 81       	ldd	r30, Y+1	; 0x01
    15dc:	fa 81       	ldd	r31, Y+2	; 0x02
    15de:	83 81       	ldd	r24, Z+3	; 0x03
    15e0:	88 23       	and	r24, r24
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <PWM_vInit+0x620>
    15e4:	2a c1       	rjmp	.+596    	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    15e6:	af e4       	ldi	r26, 0x4F	; 79
    15e8:	b0 e0       	ldi	r27, 0x00	; 0
    15ea:	ef e4       	ldi	r30, 0x4F	; 79
    15ec:	f0 e0       	ldi	r31, 0x00	; 0
    15ee:	80 81       	ld	r24, Z
    15f0:	80 63       	ori	r24, 0x30	; 48
    15f2:	8c 93       	st	X, r24
    15f4:	22 c1       	rjmp	.+580    	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    15f6:	af e4       	ldi	r26, 0x4F	; 79
    15f8:	b0 e0       	ldi	r27, 0x00	; 0
    15fa:	ef e4       	ldi	r30, 0x4F	; 79
    15fc:	f0 e0       	ldi	r31, 0x00	; 0
    15fe:	80 81       	ld	r24, Z
    1600:	83 60       	ori	r24, 0x03	; 3
    1602:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    1604:	ae e4       	ldi	r26, 0x4E	; 78
    1606:	b0 e0       	ldi	r27, 0x00	; 0
    1608:	ee e4       	ldi	r30, 0x4E	; 78
    160a:	f0 e0       	ldi	r31, 0x00	; 0
    160c:	80 81       	ld	r24, Z
    160e:	87 7e       	andi	r24, 0xE7	; 231
    1610:	80 61       	ori	r24, 0x10	; 16
    1612:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1614:	e9 81       	ldd	r30, Y+1	; 0x01
    1616:	fa 81       	ldd	r31, Y+2	; 0x02
    1618:	82 81       	ldd	r24, Z+2	; 0x02
    161a:	81 30       	cpi	r24, 0x01	; 1
    161c:	41 f4       	brne	.+16     	; 0x162e <PWM_vInit+0x668>
				TIMSK_REG |= 0x3C;
    161e:	a9 e5       	ldi	r26, 0x59	; 89
    1620:	b0 e0       	ldi	r27, 0x00	; 0
    1622:	e9 e5       	ldi	r30, 0x59	; 89
    1624:	f0 e0       	ldi	r31, 0x00	; 0
    1626:	80 81       	ld	r24, Z
    1628:	8c 63       	ori	r24, 0x3C	; 60
    162a:	8c 93       	st	X, r24
    162c:	06 c1       	rjmp	.+524    	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    162e:	e9 81       	ldd	r30, Y+1	; 0x01
    1630:	fa 81       	ldd	r31, Y+2	; 0x02
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	88 23       	and	r24, r24
    1636:	09 f0       	breq	.+2      	; 0x163a <PWM_vInit+0x674>
    1638:	00 c1       	rjmp	.+512    	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    163a:	e9 81       	ldd	r30, Y+1	; 0x01
    163c:	fa 81       	ldd	r31, Y+2	; 0x02
    163e:	83 81       	ldd	r24, Z+3	; 0x03
    1640:	81 30       	cpi	r24, 0x01	; 1
    1642:	49 f4       	brne	.+18     	; 0x1656 <PWM_vInit+0x690>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1644:	af e4       	ldi	r26, 0x4F	; 79
    1646:	b0 e0       	ldi	r27, 0x00	; 0
    1648:	ef e4       	ldi	r30, 0x4F	; 79
    164a:	f0 e0       	ldi	r31, 0x00	; 0
    164c:	80 81       	ld	r24, Z
    164e:	8f 7c       	andi	r24, 0xCF	; 207
    1650:	80 62       	ori	r24, 0x20	; 32
    1652:	8c 93       	st	X, r24
    1654:	f2 c0       	rjmp	.+484    	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1656:	e9 81       	ldd	r30, Y+1	; 0x01
    1658:	fa 81       	ldd	r31, Y+2	; 0x02
    165a:	83 81       	ldd	r24, Z+3	; 0x03
    165c:	88 23       	and	r24, r24
    165e:	09 f0       	breq	.+2      	; 0x1662 <PWM_vInit+0x69c>
    1660:	ec c0       	rjmp	.+472    	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1662:	af e4       	ldi	r26, 0x4F	; 79
    1664:	b0 e0       	ldi	r27, 0x00	; 0
    1666:	ef e4       	ldi	r30, 0x4F	; 79
    1668:	f0 e0       	ldi	r31, 0x00	; 0
    166a:	80 81       	ld	r24, Z
    166c:	80 63       	ori	r24, 0x30	; 48
    166e:	8c 93       	st	X, r24
    1670:	e4 c0       	rjmp	.+456    	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_FastICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    1672:	af e4       	ldi	r26, 0x4F	; 79
    1674:	b0 e0       	ldi	r27, 0x00	; 0
    1676:	ef e4       	ldi	r30, 0x4F	; 79
    1678:	f0 e0       	ldi	r31, 0x00	; 0
    167a:	80 81       	ld	r24, Z
    167c:	8c 7f       	andi	r24, 0xFC	; 252
    167e:	82 60       	ori	r24, 0x02	; 2
    1680:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    1682:	ae e4       	ldi	r26, 0x4E	; 78
    1684:	b0 e0       	ldi	r27, 0x00	; 0
    1686:	ee e4       	ldi	r30, 0x4E	; 78
    1688:	f0 e0       	ldi	r31, 0x00	; 0
    168a:	80 81       	ld	r24, Z
    168c:	88 61       	ori	r24, 0x18	; 24
    168e:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1690:	e9 81       	ldd	r30, Y+1	; 0x01
    1692:	fa 81       	ldd	r31, Y+2	; 0x02
    1694:	82 81       	ldd	r24, Z+2	; 0x02
    1696:	81 30       	cpi	r24, 0x01	; 1
    1698:	41 f4       	brne	.+16     	; 0x16aa <PWM_vInit+0x6e4>
				TIMSK_REG |= 0x3C;
    169a:	a9 e5       	ldi	r26, 0x59	; 89
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e9 e5       	ldi	r30, 0x59	; 89
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	8c 63       	ori	r24, 0x3C	; 60
    16a6:	8c 93       	st	X, r24
    16a8:	c8 c0       	rjmp	.+400    	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    16aa:	e9 81       	ldd	r30, Y+1	; 0x01
    16ac:	fa 81       	ldd	r31, Y+2	; 0x02
    16ae:	82 81       	ldd	r24, Z+2	; 0x02
    16b0:	88 23       	and	r24, r24
    16b2:	09 f0       	breq	.+2      	; 0x16b6 <PWM_vInit+0x6f0>
    16b4:	c2 c0       	rjmp	.+388    	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    16b6:	e9 81       	ldd	r30, Y+1	; 0x01
    16b8:	fa 81       	ldd	r31, Y+2	; 0x02
    16ba:	83 81       	ldd	r24, Z+3	; 0x03
    16bc:	81 30       	cpi	r24, 0x01	; 1
    16be:	49 f4       	brne	.+18     	; 0x16d2 <PWM_vInit+0x70c>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    16c0:	af e4       	ldi	r26, 0x4F	; 79
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	ef e4       	ldi	r30, 0x4F	; 79
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	8f 7c       	andi	r24, 0xCF	; 207
    16cc:	80 62       	ori	r24, 0x20	; 32
    16ce:	8c 93       	st	X, r24
    16d0:	b4 c0       	rjmp	.+360    	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    16d2:	e9 81       	ldd	r30, Y+1	; 0x01
    16d4:	fa 81       	ldd	r31, Y+2	; 0x02
    16d6:	83 81       	ldd	r24, Z+3	; 0x03
    16d8:	88 23       	and	r24, r24
    16da:	09 f0       	breq	.+2      	; 0x16de <PWM_vInit+0x718>
    16dc:	ae c0       	rjmp	.+348    	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    16de:	af e4       	ldi	r26, 0x4F	; 79
    16e0:	b0 e0       	ldi	r27, 0x00	; 0
    16e2:	ef e4       	ldi	r30, 0x4F	; 79
    16e4:	f0 e0       	ldi	r31, 0x00	; 0
    16e6:	80 81       	ld	r24, Z
    16e8:	80 63       	ori	r24, 0x30	; 48
    16ea:	8c 93       	st	X, r24
    16ec:	a6 c0       	rjmp	.+332    	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_FastOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    16ee:	af e4       	ldi	r26, 0x4F	; 79
    16f0:	b0 e0       	ldi	r27, 0x00	; 0
    16f2:	ef e4       	ldi	r30, 0x4F	; 79
    16f4:	f0 e0       	ldi	r31, 0x00	; 0
    16f6:	80 81       	ld	r24, Z
    16f8:	83 60       	ori	r24, 0x03	; 3
    16fa:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    16fc:	ae e4       	ldi	r26, 0x4E	; 78
    16fe:	b0 e0       	ldi	r27, 0x00	; 0
    1700:	ee e4       	ldi	r30, 0x4E	; 78
    1702:	f0 e0       	ldi	r31, 0x00	; 0
    1704:	80 81       	ld	r24, Z
    1706:	88 61       	ori	r24, 0x18	; 24
    1708:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    170a:	e9 81       	ldd	r30, Y+1	; 0x01
    170c:	fa 81       	ldd	r31, Y+2	; 0x02
    170e:	82 81       	ldd	r24, Z+2	; 0x02
    1710:	81 30       	cpi	r24, 0x01	; 1
    1712:	41 f4       	brne	.+16     	; 0x1724 <PWM_vInit+0x75e>
				TIMSK_REG |= 0x3C;
    1714:	a9 e5       	ldi	r26, 0x59	; 89
    1716:	b0 e0       	ldi	r27, 0x00	; 0
    1718:	e9 e5       	ldi	r30, 0x59	; 89
    171a:	f0 e0       	ldi	r31, 0x00	; 0
    171c:	80 81       	ld	r24, Z
    171e:	8c 63       	ori	r24, 0x3C	; 60
    1720:	8c 93       	st	X, r24
    1722:	8b c0       	rjmp	.+278    	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1724:	e9 81       	ldd	r30, Y+1	; 0x01
    1726:	fa 81       	ldd	r31, Y+2	; 0x02
    1728:	82 81       	ldd	r24, Z+2	; 0x02
    172a:	88 23       	and	r24, r24
    172c:	09 f0       	breq	.+2      	; 0x1730 <PWM_vInit+0x76a>
    172e:	85 c0       	rjmp	.+266    	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1730:	e9 81       	ldd	r30, Y+1	; 0x01
    1732:	fa 81       	ldd	r31, Y+2	; 0x02
    1734:	83 81       	ldd	r24, Z+3	; 0x03
    1736:	81 30       	cpi	r24, 0x01	; 1
    1738:	49 f4       	brne	.+18     	; 0x174c <PWM_vInit+0x786>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    173a:	af e4       	ldi	r26, 0x4F	; 79
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	ef e4       	ldi	r30, 0x4F	; 79
    1740:	f0 e0       	ldi	r31, 0x00	; 0
    1742:	80 81       	ld	r24, Z
    1744:	8f 7c       	andi	r24, 0xCF	; 207
    1746:	80 62       	ori	r24, 0x20	; 32
    1748:	8c 93       	st	X, r24
    174a:	77 c0       	rjmp	.+238    	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    174c:	e9 81       	ldd	r30, Y+1	; 0x01
    174e:	fa 81       	ldd	r31, Y+2	; 0x02
    1750:	83 81       	ldd	r24, Z+3	; 0x03
    1752:	88 23       	and	r24, r24
    1754:	09 f0       	breq	.+2      	; 0x1758 <PWM_vInit+0x792>
    1756:	71 c0       	rjmp	.+226    	; 0x183a <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1758:	af e4       	ldi	r26, 0x4F	; 79
    175a:	b0 e0       	ldi	r27, 0x00	; 0
    175c:	ef e4       	ldi	r30, 0x4F	; 79
    175e:	f0 e0       	ldi	r31, 0x00	; 0
    1760:	80 81       	ld	r24, Z
    1762:	80 63       	ori	r24, 0x30	; 48
    1764:	8c 93       	st	X, r24
    1766:	69 c0       	rjmp	.+210    	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_PhaseCorrect:
			TCCR2_REG = (TCCR2_REG & 0xB7) | 0x40;
    1768:	a5 e4       	ldi	r26, 0x45	; 69
    176a:	b0 e0       	ldi	r27, 0x00	; 0
    176c:	e5 e4       	ldi	r30, 0x45	; 69
    176e:	f0 e0       	ldi	r31, 0x00	; 0
    1770:	80 81       	ld	r24, Z
    1772:	87 7b       	andi	r24, 0xB7	; 183
    1774:	80 64       	ori	r24, 0x40	; 64
    1776:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1778:	e9 81       	ldd	r30, Y+1	; 0x01
    177a:	fa 81       	ldd	r31, Y+2	; 0x02
    177c:	82 81       	ldd	r24, Z+2	; 0x02
    177e:	81 30       	cpi	r24, 0x01	; 1
    1780:	41 f4       	brne	.+16     	; 0x1792 <PWM_vInit+0x7cc>
				TIMSK_REG |= 0xC0;
    1782:	a9 e5       	ldi	r26, 0x59	; 89
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e9 e5       	ldi	r30, 0x59	; 89
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	80 6c       	ori	r24, 0xC0	; 192
    178e:	8c 93       	st	X, r24
    1790:	54 c0       	rjmp	.+168    	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1792:	e9 81       	ldd	r30, Y+1	; 0x01
    1794:	fa 81       	ldd	r31, Y+2	; 0x02
    1796:	82 81       	ldd	r24, Z+2	; 0x02
    1798:	88 23       	and	r24, r24
    179a:	09 f0       	breq	.+2      	; 0x179e <PWM_vInit+0x7d8>
    179c:	4e c0       	rjmp	.+156    	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    179e:	e9 81       	ldd	r30, Y+1	; 0x01
    17a0:	fa 81       	ldd	r31, Y+2	; 0x02
    17a2:	83 81       	ldd	r24, Z+3	; 0x03
    17a4:	81 30       	cpi	r24, 0x01	; 1
    17a6:	49 f4       	brne	.+18     	; 0x17ba <PWM_vInit+0x7f4>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x20;
    17a8:	a5 e4       	ldi	r26, 0x45	; 69
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	ef e4       	ldi	r30, 0x4F	; 79
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	8f 7c       	andi	r24, 0xCF	; 207
    17b4:	80 62       	ori	r24, 0x20	; 32
    17b6:	8c 93       	st	X, r24
    17b8:	40 c0       	rjmp	.+128    	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    17ba:	e9 81       	ldd	r30, Y+1	; 0x01
    17bc:	fa 81       	ldd	r31, Y+2	; 0x02
    17be:	83 81       	ldd	r24, Z+3	; 0x03
    17c0:	88 23       	and	r24, r24
    17c2:	d9 f5       	brne	.+118    	; 0x183a <PWM_vInit+0x874>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x30;
    17c4:	a5 e4       	ldi	r26, 0x45	; 69
    17c6:	b0 e0       	ldi	r27, 0x00	; 0
    17c8:	ef e4       	ldi	r30, 0x4F	; 79
    17ca:	f0 e0       	ldi	r31, 0x00	; 0
    17cc:	80 81       	ld	r24, Z
    17ce:	80 63       	ori	r24, 0x30	; 48
    17d0:	8c 93       	st	X, r24
    17d2:	33 c0       	rjmp	.+102    	; 0x183a <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_FastPWM:
			TCCR2_REG = (TCCR2_REG & 0xB7) | 0x48;
    17d4:	a5 e4       	ldi	r26, 0x45	; 69
    17d6:	b0 e0       	ldi	r27, 0x00	; 0
    17d8:	e5 e4       	ldi	r30, 0x45	; 69
    17da:	f0 e0       	ldi	r31, 0x00	; 0
    17dc:	80 81       	ld	r24, Z
    17de:	88 64       	ori	r24, 0x48	; 72
    17e0:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    17e2:	e9 81       	ldd	r30, Y+1	; 0x01
    17e4:	fa 81       	ldd	r31, Y+2	; 0x02
    17e6:	82 81       	ldd	r24, Z+2	; 0x02
    17e8:	81 30       	cpi	r24, 0x01	; 1
    17ea:	41 f4       	brne	.+16     	; 0x17fc <PWM_vInit+0x836>
				TIMSK_REG |= 0xC0;
    17ec:	a9 e5       	ldi	r26, 0x59	; 89
    17ee:	b0 e0       	ldi	r27, 0x00	; 0
    17f0:	e9 e5       	ldi	r30, 0x59	; 89
    17f2:	f0 e0       	ldi	r31, 0x00	; 0
    17f4:	80 81       	ld	r24, Z
    17f6:	80 6c       	ori	r24, 0xC0	; 192
    17f8:	8c 93       	st	X, r24
    17fa:	1f c0       	rjmp	.+62     	; 0x183a <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    17fc:	e9 81       	ldd	r30, Y+1	; 0x01
    17fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1800:	82 81       	ldd	r24, Z+2	; 0x02
    1802:	88 23       	and	r24, r24
    1804:	d1 f4       	brne	.+52     	; 0x183a <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1806:	e9 81       	ldd	r30, Y+1	; 0x01
    1808:	fa 81       	ldd	r31, Y+2	; 0x02
    180a:	83 81       	ldd	r24, Z+3	; 0x03
    180c:	81 30       	cpi	r24, 0x01	; 1
    180e:	49 f4       	brne	.+18     	; 0x1822 <PWM_vInit+0x85c>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1810:	a5 e4       	ldi	r26, 0x45	; 69
    1812:	b0 e0       	ldi	r27, 0x00	; 0
    1814:	ef e4       	ldi	r30, 0x4F	; 79
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	80 81       	ld	r24, Z
    181a:	8f 7c       	andi	r24, 0xCF	; 207
    181c:	80 62       	ori	r24, 0x20	; 32
    181e:	8c 93       	st	X, r24
    1820:	0c c0       	rjmp	.+24     	; 0x183a <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1822:	e9 81       	ldd	r30, Y+1	; 0x01
    1824:	fa 81       	ldd	r31, Y+2	; 0x02
    1826:	83 81       	ldd	r24, Z+3	; 0x03
    1828:	88 23       	and	r24, r24
    182a:	39 f4       	brne	.+14     	; 0x183a <PWM_vInit+0x874>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x30;
    182c:	a5 e4       	ldi	r26, 0x45	; 69
    182e:	b0 e0       	ldi	r27, 0x00	; 0
    1830:	ef e4       	ldi	r30, 0x4F	; 79
    1832:	f0 e0       	ldi	r31, 0x00	; 0
    1834:	80 81       	ld	r24, Z
    1836:	80 63       	ori	r24, 0x30	; 48
    1838:	8c 93       	st	X, r24
			else{ /* Do Nothing */ }
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    183a:	0f 90       	pop	r0
    183c:	0f 90       	pop	r0
    183e:	0f 90       	pop	r0
    1840:	0f 90       	pop	r0
    1842:	cf 91       	pop	r28
    1844:	df 91       	pop	r29
    1846:	08 95       	ret

00001848 <PWM_vSetICR>:

void PWM_vSetICR(const PWM_cfg_t *PWM, u16 Copy_u16ICRValue){
    1848:	df 93       	push	r29
    184a:	cf 93       	push	r28
    184c:	00 d0       	rcall	.+0      	; 0x184e <PWM_vSetICR+0x6>
    184e:	00 d0       	rcall	.+0      	; 0x1850 <PWM_vSetICR+0x8>
    1850:	cd b7       	in	r28, 0x3d	; 61
    1852:	de b7       	in	r29, 0x3e	; 62
    1854:	9a 83       	std	Y+2, r25	; 0x02
    1856:	89 83       	std	Y+1, r24	; 0x01
    1858:	7c 83       	std	Y+4, r23	; 0x04
    185a:	6b 83       	std	Y+3, r22	; 0x03
	if(PWM != NULL){
    185c:	89 81       	ldd	r24, Y+1	; 0x01
    185e:	9a 81       	ldd	r25, Y+2	; 0x02
    1860:	00 97       	sbiw	r24, 0x00	; 0
    1862:	79 f0       	breq	.+30     	; 0x1882 <PWM_vSetICR+0x3a>
		switch(PWM->PWM_TimerChannel){
    1864:	e9 81       	ldd	r30, Y+1	; 0x01
    1866:	fa 81       	ldd	r31, Y+2	; 0x02
    1868:	80 81       	ld	r24, Z
    186a:	88 2f       	mov	r24, r24
    186c:	90 e0       	ldi	r25, 0x00	; 0
    186e:	02 97       	sbiw	r24, 0x02	; 2
    1870:	8c 30       	cpi	r24, 0x0C	; 12
    1872:	91 05       	cpc	r25, r1
    1874:	30 f4       	brcc	.+12     	; 0x1882 <PWM_vSetICR+0x3a>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			ICR1_REG = Copy_u16ICRValue;
    1876:	e6 e4       	ldi	r30, 0x46	; 70
    1878:	f0 e0       	ldi	r31, 0x00	; 0
    187a:	8b 81       	ldd	r24, Y+3	; 0x03
    187c:	9c 81       	ldd	r25, Y+4	; 0x04
    187e:	91 83       	std	Z+1, r25	; 0x01
    1880:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    1882:	0f 90       	pop	r0
    1884:	0f 90       	pop	r0
    1886:	0f 90       	pop	r0
    1888:	0f 90       	pop	r0
    188a:	cf 91       	pop	r28
    188c:	df 91       	pop	r29
    188e:	08 95       	ret

00001890 <PWM_vSetOCR>:

void PWM_vSetOCR(const PWM_cfg_t *PWM, u16 Copy_u16OCRValue){
    1890:	df 93       	push	r29
    1892:	cf 93       	push	r28
    1894:	00 d0       	rcall	.+0      	; 0x1896 <PWM_vSetOCR+0x6>
    1896:	00 d0       	rcall	.+0      	; 0x1898 <PWM_vSetOCR+0x8>
    1898:	00 d0       	rcall	.+0      	; 0x189a <PWM_vSetOCR+0xa>
    189a:	cd b7       	in	r28, 0x3d	; 61
    189c:	de b7       	in	r29, 0x3e	; 62
    189e:	9a 83       	std	Y+2, r25	; 0x02
    18a0:	89 83       	std	Y+1, r24	; 0x01
    18a2:	7c 83       	std	Y+4, r23	; 0x04
    18a4:	6b 83       	std	Y+3, r22	; 0x03
	if(PWM != NULL){
    18a6:	89 81       	ldd	r24, Y+1	; 0x01
    18a8:	9a 81       	ldd	r25, Y+2	; 0x02
    18aa:	00 97       	sbiw	r24, 0x00	; 0
    18ac:	61 f1       	breq	.+88     	; 0x1906 <PWM_vSetOCR+0x76>
		switch(PWM->PWM_TimerChannel){
    18ae:	e9 81       	ldd	r30, Y+1	; 0x01
    18b0:	fa 81       	ldd	r31, Y+2	; 0x02
    18b2:	80 81       	ld	r24, Z
    18b4:	28 2f       	mov	r18, r24
    18b6:	30 e0       	ldi	r19, 0x00	; 0
    18b8:	3e 83       	std	Y+6, r19	; 0x06
    18ba:	2d 83       	std	Y+5, r18	; 0x05
    18bc:	8d 81       	ldd	r24, Y+5	; 0x05
    18be:	9e 81       	ldd	r25, Y+6	; 0x06
    18c0:	8e 30       	cpi	r24, 0x0E	; 14
    18c2:	91 05       	cpc	r25, r1
    18c4:	54 f4       	brge	.+20     	; 0x18da <PWM_vSetOCR+0x4a>
    18c6:	2d 81       	ldd	r18, Y+5	; 0x05
    18c8:	3e 81       	ldd	r19, Y+6	; 0x06
    18ca:	22 30       	cpi	r18, 0x02	; 2
    18cc:	31 05       	cpc	r19, r1
    18ce:	84 f4       	brge	.+32     	; 0x18f0 <PWM_vSetOCR+0x60>
    18d0:	8d 81       	ldd	r24, Y+5	; 0x05
    18d2:	9e 81       	ldd	r25, Y+6	; 0x06
    18d4:	99 23       	and	r25, r25
    18d6:	bc f0       	brlt	.+46     	; 0x1906 <PWM_vSetOCR+0x76>
    18d8:	06 c0       	rjmp	.+12     	; 0x18e6 <PWM_vSetOCR+0x56>
    18da:	2d 81       	ldd	r18, Y+5	; 0x05
    18dc:	3e 81       	ldd	r19, Y+6	; 0x06
    18de:	20 31       	cpi	r18, 0x10	; 16
    18e0:	31 05       	cpc	r19, r1
    18e2:	8c f4       	brge	.+34     	; 0x1906 <PWM_vSetOCR+0x76>
    18e4:	0c c0       	rjmp	.+24     	; 0x18fe <PWM_vSetOCR+0x6e>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			OCR0_REG = (u8)Copy_u16OCRValue;
    18e6:	ec e5       	ldi	r30, 0x5C	; 92
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	8b 81       	ldd	r24, Y+3	; 0x03
    18ec:	80 83       	st	Z, r24
    18ee:	0b c0       	rjmp	.+22     	; 0x1906 <PWM_vSetOCR+0x76>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			OCR1A_REG = Copy_u16OCRValue;
    18f0:	ea e4       	ldi	r30, 0x4A	; 74
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	8b 81       	ldd	r24, Y+3	; 0x03
    18f6:	9c 81       	ldd	r25, Y+4	; 0x04
    18f8:	91 83       	std	Z+1, r25	; 0x01
    18fa:	80 83       	st	Z, r24
    18fc:	04 c0       	rjmp	.+8      	; 0x1906 <PWM_vSetOCR+0x76>
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			OCR2_REG = (u8)Copy_u16OCRValue;
    18fe:	e3 e4       	ldi	r30, 0x43	; 67
    1900:	f0 e0       	ldi	r31, 0x00	; 0
    1902:	8b 81       	ldd	r24, Y+3	; 0x03
    1904:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    1906:	26 96       	adiw	r28, 0x06	; 6
    1908:	0f b6       	in	r0, 0x3f	; 63
    190a:	f8 94       	cli
    190c:	de bf       	out	0x3e, r29	; 62
    190e:	0f be       	out	0x3f, r0	; 63
    1910:	cd bf       	out	0x3d, r28	; 61
    1912:	cf 91       	pop	r28
    1914:	df 91       	pop	r29
    1916:	08 95       	ret

00001918 <PWM_vStart>:

void PWM_vStart(const PWM_cfg_t *PWM){
    1918:	df 93       	push	r29
    191a:	cf 93       	push	r28
    191c:	cd b7       	in	r28, 0x3d	; 61
    191e:	de b7       	in	r29, 0x3e	; 62
    1920:	2a 97       	sbiw	r28, 0x0a	; 10
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	f8 94       	cli
    1926:	de bf       	out	0x3e, r29	; 62
    1928:	0f be       	out	0x3f, r0	; 63
    192a:	cd bf       	out	0x3d, r28	; 61
    192c:	9a 83       	std	Y+2, r25	; 0x02
    192e:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    1930:	89 81       	ldd	r24, Y+1	; 0x01
    1932:	9a 81       	ldd	r25, Y+2	; 0x02
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	09 f4       	brne	.+2      	; 0x193a <PWM_vStart+0x22>
    1938:	98 c1       	rjmp	.+816    	; 0x1c6a <PWM_vStart+0x352>
		switch(PWM->PWM_TimerChannel){
    193a:	e9 81       	ldd	r30, Y+1	; 0x01
    193c:	fa 81       	ldd	r31, Y+2	; 0x02
    193e:	80 81       	ld	r24, Z
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	3a 87       	std	Y+10, r19	; 0x0a
    1946:	29 87       	std	Y+9, r18	; 0x09
    1948:	89 85       	ldd	r24, Y+9	; 0x09
    194a:	9a 85       	ldd	r25, Y+10	; 0x0a
    194c:	8e 30       	cpi	r24, 0x0E	; 14
    194e:	91 05       	cpc	r25, r1
    1950:	64 f4       	brge	.+24     	; 0x196a <PWM_vStart+0x52>
    1952:	29 85       	ldd	r18, Y+9	; 0x09
    1954:	3a 85       	ldd	r19, Y+10	; 0x0a
    1956:	22 30       	cpi	r18, 0x02	; 2
    1958:	31 05       	cpc	r19, r1
    195a:	0c f0       	brlt	.+2      	; 0x195e <PWM_vStart+0x46>
    195c:	8b c0       	rjmp	.+278    	; 0x1a74 <PWM_vStart+0x15c>
    195e:	89 85       	ldd	r24, Y+9	; 0x09
    1960:	9a 85       	ldd	r25, Y+10	; 0x0a
    1962:	99 23       	and	r25, r25
    1964:	0c f4       	brge	.+2      	; 0x1968 <PWM_vStart+0x50>
    1966:	81 c1       	rjmp	.+770    	; 0x1c6a <PWM_vStart+0x352>
    1968:	07 c0       	rjmp	.+14     	; 0x1978 <PWM_vStart+0x60>
    196a:	29 85       	ldd	r18, Y+9	; 0x09
    196c:	3a 85       	ldd	r19, Y+10	; 0x0a
    196e:	20 31       	cpi	r18, 0x10	; 16
    1970:	31 05       	cpc	r19, r1
    1972:	0c f0       	brlt	.+2      	; 0x1976 <PWM_vStart+0x5e>
    1974:	7a c1       	rjmp	.+756    	; 0x1c6a <PWM_vStart+0x352>
    1976:	fc c0       	rjmp	.+504    	; 0x1b70 <PWM_vStart+0x258>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			switch(PWM->PWM_TimerPrescale){
    1978:	e9 81       	ldd	r30, Y+1	; 0x01
    197a:	fa 81       	ldd	r31, Y+2	; 0x02
    197c:	81 81       	ldd	r24, Z+1	; 0x01
    197e:	28 2f       	mov	r18, r24
    1980:	30 e0       	ldi	r19, 0x00	; 0
    1982:	38 87       	std	Y+8, r19	; 0x08
    1984:	2f 83       	std	Y+7, r18	; 0x07
    1986:	8f 81       	ldd	r24, Y+7	; 0x07
    1988:	98 85       	ldd	r25, Y+8	; 0x08
    198a:	83 30       	cpi	r24, 0x03	; 3
    198c:	91 05       	cpc	r25, r1
    198e:	09 f4       	brne	.+2      	; 0x1992 <PWM_vStart+0x7a>
    1990:	45 c0       	rjmp	.+138    	; 0x1a1c <PWM_vStart+0x104>
    1992:	2f 81       	ldd	r18, Y+7	; 0x07
    1994:	38 85       	ldd	r19, Y+8	; 0x08
    1996:	24 30       	cpi	r18, 0x04	; 4
    1998:	31 05       	cpc	r19, r1
    199a:	7c f4       	brge	.+30     	; 0x19ba <PWM_vStart+0xa2>
    199c:	8f 81       	ldd	r24, Y+7	; 0x07
    199e:	98 85       	ldd	r25, Y+8	; 0x08
    19a0:	81 30       	cpi	r24, 0x01	; 1
    19a2:	91 05       	cpc	r25, r1
    19a4:	49 f1       	breq	.+82     	; 0x19f8 <PWM_vStart+0xe0>
    19a6:	2f 81       	ldd	r18, Y+7	; 0x07
    19a8:	38 85       	ldd	r19, Y+8	; 0x08
    19aa:	22 30       	cpi	r18, 0x02	; 2
    19ac:	31 05       	cpc	r19, r1
    19ae:	6c f5       	brge	.+90     	; 0x1a0a <PWM_vStart+0xf2>
    19b0:	8f 81       	ldd	r24, Y+7	; 0x07
    19b2:	98 85       	ldd	r25, Y+8	; 0x08
    19b4:	00 97       	sbiw	r24, 0x00	; 0
    19b6:	c1 f0       	breq	.+48     	; 0x19e8 <PWM_vStart+0xd0>
    19b8:	58 c1       	rjmp	.+688    	; 0x1c6a <PWM_vStart+0x352>
    19ba:	2f 81       	ldd	r18, Y+7	; 0x07
    19bc:	38 85       	ldd	r19, Y+8	; 0x08
    19be:	25 30       	cpi	r18, 0x05	; 5
    19c0:	31 05       	cpc	r19, r1
    19c2:	09 f4       	brne	.+2      	; 0x19c6 <PWM_vStart+0xae>
    19c4:	3d c0       	rjmp	.+122    	; 0x1a40 <PWM_vStart+0x128>
    19c6:	8f 81       	ldd	r24, Y+7	; 0x07
    19c8:	98 85       	ldd	r25, Y+8	; 0x08
    19ca:	85 30       	cpi	r24, 0x05	; 5
    19cc:	91 05       	cpc	r25, r1
    19ce:	7c f1       	brlt	.+94     	; 0x1a2e <PWM_vStart+0x116>
    19d0:	2f 81       	ldd	r18, Y+7	; 0x07
    19d2:	38 85       	ldd	r19, Y+8	; 0x08
    19d4:	26 30       	cpi	r18, 0x06	; 6
    19d6:	31 05       	cpc	r19, r1
    19d8:	e1 f1       	breq	.+120    	; 0x1a52 <PWM_vStart+0x13a>
    19da:	8f 81       	ldd	r24, Y+7	; 0x07
    19dc:	98 85       	ldd	r25, Y+8	; 0x08
    19de:	87 30       	cpi	r24, 0x07	; 7
    19e0:	91 05       	cpc	r25, r1
    19e2:	09 f4       	brne	.+2      	; 0x19e6 <PWM_vStart+0xce>
    19e4:	3f c0       	rjmp	.+126    	; 0x1a64 <PWM_vStart+0x14c>
    19e6:	41 c1       	rjmp	.+642    	; 0x1c6a <PWM_vStart+0x352>
			case PRE_NO_CLK:
				TCCR0_REG = (TCCR0_REG&0xF8);
    19e8:	a3 e5       	ldi	r26, 0x53	; 83
    19ea:	b0 e0       	ldi	r27, 0x00	; 0
    19ec:	e3 e5       	ldi	r30, 0x53	; 83
    19ee:	f0 e0       	ldi	r31, 0x00	; 0
    19f0:	80 81       	ld	r24, Z
    19f2:	88 7f       	andi	r24, 0xF8	; 248
    19f4:	8c 93       	st	X, r24
    19f6:	39 c1       	rjmp	.+626    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_0:
				TCCR0_REG = (TCCR0_REG&0xF8) | 1;
    19f8:	a3 e5       	ldi	r26, 0x53	; 83
    19fa:	b0 e0       	ldi	r27, 0x00	; 0
    19fc:	e3 e5       	ldi	r30, 0x53	; 83
    19fe:	f0 e0       	ldi	r31, 0x00	; 0
    1a00:	80 81       	ld	r24, Z
    1a02:	88 7f       	andi	r24, 0xF8	; 248
    1a04:	81 60       	ori	r24, 0x01	; 1
    1a06:	8c 93       	st	X, r24
    1a08:	30 c1       	rjmp	.+608    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_8:
				TCCR0_REG = (TCCR0_REG&0xF8) | 2;
    1a0a:	a3 e5       	ldi	r26, 0x53	; 83
    1a0c:	b0 e0       	ldi	r27, 0x00	; 0
    1a0e:	e3 e5       	ldi	r30, 0x53	; 83
    1a10:	f0 e0       	ldi	r31, 0x00	; 0
    1a12:	80 81       	ld	r24, Z
    1a14:	88 7f       	andi	r24, 0xF8	; 248
    1a16:	82 60       	ori	r24, 0x02	; 2
    1a18:	8c 93       	st	X, r24
    1a1a:	27 c1       	rjmp	.+590    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_64:
				TCCR0_REG = (TCCR0_REG&0xF8) | 3;
    1a1c:	a3 e5       	ldi	r26, 0x53	; 83
    1a1e:	b0 e0       	ldi	r27, 0x00	; 0
    1a20:	e3 e5       	ldi	r30, 0x53	; 83
    1a22:	f0 e0       	ldi	r31, 0x00	; 0
    1a24:	80 81       	ld	r24, Z
    1a26:	88 7f       	andi	r24, 0xF8	; 248
    1a28:	83 60       	ori	r24, 0x03	; 3
    1a2a:	8c 93       	st	X, r24
    1a2c:	1e c1       	rjmp	.+572    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_256:
				TCCR0_REG = (TCCR0_REG&0xF8) | 4;
    1a2e:	a3 e5       	ldi	r26, 0x53	; 83
    1a30:	b0 e0       	ldi	r27, 0x00	; 0
    1a32:	e3 e5       	ldi	r30, 0x53	; 83
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	80 81       	ld	r24, Z
    1a38:	88 7f       	andi	r24, 0xF8	; 248
    1a3a:	84 60       	ori	r24, 0x04	; 4
    1a3c:	8c 93       	st	X, r24
    1a3e:	15 c1       	rjmp	.+554    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_1024:
				TCCR0_REG = (TCCR0_REG&0xF8) | 5;
    1a40:	a3 e5       	ldi	r26, 0x53	; 83
    1a42:	b0 e0       	ldi	r27, 0x00	; 0
    1a44:	e3 e5       	ldi	r30, 0x53	; 83
    1a46:	f0 e0       	ldi	r31, 0x00	; 0
    1a48:	80 81       	ld	r24, Z
    1a4a:	88 7f       	andi	r24, 0xF8	; 248
    1a4c:	85 60       	ori	r24, 0x05	; 5
    1a4e:	8c 93       	st	X, r24
    1a50:	0c c1       	rjmp	.+536    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_EXT_FALLING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 6;
    1a52:	a3 e5       	ldi	r26, 0x53	; 83
    1a54:	b0 e0       	ldi	r27, 0x00	; 0
    1a56:	e3 e5       	ldi	r30, 0x53	; 83
    1a58:	f0 e0       	ldi	r31, 0x00	; 0
    1a5a:	80 81       	ld	r24, Z
    1a5c:	88 7f       	andi	r24, 0xF8	; 248
    1a5e:	86 60       	ori	r24, 0x06	; 6
    1a60:	8c 93       	st	X, r24
    1a62:	03 c1       	rjmp	.+518    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_EXT_RISING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 7;
    1a64:	a3 e5       	ldi	r26, 0x53	; 83
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e3 e5       	ldi	r30, 0x53	; 83
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	87 60       	ori	r24, 0x07	; 7
    1a70:	8c 93       	st	X, r24
    1a72:	fb c0       	rjmp	.+502    	; 0x1c6a <PWM_vStart+0x352>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			switch(PWM->PWM_TimerPrescale){
    1a74:	e9 81       	ldd	r30, Y+1	; 0x01
    1a76:	fa 81       	ldd	r31, Y+2	; 0x02
    1a78:	81 81       	ldd	r24, Z+1	; 0x01
    1a7a:	28 2f       	mov	r18, r24
    1a7c:	30 e0       	ldi	r19, 0x00	; 0
    1a7e:	3e 83       	std	Y+6, r19	; 0x06
    1a80:	2d 83       	std	Y+5, r18	; 0x05
    1a82:	8d 81       	ldd	r24, Y+5	; 0x05
    1a84:	9e 81       	ldd	r25, Y+6	; 0x06
    1a86:	83 30       	cpi	r24, 0x03	; 3
    1a88:	91 05       	cpc	r25, r1
    1a8a:	09 f4       	brne	.+2      	; 0x1a8e <PWM_vStart+0x176>
    1a8c:	45 c0       	rjmp	.+138    	; 0x1b18 <PWM_vStart+0x200>
    1a8e:	2d 81       	ldd	r18, Y+5	; 0x05
    1a90:	3e 81       	ldd	r19, Y+6	; 0x06
    1a92:	24 30       	cpi	r18, 0x04	; 4
    1a94:	31 05       	cpc	r19, r1
    1a96:	7c f4       	brge	.+30     	; 0x1ab6 <PWM_vStart+0x19e>
    1a98:	8d 81       	ldd	r24, Y+5	; 0x05
    1a9a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a9c:	81 30       	cpi	r24, 0x01	; 1
    1a9e:	91 05       	cpc	r25, r1
    1aa0:	49 f1       	breq	.+82     	; 0x1af4 <PWM_vStart+0x1dc>
    1aa2:	2d 81       	ldd	r18, Y+5	; 0x05
    1aa4:	3e 81       	ldd	r19, Y+6	; 0x06
    1aa6:	22 30       	cpi	r18, 0x02	; 2
    1aa8:	31 05       	cpc	r19, r1
    1aaa:	6c f5       	brge	.+90     	; 0x1b06 <PWM_vStart+0x1ee>
    1aac:	8d 81       	ldd	r24, Y+5	; 0x05
    1aae:	9e 81       	ldd	r25, Y+6	; 0x06
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	c1 f0       	breq	.+48     	; 0x1ae4 <PWM_vStart+0x1cc>
    1ab4:	da c0       	rjmp	.+436    	; 0x1c6a <PWM_vStart+0x352>
    1ab6:	2d 81       	ldd	r18, Y+5	; 0x05
    1ab8:	3e 81       	ldd	r19, Y+6	; 0x06
    1aba:	25 30       	cpi	r18, 0x05	; 5
    1abc:	31 05       	cpc	r19, r1
    1abe:	09 f4       	brne	.+2      	; 0x1ac2 <PWM_vStart+0x1aa>
    1ac0:	3d c0       	rjmp	.+122    	; 0x1b3c <PWM_vStart+0x224>
    1ac2:	8d 81       	ldd	r24, Y+5	; 0x05
    1ac4:	9e 81       	ldd	r25, Y+6	; 0x06
    1ac6:	85 30       	cpi	r24, 0x05	; 5
    1ac8:	91 05       	cpc	r25, r1
    1aca:	7c f1       	brlt	.+94     	; 0x1b2a <PWM_vStart+0x212>
    1acc:	2d 81       	ldd	r18, Y+5	; 0x05
    1ace:	3e 81       	ldd	r19, Y+6	; 0x06
    1ad0:	26 30       	cpi	r18, 0x06	; 6
    1ad2:	31 05       	cpc	r19, r1
    1ad4:	e1 f1       	breq	.+120    	; 0x1b4e <PWM_vStart+0x236>
    1ad6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ada:	87 30       	cpi	r24, 0x07	; 7
    1adc:	91 05       	cpc	r25, r1
    1ade:	09 f4       	brne	.+2      	; 0x1ae2 <PWM_vStart+0x1ca>
    1ae0:	3f c0       	rjmp	.+126    	; 0x1b60 <PWM_vStart+0x248>
    1ae2:	c3 c0       	rjmp	.+390    	; 0x1c6a <PWM_vStart+0x352>
			case PRE_NO_CLK:
				TCCR1B_REG = (TCCR1B_REG&0xF8);
    1ae4:	ae e4       	ldi	r26, 0x4E	; 78
    1ae6:	b0 e0       	ldi	r27, 0x00	; 0
    1ae8:	ee e4       	ldi	r30, 0x4E	; 78
    1aea:	f0 e0       	ldi	r31, 0x00	; 0
    1aec:	80 81       	ld	r24, Z
    1aee:	88 7f       	andi	r24, 0xF8	; 248
    1af0:	8c 93       	st	X, r24
    1af2:	bb c0       	rjmp	.+374    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_0:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
    1af4:	ae e4       	ldi	r26, 0x4E	; 78
    1af6:	b0 e0       	ldi	r27, 0x00	; 0
    1af8:	ee e4       	ldi	r30, 0x4E	; 78
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	80 81       	ld	r24, Z
    1afe:	88 7f       	andi	r24, 0xF8	; 248
    1b00:	81 60       	ori	r24, 0x01	; 1
    1b02:	8c 93       	st	X, r24
    1b04:	b2 c0       	rjmp	.+356    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_8:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 2;
    1b06:	ae e4       	ldi	r26, 0x4E	; 78
    1b08:	b0 e0       	ldi	r27, 0x00	; 0
    1b0a:	ee e4       	ldi	r30, 0x4E	; 78
    1b0c:	f0 e0       	ldi	r31, 0x00	; 0
    1b0e:	80 81       	ld	r24, Z
    1b10:	88 7f       	andi	r24, 0xF8	; 248
    1b12:	82 60       	ori	r24, 0x02	; 2
    1b14:	8c 93       	st	X, r24
    1b16:	a9 c0       	rjmp	.+338    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_64:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 3;
    1b18:	ae e4       	ldi	r26, 0x4E	; 78
    1b1a:	b0 e0       	ldi	r27, 0x00	; 0
    1b1c:	ee e4       	ldi	r30, 0x4E	; 78
    1b1e:	f0 e0       	ldi	r31, 0x00	; 0
    1b20:	80 81       	ld	r24, Z
    1b22:	88 7f       	andi	r24, 0xF8	; 248
    1b24:	83 60       	ori	r24, 0x03	; 3
    1b26:	8c 93       	st	X, r24
    1b28:	a0 c0       	rjmp	.+320    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_256:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 4;
    1b2a:	ae e4       	ldi	r26, 0x4E	; 78
    1b2c:	b0 e0       	ldi	r27, 0x00	; 0
    1b2e:	ee e4       	ldi	r30, 0x4E	; 78
    1b30:	f0 e0       	ldi	r31, 0x00	; 0
    1b32:	80 81       	ld	r24, Z
    1b34:	88 7f       	andi	r24, 0xF8	; 248
    1b36:	84 60       	ori	r24, 0x04	; 4
    1b38:	8c 93       	st	X, r24
    1b3a:	97 c0       	rjmp	.+302    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_1024:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 5;
    1b3c:	ae e4       	ldi	r26, 0x4E	; 78
    1b3e:	b0 e0       	ldi	r27, 0x00	; 0
    1b40:	ee e4       	ldi	r30, 0x4E	; 78
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	80 81       	ld	r24, Z
    1b46:	88 7f       	andi	r24, 0xF8	; 248
    1b48:	85 60       	ori	r24, 0x05	; 5
    1b4a:	8c 93       	st	X, r24
    1b4c:	8e c0       	rjmp	.+284    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_EXT_FALLING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 6;
    1b4e:	ae e4       	ldi	r26, 0x4E	; 78
    1b50:	b0 e0       	ldi	r27, 0x00	; 0
    1b52:	ee e4       	ldi	r30, 0x4E	; 78
    1b54:	f0 e0       	ldi	r31, 0x00	; 0
    1b56:	80 81       	ld	r24, Z
    1b58:	88 7f       	andi	r24, 0xF8	; 248
    1b5a:	86 60       	ori	r24, 0x06	; 6
    1b5c:	8c 93       	st	X, r24
    1b5e:	85 c0       	rjmp	.+266    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_EXT_RISING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 7;
    1b60:	ae e4       	ldi	r26, 0x4E	; 78
    1b62:	b0 e0       	ldi	r27, 0x00	; 0
    1b64:	ee e4       	ldi	r30, 0x4E	; 78
    1b66:	f0 e0       	ldi	r31, 0x00	; 0
    1b68:	80 81       	ld	r24, Z
    1b6a:	87 60       	ori	r24, 0x07	; 7
    1b6c:	8c 93       	st	X, r24
    1b6e:	7d c0       	rjmp	.+250    	; 0x1c6a <PWM_vStart+0x352>
			default: /* Do Nothing */ break;
			}
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			switch(PWM->PWM_TimerPrescale){
    1b70:	e9 81       	ldd	r30, Y+1	; 0x01
    1b72:	fa 81       	ldd	r31, Y+2	; 0x02
    1b74:	81 81       	ldd	r24, Z+1	; 0x01
    1b76:	28 2f       	mov	r18, r24
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	3c 83       	std	Y+4, r19	; 0x04
    1b7c:	2b 83       	std	Y+3, r18	; 0x03
    1b7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b80:	9c 81       	ldd	r25, Y+4	; 0x04
    1b82:	83 30       	cpi	r24, 0x03	; 3
    1b84:	91 05       	cpc	r25, r1
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <PWM_vStart+0x272>
    1b88:	4e c0       	rjmp	.+156    	; 0x1c26 <PWM_vStart+0x30e>
    1b8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1b8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1b8e:	24 30       	cpi	r18, 0x04	; 4
    1b90:	31 05       	cpc	r19, r1
    1b92:	7c f4       	brge	.+30     	; 0x1bb2 <PWM_vStart+0x29a>
    1b94:	8b 81       	ldd	r24, Y+3	; 0x03
    1b96:	9c 81       	ldd	r25, Y+4	; 0x04
    1b98:	81 30       	cpi	r24, 0x01	; 1
    1b9a:	91 05       	cpc	r25, r1
    1b9c:	49 f1       	breq	.+82     	; 0x1bf0 <PWM_vStart+0x2d8>
    1b9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ba0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba2:	22 30       	cpi	r18, 0x02	; 2
    1ba4:	31 05       	cpc	r19, r1
    1ba6:	6c f5       	brge	.+90     	; 0x1c02 <PWM_vStart+0x2ea>
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	00 97       	sbiw	r24, 0x00	; 0
    1bae:	c1 f0       	breq	.+48     	; 0x1be0 <PWM_vStart+0x2c8>
    1bb0:	5c c0       	rjmp	.+184    	; 0x1c6a <PWM_vStart+0x352>
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb6:	25 30       	cpi	r18, 0x05	; 5
    1bb8:	31 05       	cpc	r19, r1
    1bba:	09 f4       	brne	.+2      	; 0x1bbe <PWM_vStart+0x2a6>
    1bbc:	4f c0       	rjmp	.+158    	; 0x1c5c <PWM_vStart+0x344>
    1bbe:	8b 81       	ldd	r24, Y+3	; 0x03
    1bc0:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc2:	85 30       	cpi	r24, 0x05	; 5
    1bc4:	91 05       	cpc	r25, r1
    1bc6:	0c f4       	brge	.+2      	; 0x1bca <PWM_vStart+0x2b2>
    1bc8:	40 c0       	rjmp	.+128    	; 0x1c4a <PWM_vStart+0x332>
    1bca:	2b 81       	ldd	r18, Y+3	; 0x03
    1bcc:	3c 81       	ldd	r19, Y+4	; 0x04
    1bce:	28 30       	cpi	r18, 0x08	; 8
    1bd0:	31 05       	cpc	r19, r1
    1bd2:	01 f1       	breq	.+64     	; 0x1c14 <PWM_vStart+0x2fc>
    1bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd8:	89 30       	cpi	r24, 0x09	; 9
    1bda:	91 05       	cpc	r25, r1
    1bdc:	69 f1       	breq	.+90     	; 0x1c38 <PWM_vStart+0x320>
    1bde:	45 c0       	rjmp	.+138    	; 0x1c6a <PWM_vStart+0x352>
			case PRE_NO_CLK:
				TCCR2_REG = (TCCR2_REG&0xF8);
    1be0:	a5 e4       	ldi	r26, 0x45	; 69
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	e5 e4       	ldi	r30, 0x45	; 69
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	88 7f       	andi	r24, 0xF8	; 248
    1bec:	8c 93       	st	X, r24
    1bee:	3d c0       	rjmp	.+122    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_0:
				TCCR2_REG = (TCCR2_REG&0xF8) | 1;
    1bf0:	a5 e4       	ldi	r26, 0x45	; 69
    1bf2:	b0 e0       	ldi	r27, 0x00	; 0
    1bf4:	e5 e4       	ldi	r30, 0x45	; 69
    1bf6:	f0 e0       	ldi	r31, 0x00	; 0
    1bf8:	80 81       	ld	r24, Z
    1bfa:	88 7f       	andi	r24, 0xF8	; 248
    1bfc:	81 60       	ori	r24, 0x01	; 1
    1bfe:	8c 93       	st	X, r24
    1c00:	34 c0       	rjmp	.+104    	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_8:
				TCCR2_REG = (TCCR2_REG&0xF8) | 2;
    1c02:	a5 e4       	ldi	r26, 0x45	; 69
    1c04:	b0 e0       	ldi	r27, 0x00	; 0
    1c06:	e5 e4       	ldi	r30, 0x45	; 69
    1c08:	f0 e0       	ldi	r31, 0x00	; 0
    1c0a:	80 81       	ld	r24, Z
    1c0c:	88 7f       	andi	r24, 0xF8	; 248
    1c0e:	82 60       	ori	r24, 0x02	; 2
    1c10:	8c 93       	st	X, r24
    1c12:	2b c0       	rjmp	.+86     	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_32:
				TCCR2_REG = (TCCR2_REG&0xF8) | 3;
    1c14:	a5 e4       	ldi	r26, 0x45	; 69
    1c16:	b0 e0       	ldi	r27, 0x00	; 0
    1c18:	e5 e4       	ldi	r30, 0x45	; 69
    1c1a:	f0 e0       	ldi	r31, 0x00	; 0
    1c1c:	80 81       	ld	r24, Z
    1c1e:	88 7f       	andi	r24, 0xF8	; 248
    1c20:	83 60       	ori	r24, 0x03	; 3
    1c22:	8c 93       	st	X, r24
    1c24:	22 c0       	rjmp	.+68     	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_64:
				TCCR2_REG = (TCCR2_REG&0xF8) | 4;
    1c26:	a5 e4       	ldi	r26, 0x45	; 69
    1c28:	b0 e0       	ldi	r27, 0x00	; 0
    1c2a:	e5 e4       	ldi	r30, 0x45	; 69
    1c2c:	f0 e0       	ldi	r31, 0x00	; 0
    1c2e:	80 81       	ld	r24, Z
    1c30:	88 7f       	andi	r24, 0xF8	; 248
    1c32:	84 60       	ori	r24, 0x04	; 4
    1c34:	8c 93       	st	X, r24
    1c36:	19 c0       	rjmp	.+50     	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_128:
				TCCR2_REG = (TCCR2_REG&0xF8) | 5;
    1c38:	a5 e4       	ldi	r26, 0x45	; 69
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e5 e4       	ldi	r30, 0x45	; 69
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	88 7f       	andi	r24, 0xF8	; 248
    1c44:	85 60       	ori	r24, 0x05	; 5
    1c46:	8c 93       	st	X, r24
    1c48:	10 c0       	rjmp	.+32     	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_256:
				TCCR2_REG = (TCCR2_REG&0xF8) | 6;
    1c4a:	a5 e4       	ldi	r26, 0x45	; 69
    1c4c:	b0 e0       	ldi	r27, 0x00	; 0
    1c4e:	e5 e4       	ldi	r30, 0x45	; 69
    1c50:	f0 e0       	ldi	r31, 0x00	; 0
    1c52:	80 81       	ld	r24, Z
    1c54:	88 7f       	andi	r24, 0xF8	; 248
    1c56:	86 60       	ori	r24, 0x06	; 6
    1c58:	8c 93       	st	X, r24
    1c5a:	07 c0       	rjmp	.+14     	; 0x1c6a <PWM_vStart+0x352>
				break;
			case PRE_1024:
				TCCR2_REG = (TCCR2_REG&0xF8) | 7;
    1c5c:	a5 e4       	ldi	r26, 0x45	; 69
    1c5e:	b0 e0       	ldi	r27, 0x00	; 0
    1c60:	e5 e4       	ldi	r30, 0x45	; 69
    1c62:	f0 e0       	ldi	r31, 0x00	; 0
    1c64:	80 81       	ld	r24, Z
    1c66:	87 60       	ori	r24, 0x07	; 7
    1c68:	8c 93       	st	X, r24
			}
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    1c6a:	2a 96       	adiw	r28, 0x0a	; 10
    1c6c:	0f b6       	in	r0, 0x3f	; 63
    1c6e:	f8 94       	cli
    1c70:	de bf       	out	0x3e, r29	; 62
    1c72:	0f be       	out	0x3f, r0	; 63
    1c74:	cd bf       	out	0x3d, r28	; 61
    1c76:	cf 91       	pop	r28
    1c78:	df 91       	pop	r29
    1c7a:	08 95       	ret

00001c7c <PWM_vStop>:

void PWM_vStop(const PWM_cfg_t *PWM){
    1c7c:	df 93       	push	r29
    1c7e:	cf 93       	push	r28
    1c80:	00 d0       	rcall	.+0      	; 0x1c82 <PWM_vStop+0x6>
    1c82:	00 d0       	rcall	.+0      	; 0x1c84 <PWM_vStop+0x8>
    1c84:	cd b7       	in	r28, 0x3d	; 61
    1c86:	de b7       	in	r29, 0x3e	; 62
    1c88:	9a 83       	std	Y+2, r25	; 0x02
    1c8a:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    1c8c:	89 81       	ldd	r24, Y+1	; 0x01
    1c8e:	9a 81       	ldd	r25, Y+2	; 0x02
    1c90:	00 97       	sbiw	r24, 0x00	; 0
    1c92:	99 f1       	breq	.+102    	; 0x1cfa <PWM_vStop+0x7e>
		switch(PWM->PWM_TimerChannel){
    1c94:	e9 81       	ldd	r30, Y+1	; 0x01
    1c96:	fa 81       	ldd	r31, Y+2	; 0x02
    1c98:	80 81       	ld	r24, Z
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	3c 83       	std	Y+4, r19	; 0x04
    1ca0:	2b 83       	std	Y+3, r18	; 0x03
    1ca2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ca4:	9c 81       	ldd	r25, Y+4	; 0x04
    1ca6:	8e 30       	cpi	r24, 0x0E	; 14
    1ca8:	91 05       	cpc	r25, r1
    1caa:	54 f4       	brge	.+20     	; 0x1cc0 <PWM_vStop+0x44>
    1cac:	2b 81       	ldd	r18, Y+3	; 0x03
    1cae:	3c 81       	ldd	r19, Y+4	; 0x04
    1cb0:	22 30       	cpi	r18, 0x02	; 2
    1cb2:	31 05       	cpc	r19, r1
    1cb4:	9c f4       	brge	.+38     	; 0x1cdc <PWM_vStop+0x60>
    1cb6:	8b 81       	ldd	r24, Y+3	; 0x03
    1cb8:	9c 81       	ldd	r25, Y+4	; 0x04
    1cba:	99 23       	and	r25, r25
    1cbc:	f4 f0       	brlt	.+60     	; 0x1cfa <PWM_vStop+0x7e>
    1cbe:	06 c0       	rjmp	.+12     	; 0x1ccc <PWM_vStop+0x50>
    1cc0:	2b 81       	ldd	r18, Y+3	; 0x03
    1cc2:	3c 81       	ldd	r19, Y+4	; 0x04
    1cc4:	20 31       	cpi	r18, 0x10	; 16
    1cc6:	31 05       	cpc	r19, r1
    1cc8:	c4 f4       	brge	.+48     	; 0x1cfa <PWM_vStop+0x7e>
    1cca:	10 c0       	rjmp	.+32     	; 0x1cec <PWM_vStop+0x70>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			TCCR0_REG &= 0xF8;
    1ccc:	a3 e5       	ldi	r26, 0x53	; 83
    1cce:	b0 e0       	ldi	r27, 0x00	; 0
    1cd0:	e3 e5       	ldi	r30, 0x53	; 83
    1cd2:	f0 e0       	ldi	r31, 0x00	; 0
    1cd4:	80 81       	ld	r24, Z
    1cd6:	88 7f       	andi	r24, 0xF8	; 248
    1cd8:	8c 93       	st	X, r24
    1cda:	0f c0       	rjmp	.+30     	; 0x1cfa <PWM_vStop+0x7e>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			TCCR1B_REG &= 0xF8;
    1cdc:	ae e4       	ldi	r26, 0x4E	; 78
    1cde:	b0 e0       	ldi	r27, 0x00	; 0
    1ce0:	ee e4       	ldi	r30, 0x4E	; 78
    1ce2:	f0 e0       	ldi	r31, 0x00	; 0
    1ce4:	80 81       	ld	r24, Z
    1ce6:	88 7f       	andi	r24, 0xF8	; 248
    1ce8:	8c 93       	st	X, r24
    1cea:	07 c0       	rjmp	.+14     	; 0x1cfa <PWM_vStop+0x7e>
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			TCCR2_REG &= 0xF8;
    1cec:	a5 e4       	ldi	r26, 0x45	; 69
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e5 e4       	ldi	r30, 0x45	; 69
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	88 7f       	andi	r24, 0xF8	; 248
    1cf8:	8c 93       	st	X, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    1cfa:	0f 90       	pop	r0
    1cfc:	0f 90       	pop	r0
    1cfe:	0f 90       	pop	r0
    1d00:	0f 90       	pop	r0
    1d02:	cf 91       	pop	r28
    1d04:	df 91       	pop	r29
    1d06:	08 95       	ret

00001d08 <GIE_vEnableInterrupts>:
/*************************************************************************/

#include "GIE_interface.h"

// This function is responsible for enabling GIE for interrupts
void GIE_vEnableInterrupts(){
    1d08:	df 93       	push	r29
    1d0a:	cf 93       	push	r28
    1d0c:	cd b7       	in	r28, 0x3d	; 61
    1d0e:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, 7);
    1d10:	af e5       	ldi	r26, 0x5F	; 95
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	ef e5       	ldi	r30, 0x5F	; 95
    1d16:	f0 e0       	ldi	r31, 0x00	; 0
    1d18:	80 81       	ld	r24, Z
    1d1a:	80 68       	ori	r24, 0x80	; 128
    1d1c:	8c 93       	st	X, r24
}
    1d1e:	cf 91       	pop	r28
    1d20:	df 91       	pop	r29
    1d22:	08 95       	ret

00001d24 <GIE_vDisableInterrupts>:

// This function is responsible for disabling GIE for interrupts
void GIE_vDisableInterrupts(){
    1d24:	df 93       	push	r29
    1d26:	cf 93       	push	r28
    1d28:	cd b7       	in	r28, 0x3d	; 61
    1d2a:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, 7);
    1d2c:	af e5       	ldi	r26, 0x5F	; 95
    1d2e:	b0 e0       	ldi	r27, 0x00	; 0
    1d30:	ef e5       	ldi	r30, 0x5F	; 95
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 81       	ld	r24, Z
    1d36:	8f 77       	andi	r24, 0x7F	; 127
    1d38:	8c 93       	st	X, r24
}
    1d3a:	cf 91       	pop	r28
    1d3c:	df 91       	pop	r29
    1d3e:	08 95       	ret

00001d40 <EXTI_vEnableEXTI>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "EXTI_interface.h"

void EXTI_vEnableEXTI(const EXTI_cfg *INTx){
    1d40:	df 93       	push	r29
    1d42:	cf 93       	push	r28
    1d44:	00 d0       	rcall	.+0      	; 0x1d46 <EXTI_vEnableEXTI+0x6>
    1d46:	00 d0       	rcall	.+0      	; 0x1d48 <EXTI_vEnableEXTI+0x8>
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
	switch(INTx->INTx){
    1d50:	e9 81       	ldd	r30, Y+1	; 0x01
    1d52:	fa 81       	ldd	r31, Y+2	; 0x02
    1d54:	80 81       	ld	r24, Z
    1d56:	28 2f       	mov	r18, r24
    1d58:	30 e0       	ldi	r19, 0x00	; 0
    1d5a:	3c 83       	std	Y+4, r19	; 0x04
    1d5c:	2b 83       	std	Y+3, r18	; 0x03
    1d5e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d60:	9c 81       	ldd	r25, Y+4	; 0x04
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	91 05       	cpc	r25, r1
    1d66:	09 f4       	brne	.+2      	; 0x1d6a <EXTI_vEnableEXTI+0x2a>
    1d68:	5e c0       	rjmp	.+188    	; 0x1e26 <EXTI_vEnableEXTI+0xe6>
    1d6a:	2b 81       	ldd	r18, Y+3	; 0x03
    1d6c:	3c 81       	ldd	r19, Y+4	; 0x04
    1d6e:	22 30       	cpi	r18, 0x02	; 2
    1d70:	31 05       	cpc	r19, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <EXTI_vEnableEXTI+0x36>
    1d74:	aa c0       	rjmp	.+340    	; 0x1eca <EXTI_vEnableEXTI+0x18a>
    1d76:	8b 81       	ldd	r24, Y+3	; 0x03
    1d78:	9c 81       	ldd	r25, Y+4	; 0x04
    1d7a:	00 97       	sbiw	r24, 0x00	; 0
    1d7c:	09 f0       	breq	.+2      	; 0x1d80 <EXTI_vEnableEXTI+0x40>
    1d7e:	cc c0       	rjmp	.+408    	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
	case INT0:
		if(INTx->INTx_MODE == MODE_LOW_LEVEL){
    1d80:	e9 81       	ldd	r30, Y+1	; 0x01
    1d82:	fa 81       	ldd	r31, Y+2	; 0x02
    1d84:	81 81       	ldd	r24, Z+1	; 0x01
    1d86:	88 23       	and	r24, r24
    1d88:	79 f4       	brne	.+30     	; 0x1da8 <EXTI_vEnableEXTI+0x68>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_LOW;
    1d8a:	a5 e5       	ldi	r26, 0x55	; 85
    1d8c:	b0 e0       	ldi	r27, 0x00	; 0
    1d8e:	e5 e5       	ldi	r30, 0x55	; 85
    1d90:	f0 e0       	ldi	r31, 0x00	; 0
    1d92:	80 81       	ld	r24, Z
    1d94:	8c 7f       	andi	r24, 0xFC	; 252
    1d96:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    1d98:	ab e5       	ldi	r26, 0x5B	; 91
    1d9a:	b0 e0       	ldi	r27, 0x00	; 0
    1d9c:	eb e5       	ldi	r30, 0x5B	; 91
    1d9e:	f0 e0       	ldi	r31, 0x00	; 0
    1da0:	80 81       	ld	r24, Z
    1da2:	80 64       	ori	r24, 0x40	; 64
    1da4:	8c 93       	st	X, r24
    1da6:	b8 c0       	rjmp	.+368    	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_LOGICAL_CHANGE){
    1da8:	e9 81       	ldd	r30, Y+1	; 0x01
    1daa:	fa 81       	ldd	r31, Y+2	; 0x02
    1dac:	81 81       	ldd	r24, Z+1	; 0x01
    1dae:	81 30       	cpi	r24, 0x01	; 1
    1db0:	81 f4       	brne	.+32     	; 0x1dd2 <EXTI_vEnableEXTI+0x92>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_LOGICAL;
    1db2:	a5 e5       	ldi	r26, 0x55	; 85
    1db4:	b0 e0       	ldi	r27, 0x00	; 0
    1db6:	e5 e5       	ldi	r30, 0x55	; 85
    1db8:	f0 e0       	ldi	r31, 0x00	; 0
    1dba:	80 81       	ld	r24, Z
    1dbc:	8c 7f       	andi	r24, 0xFC	; 252
    1dbe:	81 60       	ori	r24, 0x01	; 1
    1dc0:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    1dc2:	ab e5       	ldi	r26, 0x5B	; 91
    1dc4:	b0 e0       	ldi	r27, 0x00	; 0
    1dc6:	eb e5       	ldi	r30, 0x5B	; 91
    1dc8:	f0 e0       	ldi	r31, 0x00	; 0
    1dca:	80 81       	ld	r24, Z
    1dcc:	80 64       	ori	r24, 0x40	; 64
    1dce:	8c 93       	st	X, r24
    1dd0:	a3 c0       	rjmp	.+326    	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_FALLING_EDGE){
    1dd2:	e9 81       	ldd	r30, Y+1	; 0x01
    1dd4:	fa 81       	ldd	r31, Y+2	; 0x02
    1dd6:	81 81       	ldd	r24, Z+1	; 0x01
    1dd8:	82 30       	cpi	r24, 0x02	; 2
    1dda:	81 f4       	brne	.+32     	; 0x1dfc <EXTI_vEnableEXTI+0xbc>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_FALLING;
    1ddc:	a5 e5       	ldi	r26, 0x55	; 85
    1dde:	b0 e0       	ldi	r27, 0x00	; 0
    1de0:	e5 e5       	ldi	r30, 0x55	; 85
    1de2:	f0 e0       	ldi	r31, 0x00	; 0
    1de4:	80 81       	ld	r24, Z
    1de6:	8c 7f       	andi	r24, 0xFC	; 252
    1de8:	82 60       	ori	r24, 0x02	; 2
    1dea:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    1dec:	ab e5       	ldi	r26, 0x5B	; 91
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	eb e5       	ldi	r30, 0x5B	; 91
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	80 64       	ori	r24, 0x40	; 64
    1df8:	8c 93       	st	X, r24
    1dfa:	8e c0       	rjmp	.+284    	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_RISING_EDGE){
    1dfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1dfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1e00:	81 81       	ldd	r24, Z+1	; 0x01
    1e02:	83 30       	cpi	r24, 0x03	; 3
    1e04:	09 f0       	breq	.+2      	; 0x1e08 <EXTI_vEnableEXTI+0xc8>
    1e06:	88 c0       	rjmp	.+272    	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_RISING;
    1e08:	a5 e5       	ldi	r26, 0x55	; 85
    1e0a:	b0 e0       	ldi	r27, 0x00	; 0
    1e0c:	e5 e5       	ldi	r30, 0x55	; 85
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	83 60       	ori	r24, 0x03	; 3
    1e14:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    1e16:	ab e5       	ldi	r26, 0x5B	; 91
    1e18:	b0 e0       	ldi	r27, 0x00	; 0
    1e1a:	eb e5       	ldi	r30, 0x5B	; 91
    1e1c:	f0 e0       	ldi	r31, 0x00	; 0
    1e1e:	80 81       	ld	r24, Z
    1e20:	80 64       	ori	r24, 0x40	; 64
    1e22:	8c 93       	st	X, r24
    1e24:	79 c0       	rjmp	.+242    	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
		}
		else{ /* Do Nothing */ }
		break;
	case INT1:
		if(INTx->INTx_MODE == MODE_LOW_LEVEL){
    1e26:	e9 81       	ldd	r30, Y+1	; 0x01
    1e28:	fa 81       	ldd	r31, Y+2	; 0x02
    1e2a:	81 81       	ldd	r24, Z+1	; 0x01
    1e2c:	88 23       	and	r24, r24
    1e2e:	79 f4       	brne	.+30     	; 0x1e4e <EXTI_vEnableEXTI+0x10e>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_LOW;
    1e30:	a5 e5       	ldi	r26, 0x55	; 85
    1e32:	b0 e0       	ldi	r27, 0x00	; 0
    1e34:	e5 e5       	ldi	r30, 0x55	; 85
    1e36:	f0 e0       	ldi	r31, 0x00	; 0
    1e38:	80 81       	ld	r24, Z
    1e3a:	83 7f       	andi	r24, 0xF3	; 243
    1e3c:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    1e3e:	ab e5       	ldi	r26, 0x5B	; 91
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	eb e5       	ldi	r30, 0x5B	; 91
    1e44:	f0 e0       	ldi	r31, 0x00	; 0
    1e46:	80 81       	ld	r24, Z
    1e48:	80 68       	ori	r24, 0x80	; 128
    1e4a:	8c 93       	st	X, r24
    1e4c:	65 c0       	rjmp	.+202    	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_LOGICAL_CHANGE){
    1e4e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e50:	fa 81       	ldd	r31, Y+2	; 0x02
    1e52:	81 81       	ldd	r24, Z+1	; 0x01
    1e54:	81 30       	cpi	r24, 0x01	; 1
    1e56:	81 f4       	brne	.+32     	; 0x1e78 <EXTI_vEnableEXTI+0x138>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_LOGICAL;
    1e58:	a5 e5       	ldi	r26, 0x55	; 85
    1e5a:	b0 e0       	ldi	r27, 0x00	; 0
    1e5c:	e5 e5       	ldi	r30, 0x55	; 85
    1e5e:	f0 e0       	ldi	r31, 0x00	; 0
    1e60:	80 81       	ld	r24, Z
    1e62:	83 7f       	andi	r24, 0xF3	; 243
    1e64:	84 60       	ori	r24, 0x04	; 4
    1e66:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    1e68:	ab e5       	ldi	r26, 0x5B	; 91
    1e6a:	b0 e0       	ldi	r27, 0x00	; 0
    1e6c:	eb e5       	ldi	r30, 0x5B	; 91
    1e6e:	f0 e0       	ldi	r31, 0x00	; 0
    1e70:	80 81       	ld	r24, Z
    1e72:	80 68       	ori	r24, 0x80	; 128
    1e74:	8c 93       	st	X, r24
    1e76:	50 c0       	rjmp	.+160    	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_FALLING_EDGE){
    1e78:	e9 81       	ldd	r30, Y+1	; 0x01
    1e7a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e7c:	81 81       	ldd	r24, Z+1	; 0x01
    1e7e:	82 30       	cpi	r24, 0x02	; 2
    1e80:	81 f4       	brne	.+32     	; 0x1ea2 <EXTI_vEnableEXTI+0x162>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_FALLING;
    1e82:	a5 e5       	ldi	r26, 0x55	; 85
    1e84:	b0 e0       	ldi	r27, 0x00	; 0
    1e86:	e5 e5       	ldi	r30, 0x55	; 85
    1e88:	f0 e0       	ldi	r31, 0x00	; 0
    1e8a:	80 81       	ld	r24, Z
    1e8c:	83 7f       	andi	r24, 0xF3	; 243
    1e8e:	88 60       	ori	r24, 0x08	; 8
    1e90:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    1e92:	ab e5       	ldi	r26, 0x5B	; 91
    1e94:	b0 e0       	ldi	r27, 0x00	; 0
    1e96:	eb e5       	ldi	r30, 0x5B	; 91
    1e98:	f0 e0       	ldi	r31, 0x00	; 0
    1e9a:	80 81       	ld	r24, Z
    1e9c:	80 68       	ori	r24, 0x80	; 128
    1e9e:	8c 93       	st	X, r24
    1ea0:	3b c0       	rjmp	.+118    	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_RISING_EDGE){
    1ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ea6:	81 81       	ldd	r24, Z+1	; 0x01
    1ea8:	83 30       	cpi	r24, 0x03	; 3
    1eaa:	b1 f5       	brne	.+108    	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_RISING;
    1eac:	a5 e5       	ldi	r26, 0x55	; 85
    1eae:	b0 e0       	ldi	r27, 0x00	; 0
    1eb0:	e5 e5       	ldi	r30, 0x55	; 85
    1eb2:	f0 e0       	ldi	r31, 0x00	; 0
    1eb4:	80 81       	ld	r24, Z
    1eb6:	8c 60       	ori	r24, 0x0C	; 12
    1eb8:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    1eba:	ab e5       	ldi	r26, 0x5B	; 91
    1ebc:	b0 e0       	ldi	r27, 0x00	; 0
    1ebe:	eb e5       	ldi	r30, 0x5B	; 91
    1ec0:	f0 e0       	ldi	r31, 0x00	; 0
    1ec2:	80 81       	ld	r24, Z
    1ec4:	80 68       	ori	r24, 0x80	; 128
    1ec6:	8c 93       	st	X, r24
    1ec8:	27 c0       	rjmp	.+78     	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
		}
		else{ /* Do Nothing */ }
		break;
	case INT2:
		if(INTx->INTx_MODE == MODE_FALLING_EDGE){
    1eca:	e9 81       	ldd	r30, Y+1	; 0x01
    1ecc:	fa 81       	ldd	r31, Y+2	; 0x02
    1ece:	81 81       	ldd	r24, Z+1	; 0x01
    1ed0:	82 30       	cpi	r24, 0x02	; 2
    1ed2:	79 f4       	brne	.+30     	; 0x1ef2 <EXTI_vEnableEXTI+0x1b2>
			MCUCSR_REG = (MCUCSR_REG & MCUCSR_INT2_M) | MCUCSR_INT2_FALLING;
    1ed4:	a4 e5       	ldi	r26, 0x54	; 84
    1ed6:	b0 e0       	ldi	r27, 0x00	; 0
    1ed8:	e4 e5       	ldi	r30, 0x54	; 84
    1eda:	f0 e0       	ldi	r31, 0x00	; 0
    1edc:	80 81       	ld	r24, Z
    1ede:	8f 7b       	andi	r24, 0xBF	; 191
    1ee0:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT2);
    1ee2:	ab e5       	ldi	r26, 0x5B	; 91
    1ee4:	b0 e0       	ldi	r27, 0x00	; 0
    1ee6:	eb e5       	ldi	r30, 0x5B	; 91
    1ee8:	f0 e0       	ldi	r31, 0x00	; 0
    1eea:	80 81       	ld	r24, Z
    1eec:	80 62       	ori	r24, 0x20	; 32
    1eee:	8c 93       	st	X, r24
    1ef0:	13 c0       	rjmp	.+38     	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_RISING_EDGE){
    1ef2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef6:	81 81       	ldd	r24, Z+1	; 0x01
    1ef8:	83 30       	cpi	r24, 0x03	; 3
    1efa:	71 f4       	brne	.+28     	; 0x1f18 <EXTI_vEnableEXTI+0x1d8>
			MCUCSR_REG = (MCUCSR_REG & MCUCSR_INT2_M) | MCUCSR_INT2_RISING;
    1efc:	a4 e5       	ldi	r26, 0x54	; 84
    1efe:	b0 e0       	ldi	r27, 0x00	; 0
    1f00:	e4 e5       	ldi	r30, 0x54	; 84
    1f02:	f0 e0       	ldi	r31, 0x00	; 0
    1f04:	80 81       	ld	r24, Z
    1f06:	80 64       	ori	r24, 0x40	; 64
    1f08:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT2);
    1f0a:	ab e5       	ldi	r26, 0x5B	; 91
    1f0c:	b0 e0       	ldi	r27, 0x00	; 0
    1f0e:	eb e5       	ldi	r30, 0x5B	; 91
    1f10:	f0 e0       	ldi	r31, 0x00	; 0
    1f12:	80 81       	ld	r24, Z
    1f14:	80 62       	ori	r24, 0x20	; 32
    1f16:	8c 93       	st	X, r24
		}
		else{ /* Do Nothing */ }
		break;
	default: /* Do Nothing */ break;
	}
}
    1f18:	0f 90       	pop	r0
    1f1a:	0f 90       	pop	r0
    1f1c:	0f 90       	pop	r0
    1f1e:	0f 90       	pop	r0
    1f20:	cf 91       	pop	r28
    1f22:	df 91       	pop	r29
    1f24:	08 95       	ret

00001f26 <EXTI_vDisableEXTI>:

void EXTI_vDisableEXTI(const EXTI_cfg *INTx){
    1f26:	df 93       	push	r29
    1f28:	cf 93       	push	r28
    1f2a:	00 d0       	rcall	.+0      	; 0x1f2c <EXTI_vDisableEXTI+0x6>
    1f2c:	00 d0       	rcall	.+0      	; 0x1f2e <EXTI_vDisableEXTI+0x8>
    1f2e:	cd b7       	in	r28, 0x3d	; 61
    1f30:	de b7       	in	r29, 0x3e	; 62
    1f32:	9a 83       	std	Y+2, r25	; 0x02
    1f34:	89 83       	std	Y+1, r24	; 0x01
	switch(INTx->INTx){
    1f36:	e9 81       	ldd	r30, Y+1	; 0x01
    1f38:	fa 81       	ldd	r31, Y+2	; 0x02
    1f3a:	80 81       	ld	r24, Z
    1f3c:	28 2f       	mov	r18, r24
    1f3e:	30 e0       	ldi	r19, 0x00	; 0
    1f40:	3c 83       	std	Y+4, r19	; 0x04
    1f42:	2b 83       	std	Y+3, r18	; 0x03
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	81 30       	cpi	r24, 0x01	; 1
    1f4a:	91 05       	cpc	r25, r1
    1f4c:	89 f0       	breq	.+34     	; 0x1f70 <EXTI_vDisableEXTI+0x4a>
    1f4e:	2b 81       	ldd	r18, Y+3	; 0x03
    1f50:	3c 81       	ldd	r19, Y+4	; 0x04
    1f52:	22 30       	cpi	r18, 0x02	; 2
    1f54:	31 05       	cpc	r19, r1
    1f56:	a1 f0       	breq	.+40     	; 0x1f80 <EXTI_vDisableEXTI+0x5a>
    1f58:	8b 81       	ldd	r24, Y+3	; 0x03
    1f5a:	9c 81       	ldd	r25, Y+4	; 0x04
    1f5c:	00 97       	sbiw	r24, 0x00	; 0
    1f5e:	b9 f4       	brne	.+46     	; 0x1f8e <EXTI_vDisableEXTI+0x68>
	case INT0:
		CLR_BIT(GICR_REG, GICR_INT0);
    1f60:	ab e5       	ldi	r26, 0x5B	; 91
    1f62:	b0 e0       	ldi	r27, 0x00	; 0
    1f64:	eb e5       	ldi	r30, 0x5B	; 91
    1f66:	f0 e0       	ldi	r31, 0x00	; 0
    1f68:	80 81       	ld	r24, Z
    1f6a:	8f 7b       	andi	r24, 0xBF	; 191
    1f6c:	8c 93       	st	X, r24
    1f6e:	0f c0       	rjmp	.+30     	; 0x1f8e <EXTI_vDisableEXTI+0x68>
		break;
	case INT1:
		CLR_BIT(GICR_REG, GICR_INT1);
    1f70:	ab e5       	ldi	r26, 0x5B	; 91
    1f72:	b0 e0       	ldi	r27, 0x00	; 0
    1f74:	eb e5       	ldi	r30, 0x5B	; 91
    1f76:	f0 e0       	ldi	r31, 0x00	; 0
    1f78:	80 81       	ld	r24, Z
    1f7a:	8f 77       	andi	r24, 0x7F	; 127
    1f7c:	8c 93       	st	X, r24
    1f7e:	07 c0       	rjmp	.+14     	; 0x1f8e <EXTI_vDisableEXTI+0x68>
		break;
	case INT2:
		CLR_BIT(GICR_REG, GICR_INT2);
    1f80:	ab e5       	ldi	r26, 0x5B	; 91
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	eb e5       	ldi	r30, 0x5B	; 91
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	8f 7d       	andi	r24, 0xDF	; 223
    1f8c:	8c 93       	st	X, r24
		break;
	}
}
    1f8e:	0f 90       	pop	r0
    1f90:	0f 90       	pop	r0
    1f92:	0f 90       	pop	r0
    1f94:	0f 90       	pop	r0
    1f96:	cf 91       	pop	r28
    1f98:	df 91       	pop	r29
    1f9a:	08 95       	ret

00001f9c <DIO_vPinInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "DIO_interface.h"

void DIO_vPinInit(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir, u8 Copy_u8PinVal){
    1f9c:	df 93       	push	r29
    1f9e:	cf 93       	push	r28
    1fa0:	00 d0       	rcall	.+0      	; 0x1fa2 <DIO_vPinInit+0x6>
    1fa2:	00 d0       	rcall	.+0      	; 0x1fa4 <DIO_vPinInit+0x8>
    1fa4:	cd b7       	in	r28, 0x3d	; 61
    1fa6:	de b7       	in	r29, 0x3e	; 62
    1fa8:	89 83       	std	Y+1, r24	; 0x01
    1faa:	6a 83       	std	Y+2, r22	; 0x02
    1fac:	4b 83       	std	Y+3, r20	; 0x03
    1fae:	2c 83       	std	Y+4, r18	; 0x04
	DIO_vSetPinDir(Copy_u8PortName, Copy_u8PinNum, Copy_u8PinDir);
    1fb0:	89 81       	ldd	r24, Y+1	; 0x01
    1fb2:	6a 81       	ldd	r22, Y+2	; 0x02
    1fb4:	4b 81       	ldd	r20, Y+3	; 0x03
    1fb6:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <DIO_vSetPinDir>
	DIO_vSetPinValue(Copy_u8PortName, Copy_u8PinNum, Copy_u8PinVal);
    1fba:	89 81       	ldd	r24, Y+1	; 0x01
    1fbc:	6a 81       	ldd	r22, Y+2	; 0x02
    1fbe:	4c 81       	ldd	r20, Y+4	; 0x04
    1fc0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <DIO_vSetPinValue>
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	cf 91       	pop	r28
    1fce:	df 91       	pop	r29
    1fd0:	08 95       	ret

00001fd2 <DIO_vSetPinDir>:

//sets data direction of 1 pin in a port
void DIO_vSetPinDir(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir){
    1fd2:	df 93       	push	r29
    1fd4:	cf 93       	push	r28
    1fd6:	cd b7       	in	r28, 0x3d	; 61
    1fd8:	de b7       	in	r29, 0x3e	; 62
    1fda:	27 97       	sbiw	r28, 0x07	; 7
    1fdc:	0f b6       	in	r0, 0x3f	; 63
    1fde:	f8 94       	cli
    1fe0:	de bf       	out	0x3e, r29	; 62
    1fe2:	0f be       	out	0x3f, r0	; 63
    1fe4:	cd bf       	out	0x3d, r28	; 61
    1fe6:	89 83       	std	Y+1, r24	; 0x01
    1fe8:	6a 83       	std	Y+2, r22	; 0x02
    1fea:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir == OUTPUT)
    1fec:	8b 81       	ldd	r24, Y+3	; 0x03
    1fee:	81 30       	cpi	r24, 0x01	; 1
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <DIO_vSetPinDir+0x22>
    1ff2:	6f c0       	rjmp	.+222    	; 0x20d2 <DIO_vSetPinDir+0x100>
	{
		switch(Copy_u8PortName)
    1ff4:	89 81       	ldd	r24, Y+1	; 0x01
    1ff6:	28 2f       	mov	r18, r24
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	3f 83       	std	Y+7, r19	; 0x07
    1ffc:	2e 83       	std	Y+6, r18	; 0x06
    1ffe:	8e 81       	ldd	r24, Y+6	; 0x06
    2000:	9f 81       	ldd	r25, Y+7	; 0x07
    2002:	81 30       	cpi	r24, 0x01	; 1
    2004:	91 05       	cpc	r25, r1
    2006:	49 f1       	breq	.+82     	; 0x205a <DIO_vSetPinDir+0x88>
    2008:	2e 81       	ldd	r18, Y+6	; 0x06
    200a:	3f 81       	ldd	r19, Y+7	; 0x07
    200c:	22 30       	cpi	r18, 0x02	; 2
    200e:	31 05       	cpc	r19, r1
    2010:	2c f4       	brge	.+10     	; 0x201c <DIO_vSetPinDir+0x4a>
    2012:	8e 81       	ldd	r24, Y+6	; 0x06
    2014:	9f 81       	ldd	r25, Y+7	; 0x07
    2016:	00 97       	sbiw	r24, 0x00	; 0
    2018:	61 f0       	breq	.+24     	; 0x2032 <DIO_vSetPinDir+0x60>
    201a:	d2 c0       	rjmp	.+420    	; 0x21c0 <DIO_vSetPinDir+0x1ee>
    201c:	2e 81       	ldd	r18, Y+6	; 0x06
    201e:	3f 81       	ldd	r19, Y+7	; 0x07
    2020:	22 30       	cpi	r18, 0x02	; 2
    2022:	31 05       	cpc	r19, r1
    2024:	71 f1       	breq	.+92     	; 0x2082 <DIO_vSetPinDir+0xb0>
    2026:	8e 81       	ldd	r24, Y+6	; 0x06
    2028:	9f 81       	ldd	r25, Y+7	; 0x07
    202a:	83 30       	cpi	r24, 0x03	; 3
    202c:	91 05       	cpc	r25, r1
    202e:	e9 f1       	breq	.+122    	; 0x20aa <DIO_vSetPinDir+0xd8>
    2030:	c7 c0       	rjmp	.+398    	; 0x21c0 <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: SET_BIT(DDRA_REG, Copy_u8PinNum); break;
    2032:	aa e3       	ldi	r26, 0x3A	; 58
    2034:	b0 e0       	ldi	r27, 0x00	; 0
    2036:	ea e3       	ldi	r30, 0x3A	; 58
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
    203c:	48 2f       	mov	r20, r24
    203e:	8a 81       	ldd	r24, Y+2	; 0x02
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	81 e0       	ldi	r24, 0x01	; 1
    2046:	90 e0       	ldi	r25, 0x00	; 0
    2048:	02 2e       	mov	r0, r18
    204a:	02 c0       	rjmp	.+4      	; 0x2050 <DIO_vSetPinDir+0x7e>
    204c:	88 0f       	add	r24, r24
    204e:	99 1f       	adc	r25, r25
    2050:	0a 94       	dec	r0
    2052:	e2 f7       	brpl	.-8      	; 0x204c <DIO_vSetPinDir+0x7a>
    2054:	84 2b       	or	r24, r20
    2056:	8c 93       	st	X, r24
    2058:	b3 c0       	rjmp	.+358    	; 0x21c0 <DIO_vSetPinDir+0x1ee>
		case PORTB: SET_BIT(DDRB_REG, Copy_u8PinNum); break;
    205a:	a7 e3       	ldi	r26, 0x37	; 55
    205c:	b0 e0       	ldi	r27, 0x00	; 0
    205e:	e7 e3       	ldi	r30, 0x37	; 55
    2060:	f0 e0       	ldi	r31, 0x00	; 0
    2062:	80 81       	ld	r24, Z
    2064:	48 2f       	mov	r20, r24
    2066:	8a 81       	ldd	r24, Y+2	; 0x02
    2068:	28 2f       	mov	r18, r24
    206a:	30 e0       	ldi	r19, 0x00	; 0
    206c:	81 e0       	ldi	r24, 0x01	; 1
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	02 2e       	mov	r0, r18
    2072:	02 c0       	rjmp	.+4      	; 0x2078 <DIO_vSetPinDir+0xa6>
    2074:	88 0f       	add	r24, r24
    2076:	99 1f       	adc	r25, r25
    2078:	0a 94       	dec	r0
    207a:	e2 f7       	brpl	.-8      	; 0x2074 <DIO_vSetPinDir+0xa2>
    207c:	84 2b       	or	r24, r20
    207e:	8c 93       	st	X, r24
    2080:	9f c0       	rjmp	.+318    	; 0x21c0 <DIO_vSetPinDir+0x1ee>
		case PORTC: SET_BIT(DDRC_REG, Copy_u8PinNum); break;
    2082:	a4 e3       	ldi	r26, 0x34	; 52
    2084:	b0 e0       	ldi	r27, 0x00	; 0
    2086:	e4 e3       	ldi	r30, 0x34	; 52
    2088:	f0 e0       	ldi	r31, 0x00	; 0
    208a:	80 81       	ld	r24, Z
    208c:	48 2f       	mov	r20, r24
    208e:	8a 81       	ldd	r24, Y+2	; 0x02
    2090:	28 2f       	mov	r18, r24
    2092:	30 e0       	ldi	r19, 0x00	; 0
    2094:	81 e0       	ldi	r24, 0x01	; 1
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	02 2e       	mov	r0, r18
    209a:	02 c0       	rjmp	.+4      	; 0x20a0 <DIO_vSetPinDir+0xce>
    209c:	88 0f       	add	r24, r24
    209e:	99 1f       	adc	r25, r25
    20a0:	0a 94       	dec	r0
    20a2:	e2 f7       	brpl	.-8      	; 0x209c <DIO_vSetPinDir+0xca>
    20a4:	84 2b       	or	r24, r20
    20a6:	8c 93       	st	X, r24
    20a8:	8b c0       	rjmp	.+278    	; 0x21c0 <DIO_vSetPinDir+0x1ee>
		case PORTD: SET_BIT(DDRD_REG, Copy_u8PinNum); break;
    20aa:	a1 e3       	ldi	r26, 0x31	; 49
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e1 e3       	ldi	r30, 0x31	; 49
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	48 2f       	mov	r20, r24
    20b6:	8a 81       	ldd	r24, Y+2	; 0x02
    20b8:	28 2f       	mov	r18, r24
    20ba:	30 e0       	ldi	r19, 0x00	; 0
    20bc:	81 e0       	ldi	r24, 0x01	; 1
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	02 2e       	mov	r0, r18
    20c2:	02 c0       	rjmp	.+4      	; 0x20c8 <DIO_vSetPinDir+0xf6>
    20c4:	88 0f       	add	r24, r24
    20c6:	99 1f       	adc	r25, r25
    20c8:	0a 94       	dec	r0
    20ca:	e2 f7       	brpl	.-8      	; 0x20c4 <DIO_vSetPinDir+0xf2>
    20cc:	84 2b       	or	r24, r20
    20ce:	8c 93       	st	X, r24
    20d0:	77 c0       	rjmp	.+238    	; 0x21c0 <DIO_vSetPinDir+0x1ee>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    20d2:	8b 81       	ldd	r24, Y+3	; 0x03
    20d4:	88 23       	and	r24, r24
    20d6:	09 f0       	breq	.+2      	; 0x20da <DIO_vSetPinDir+0x108>
    20d8:	73 c0       	rjmp	.+230    	; 0x21c0 <DIO_vSetPinDir+0x1ee>
	{
		switch(Copy_u8PortName)
    20da:	89 81       	ldd	r24, Y+1	; 0x01
    20dc:	28 2f       	mov	r18, r24
    20de:	30 e0       	ldi	r19, 0x00	; 0
    20e0:	3d 83       	std	Y+5, r19	; 0x05
    20e2:	2c 83       	std	Y+4, r18	; 0x04
    20e4:	8c 81       	ldd	r24, Y+4	; 0x04
    20e6:	9d 81       	ldd	r25, Y+5	; 0x05
    20e8:	81 30       	cpi	r24, 0x01	; 1
    20ea:	91 05       	cpc	r25, r1
    20ec:	59 f1       	breq	.+86     	; 0x2144 <DIO_vSetPinDir+0x172>
    20ee:	2c 81       	ldd	r18, Y+4	; 0x04
    20f0:	3d 81       	ldd	r19, Y+5	; 0x05
    20f2:	22 30       	cpi	r18, 0x02	; 2
    20f4:	31 05       	cpc	r19, r1
    20f6:	2c f4       	brge	.+10     	; 0x2102 <DIO_vSetPinDir+0x130>
    20f8:	8c 81       	ldd	r24, Y+4	; 0x04
    20fa:	9d 81       	ldd	r25, Y+5	; 0x05
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	69 f0       	breq	.+26     	; 0x211a <DIO_vSetPinDir+0x148>
    2100:	5f c0       	rjmp	.+190    	; 0x21c0 <DIO_vSetPinDir+0x1ee>
    2102:	2c 81       	ldd	r18, Y+4	; 0x04
    2104:	3d 81       	ldd	r19, Y+5	; 0x05
    2106:	22 30       	cpi	r18, 0x02	; 2
    2108:	31 05       	cpc	r19, r1
    210a:	89 f1       	breq	.+98     	; 0x216e <DIO_vSetPinDir+0x19c>
    210c:	8c 81       	ldd	r24, Y+4	; 0x04
    210e:	9d 81       	ldd	r25, Y+5	; 0x05
    2110:	83 30       	cpi	r24, 0x03	; 3
    2112:	91 05       	cpc	r25, r1
    2114:	09 f4       	brne	.+2      	; 0x2118 <DIO_vSetPinDir+0x146>
    2116:	40 c0       	rjmp	.+128    	; 0x2198 <DIO_vSetPinDir+0x1c6>
    2118:	53 c0       	rjmp	.+166    	; 0x21c0 <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: CLR_BIT(DDRA_REG, Copy_u8PinNum); break;
    211a:	aa e3       	ldi	r26, 0x3A	; 58
    211c:	b0 e0       	ldi	r27, 0x00	; 0
    211e:	ea e3       	ldi	r30, 0x3A	; 58
    2120:	f0 e0       	ldi	r31, 0x00	; 0
    2122:	80 81       	ld	r24, Z
    2124:	48 2f       	mov	r20, r24
    2126:	8a 81       	ldd	r24, Y+2	; 0x02
    2128:	28 2f       	mov	r18, r24
    212a:	30 e0       	ldi	r19, 0x00	; 0
    212c:	81 e0       	ldi	r24, 0x01	; 1
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	02 2e       	mov	r0, r18
    2132:	02 c0       	rjmp	.+4      	; 0x2138 <DIO_vSetPinDir+0x166>
    2134:	88 0f       	add	r24, r24
    2136:	99 1f       	adc	r25, r25
    2138:	0a 94       	dec	r0
    213a:	e2 f7       	brpl	.-8      	; 0x2134 <DIO_vSetPinDir+0x162>
    213c:	80 95       	com	r24
    213e:	84 23       	and	r24, r20
    2140:	8c 93       	st	X, r24
    2142:	3e c0       	rjmp	.+124    	; 0x21c0 <DIO_vSetPinDir+0x1ee>
		case PORTB: CLR_BIT(DDRB_REG, Copy_u8PinNum); break;
    2144:	a7 e3       	ldi	r26, 0x37	; 55
    2146:	b0 e0       	ldi	r27, 0x00	; 0
    2148:	e7 e3       	ldi	r30, 0x37	; 55
    214a:	f0 e0       	ldi	r31, 0x00	; 0
    214c:	80 81       	ld	r24, Z
    214e:	48 2f       	mov	r20, r24
    2150:	8a 81       	ldd	r24, Y+2	; 0x02
    2152:	28 2f       	mov	r18, r24
    2154:	30 e0       	ldi	r19, 0x00	; 0
    2156:	81 e0       	ldi	r24, 0x01	; 1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	02 2e       	mov	r0, r18
    215c:	02 c0       	rjmp	.+4      	; 0x2162 <DIO_vSetPinDir+0x190>
    215e:	88 0f       	add	r24, r24
    2160:	99 1f       	adc	r25, r25
    2162:	0a 94       	dec	r0
    2164:	e2 f7       	brpl	.-8      	; 0x215e <DIO_vSetPinDir+0x18c>
    2166:	80 95       	com	r24
    2168:	84 23       	and	r24, r20
    216a:	8c 93       	st	X, r24
    216c:	29 c0       	rjmp	.+82     	; 0x21c0 <DIO_vSetPinDir+0x1ee>
		case PORTC: CLR_BIT(DDRC_REG, Copy_u8PinNum); break;
    216e:	a4 e3       	ldi	r26, 0x34	; 52
    2170:	b0 e0       	ldi	r27, 0x00	; 0
    2172:	e4 e3       	ldi	r30, 0x34	; 52
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	80 81       	ld	r24, Z
    2178:	48 2f       	mov	r20, r24
    217a:	8a 81       	ldd	r24, Y+2	; 0x02
    217c:	28 2f       	mov	r18, r24
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	81 e0       	ldi	r24, 0x01	; 1
    2182:	90 e0       	ldi	r25, 0x00	; 0
    2184:	02 2e       	mov	r0, r18
    2186:	02 c0       	rjmp	.+4      	; 0x218c <DIO_vSetPinDir+0x1ba>
    2188:	88 0f       	add	r24, r24
    218a:	99 1f       	adc	r25, r25
    218c:	0a 94       	dec	r0
    218e:	e2 f7       	brpl	.-8      	; 0x2188 <DIO_vSetPinDir+0x1b6>
    2190:	80 95       	com	r24
    2192:	84 23       	and	r24, r20
    2194:	8c 93       	st	X, r24
    2196:	14 c0       	rjmp	.+40     	; 0x21c0 <DIO_vSetPinDir+0x1ee>
		case PORTD: CLR_BIT(DDRD_REG, Copy_u8PinNum); break;
    2198:	a1 e3       	ldi	r26, 0x31	; 49
    219a:	b0 e0       	ldi	r27, 0x00	; 0
    219c:	e1 e3       	ldi	r30, 0x31	; 49
    219e:	f0 e0       	ldi	r31, 0x00	; 0
    21a0:	80 81       	ld	r24, Z
    21a2:	48 2f       	mov	r20, r24
    21a4:	8a 81       	ldd	r24, Y+2	; 0x02
    21a6:	28 2f       	mov	r18, r24
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	81 e0       	ldi	r24, 0x01	; 1
    21ac:	90 e0       	ldi	r25, 0x00	; 0
    21ae:	02 2e       	mov	r0, r18
    21b0:	02 c0       	rjmp	.+4      	; 0x21b6 <DIO_vSetPinDir+0x1e4>
    21b2:	88 0f       	add	r24, r24
    21b4:	99 1f       	adc	r25, r25
    21b6:	0a 94       	dec	r0
    21b8:	e2 f7       	brpl	.-8      	; 0x21b2 <DIO_vSetPinDir+0x1e0>
    21ba:	80 95       	com	r24
    21bc:	84 23       	and	r24, r20
    21be:	8c 93       	st	X, r24
		}
	}
}
    21c0:	27 96       	adiw	r28, 0x07	; 7
    21c2:	0f b6       	in	r0, 0x3f	; 63
    21c4:	f8 94       	cli
    21c6:	de bf       	out	0x3e, r29	; 62
    21c8:	0f be       	out	0x3f, r0	; 63
    21ca:	cd bf       	out	0x3d, r28	; 61
    21cc:	cf 91       	pop	r28
    21ce:	df 91       	pop	r29
    21d0:	08 95       	ret

000021d2 <DIO_vSetPinValue>:

//sets value of 1 pin in a port
void DIO_vSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinVal){
    21d2:	df 93       	push	r29
    21d4:	cf 93       	push	r28
    21d6:	cd b7       	in	r28, 0x3d	; 61
    21d8:	de b7       	in	r29, 0x3e	; 62
    21da:	27 97       	sbiw	r28, 0x07	; 7
    21dc:	0f b6       	in	r0, 0x3f	; 63
    21de:	f8 94       	cli
    21e0:	de bf       	out	0x3e, r29	; 62
    21e2:	0f be       	out	0x3f, r0	; 63
    21e4:	cd bf       	out	0x3d, r28	; 61
    21e6:	89 83       	std	Y+1, r24	; 0x01
    21e8:	6a 83       	std	Y+2, r22	; 0x02
    21ea:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinVal == HIGH)
    21ec:	8b 81       	ldd	r24, Y+3	; 0x03
    21ee:	81 30       	cpi	r24, 0x01	; 1
    21f0:	09 f0       	breq	.+2      	; 0x21f4 <DIO_vSetPinValue+0x22>
    21f2:	6f c0       	rjmp	.+222    	; 0x22d2 <DIO_vSetPinValue+0x100>
	{
		switch(Copy_u8PortName)
    21f4:	89 81       	ldd	r24, Y+1	; 0x01
    21f6:	28 2f       	mov	r18, r24
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	3f 83       	std	Y+7, r19	; 0x07
    21fc:	2e 83       	std	Y+6, r18	; 0x06
    21fe:	8e 81       	ldd	r24, Y+6	; 0x06
    2200:	9f 81       	ldd	r25, Y+7	; 0x07
    2202:	81 30       	cpi	r24, 0x01	; 1
    2204:	91 05       	cpc	r25, r1
    2206:	49 f1       	breq	.+82     	; 0x225a <DIO_vSetPinValue+0x88>
    2208:	2e 81       	ldd	r18, Y+6	; 0x06
    220a:	3f 81       	ldd	r19, Y+7	; 0x07
    220c:	22 30       	cpi	r18, 0x02	; 2
    220e:	31 05       	cpc	r19, r1
    2210:	2c f4       	brge	.+10     	; 0x221c <DIO_vSetPinValue+0x4a>
    2212:	8e 81       	ldd	r24, Y+6	; 0x06
    2214:	9f 81       	ldd	r25, Y+7	; 0x07
    2216:	00 97       	sbiw	r24, 0x00	; 0
    2218:	61 f0       	breq	.+24     	; 0x2232 <DIO_vSetPinValue+0x60>
    221a:	d2 c0       	rjmp	.+420    	; 0x23c0 <DIO_vSetPinValue+0x1ee>
    221c:	2e 81       	ldd	r18, Y+6	; 0x06
    221e:	3f 81       	ldd	r19, Y+7	; 0x07
    2220:	22 30       	cpi	r18, 0x02	; 2
    2222:	31 05       	cpc	r19, r1
    2224:	71 f1       	breq	.+92     	; 0x2282 <DIO_vSetPinValue+0xb0>
    2226:	8e 81       	ldd	r24, Y+6	; 0x06
    2228:	9f 81       	ldd	r25, Y+7	; 0x07
    222a:	83 30       	cpi	r24, 0x03	; 3
    222c:	91 05       	cpc	r25, r1
    222e:	e9 f1       	breq	.+122    	; 0x22aa <DIO_vSetPinValue+0xd8>
    2230:	c7 c0       	rjmp	.+398    	; 0x23c0 <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: SET_BIT(PORTA_REG, Copy_u8PinNum); break;
    2232:	ab e3       	ldi	r26, 0x3B	; 59
    2234:	b0 e0       	ldi	r27, 0x00	; 0
    2236:	eb e3       	ldi	r30, 0x3B	; 59
    2238:	f0 e0       	ldi	r31, 0x00	; 0
    223a:	80 81       	ld	r24, Z
    223c:	48 2f       	mov	r20, r24
    223e:	8a 81       	ldd	r24, Y+2	; 0x02
    2240:	28 2f       	mov	r18, r24
    2242:	30 e0       	ldi	r19, 0x00	; 0
    2244:	81 e0       	ldi	r24, 0x01	; 1
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	02 2e       	mov	r0, r18
    224a:	02 c0       	rjmp	.+4      	; 0x2250 <DIO_vSetPinValue+0x7e>
    224c:	88 0f       	add	r24, r24
    224e:	99 1f       	adc	r25, r25
    2250:	0a 94       	dec	r0
    2252:	e2 f7       	brpl	.-8      	; 0x224c <DIO_vSetPinValue+0x7a>
    2254:	84 2b       	or	r24, r20
    2256:	8c 93       	st	X, r24
    2258:	b3 c0       	rjmp	.+358    	; 0x23c0 <DIO_vSetPinValue+0x1ee>
		case PORTB: SET_BIT(PORTB_REG, Copy_u8PinNum); break;
    225a:	a8 e3       	ldi	r26, 0x38	; 56
    225c:	b0 e0       	ldi	r27, 0x00	; 0
    225e:	e8 e3       	ldi	r30, 0x38	; 56
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	48 2f       	mov	r20, r24
    2266:	8a 81       	ldd	r24, Y+2	; 0x02
    2268:	28 2f       	mov	r18, r24
    226a:	30 e0       	ldi	r19, 0x00	; 0
    226c:	81 e0       	ldi	r24, 0x01	; 1
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	02 2e       	mov	r0, r18
    2272:	02 c0       	rjmp	.+4      	; 0x2278 <DIO_vSetPinValue+0xa6>
    2274:	88 0f       	add	r24, r24
    2276:	99 1f       	adc	r25, r25
    2278:	0a 94       	dec	r0
    227a:	e2 f7       	brpl	.-8      	; 0x2274 <DIO_vSetPinValue+0xa2>
    227c:	84 2b       	or	r24, r20
    227e:	8c 93       	st	X, r24
    2280:	9f c0       	rjmp	.+318    	; 0x23c0 <DIO_vSetPinValue+0x1ee>
		case PORTC: SET_BIT(PORTC_REG, Copy_u8PinNum); break;
    2282:	a5 e3       	ldi	r26, 0x35	; 53
    2284:	b0 e0       	ldi	r27, 0x00	; 0
    2286:	e5 e3       	ldi	r30, 0x35	; 53
    2288:	f0 e0       	ldi	r31, 0x00	; 0
    228a:	80 81       	ld	r24, Z
    228c:	48 2f       	mov	r20, r24
    228e:	8a 81       	ldd	r24, Y+2	; 0x02
    2290:	28 2f       	mov	r18, r24
    2292:	30 e0       	ldi	r19, 0x00	; 0
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	90 e0       	ldi	r25, 0x00	; 0
    2298:	02 2e       	mov	r0, r18
    229a:	02 c0       	rjmp	.+4      	; 0x22a0 <DIO_vSetPinValue+0xce>
    229c:	88 0f       	add	r24, r24
    229e:	99 1f       	adc	r25, r25
    22a0:	0a 94       	dec	r0
    22a2:	e2 f7       	brpl	.-8      	; 0x229c <DIO_vSetPinValue+0xca>
    22a4:	84 2b       	or	r24, r20
    22a6:	8c 93       	st	X, r24
    22a8:	8b c0       	rjmp	.+278    	; 0x23c0 <DIO_vSetPinValue+0x1ee>
		case PORTD: SET_BIT(PORTD_REG, Copy_u8PinNum); break;
    22aa:	a2 e3       	ldi	r26, 0x32	; 50
    22ac:	b0 e0       	ldi	r27, 0x00	; 0
    22ae:	e2 e3       	ldi	r30, 0x32	; 50
    22b0:	f0 e0       	ldi	r31, 0x00	; 0
    22b2:	80 81       	ld	r24, Z
    22b4:	48 2f       	mov	r20, r24
    22b6:	8a 81       	ldd	r24, Y+2	; 0x02
    22b8:	28 2f       	mov	r18, r24
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	81 e0       	ldi	r24, 0x01	; 1
    22be:	90 e0       	ldi	r25, 0x00	; 0
    22c0:	02 2e       	mov	r0, r18
    22c2:	02 c0       	rjmp	.+4      	; 0x22c8 <DIO_vSetPinValue+0xf6>
    22c4:	88 0f       	add	r24, r24
    22c6:	99 1f       	adc	r25, r25
    22c8:	0a 94       	dec	r0
    22ca:	e2 f7       	brpl	.-8      	; 0x22c4 <DIO_vSetPinValue+0xf2>
    22cc:	84 2b       	or	r24, r20
    22ce:	8c 93       	st	X, r24
    22d0:	77 c0       	rjmp	.+238    	; 0x23c0 <DIO_vSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinVal == LOW)
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	88 23       	and	r24, r24
    22d6:	09 f0       	breq	.+2      	; 0x22da <DIO_vSetPinValue+0x108>
    22d8:	73 c0       	rjmp	.+230    	; 0x23c0 <DIO_vSetPinValue+0x1ee>
	{
		switch(Copy_u8PortName)
    22da:	89 81       	ldd	r24, Y+1	; 0x01
    22dc:	28 2f       	mov	r18, r24
    22de:	30 e0       	ldi	r19, 0x00	; 0
    22e0:	3d 83       	std	Y+5, r19	; 0x05
    22e2:	2c 83       	std	Y+4, r18	; 0x04
    22e4:	8c 81       	ldd	r24, Y+4	; 0x04
    22e6:	9d 81       	ldd	r25, Y+5	; 0x05
    22e8:	81 30       	cpi	r24, 0x01	; 1
    22ea:	91 05       	cpc	r25, r1
    22ec:	59 f1       	breq	.+86     	; 0x2344 <DIO_vSetPinValue+0x172>
    22ee:	2c 81       	ldd	r18, Y+4	; 0x04
    22f0:	3d 81       	ldd	r19, Y+5	; 0x05
    22f2:	22 30       	cpi	r18, 0x02	; 2
    22f4:	31 05       	cpc	r19, r1
    22f6:	2c f4       	brge	.+10     	; 0x2302 <DIO_vSetPinValue+0x130>
    22f8:	8c 81       	ldd	r24, Y+4	; 0x04
    22fa:	9d 81       	ldd	r25, Y+5	; 0x05
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	69 f0       	breq	.+26     	; 0x231a <DIO_vSetPinValue+0x148>
    2300:	5f c0       	rjmp	.+190    	; 0x23c0 <DIO_vSetPinValue+0x1ee>
    2302:	2c 81       	ldd	r18, Y+4	; 0x04
    2304:	3d 81       	ldd	r19, Y+5	; 0x05
    2306:	22 30       	cpi	r18, 0x02	; 2
    2308:	31 05       	cpc	r19, r1
    230a:	89 f1       	breq	.+98     	; 0x236e <DIO_vSetPinValue+0x19c>
    230c:	8c 81       	ldd	r24, Y+4	; 0x04
    230e:	9d 81       	ldd	r25, Y+5	; 0x05
    2310:	83 30       	cpi	r24, 0x03	; 3
    2312:	91 05       	cpc	r25, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <DIO_vSetPinValue+0x146>
    2316:	40 c0       	rjmp	.+128    	; 0x2398 <DIO_vSetPinValue+0x1c6>
    2318:	53 c0       	rjmp	.+166    	; 0x23c0 <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: CLR_BIT(PORTA_REG, Copy_u8PinNum); break;
    231a:	ab e3       	ldi	r26, 0x3B	; 59
    231c:	b0 e0       	ldi	r27, 0x00	; 0
    231e:	eb e3       	ldi	r30, 0x3B	; 59
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	80 81       	ld	r24, Z
    2324:	48 2f       	mov	r20, r24
    2326:	8a 81       	ldd	r24, Y+2	; 0x02
    2328:	28 2f       	mov	r18, r24
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	81 e0       	ldi	r24, 0x01	; 1
    232e:	90 e0       	ldi	r25, 0x00	; 0
    2330:	02 2e       	mov	r0, r18
    2332:	02 c0       	rjmp	.+4      	; 0x2338 <DIO_vSetPinValue+0x166>
    2334:	88 0f       	add	r24, r24
    2336:	99 1f       	adc	r25, r25
    2338:	0a 94       	dec	r0
    233a:	e2 f7       	brpl	.-8      	; 0x2334 <DIO_vSetPinValue+0x162>
    233c:	80 95       	com	r24
    233e:	84 23       	and	r24, r20
    2340:	8c 93       	st	X, r24
    2342:	3e c0       	rjmp	.+124    	; 0x23c0 <DIO_vSetPinValue+0x1ee>
		case PORTB: CLR_BIT(PORTB_REG, Copy_u8PinNum); break;
    2344:	a8 e3       	ldi	r26, 0x38	; 56
    2346:	b0 e0       	ldi	r27, 0x00	; 0
    2348:	e8 e3       	ldi	r30, 0x38	; 56
    234a:	f0 e0       	ldi	r31, 0x00	; 0
    234c:	80 81       	ld	r24, Z
    234e:	48 2f       	mov	r20, r24
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	28 2f       	mov	r18, r24
    2354:	30 e0       	ldi	r19, 0x00	; 0
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	90 e0       	ldi	r25, 0x00	; 0
    235a:	02 2e       	mov	r0, r18
    235c:	02 c0       	rjmp	.+4      	; 0x2362 <DIO_vSetPinValue+0x190>
    235e:	88 0f       	add	r24, r24
    2360:	99 1f       	adc	r25, r25
    2362:	0a 94       	dec	r0
    2364:	e2 f7       	brpl	.-8      	; 0x235e <DIO_vSetPinValue+0x18c>
    2366:	80 95       	com	r24
    2368:	84 23       	and	r24, r20
    236a:	8c 93       	st	X, r24
    236c:	29 c0       	rjmp	.+82     	; 0x23c0 <DIO_vSetPinValue+0x1ee>
		case PORTC: CLR_BIT(PORTC_REG, Copy_u8PinNum); break;
    236e:	a5 e3       	ldi	r26, 0x35	; 53
    2370:	b0 e0       	ldi	r27, 0x00	; 0
    2372:	e5 e3       	ldi	r30, 0x35	; 53
    2374:	f0 e0       	ldi	r31, 0x00	; 0
    2376:	80 81       	ld	r24, Z
    2378:	48 2f       	mov	r20, r24
    237a:	8a 81       	ldd	r24, Y+2	; 0x02
    237c:	28 2f       	mov	r18, r24
    237e:	30 e0       	ldi	r19, 0x00	; 0
    2380:	81 e0       	ldi	r24, 0x01	; 1
    2382:	90 e0       	ldi	r25, 0x00	; 0
    2384:	02 2e       	mov	r0, r18
    2386:	02 c0       	rjmp	.+4      	; 0x238c <DIO_vSetPinValue+0x1ba>
    2388:	88 0f       	add	r24, r24
    238a:	99 1f       	adc	r25, r25
    238c:	0a 94       	dec	r0
    238e:	e2 f7       	brpl	.-8      	; 0x2388 <DIO_vSetPinValue+0x1b6>
    2390:	80 95       	com	r24
    2392:	84 23       	and	r24, r20
    2394:	8c 93       	st	X, r24
    2396:	14 c0       	rjmp	.+40     	; 0x23c0 <DIO_vSetPinValue+0x1ee>
		case PORTD: CLR_BIT(PORTD_REG, Copy_u8PinNum); break;
    2398:	a2 e3       	ldi	r26, 0x32	; 50
    239a:	b0 e0       	ldi	r27, 0x00	; 0
    239c:	e2 e3       	ldi	r30, 0x32	; 50
    239e:	f0 e0       	ldi	r31, 0x00	; 0
    23a0:	80 81       	ld	r24, Z
    23a2:	48 2f       	mov	r20, r24
    23a4:	8a 81       	ldd	r24, Y+2	; 0x02
    23a6:	28 2f       	mov	r18, r24
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	81 e0       	ldi	r24, 0x01	; 1
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	02 2e       	mov	r0, r18
    23b0:	02 c0       	rjmp	.+4      	; 0x23b6 <DIO_vSetPinValue+0x1e4>
    23b2:	88 0f       	add	r24, r24
    23b4:	99 1f       	adc	r25, r25
    23b6:	0a 94       	dec	r0
    23b8:	e2 f7       	brpl	.-8      	; 0x23b2 <DIO_vSetPinValue+0x1e0>
    23ba:	80 95       	com	r24
    23bc:	84 23       	and	r24, r20
    23be:	8c 93       	st	X, r24
		}
	}
}
    23c0:	27 96       	adiw	r28, 0x07	; 7
    23c2:	0f b6       	in	r0, 0x3f	; 63
    23c4:	f8 94       	cli
    23c6:	de bf       	out	0x3e, r29	; 62
    23c8:	0f be       	out	0x3f, r0	; 63
    23ca:	cd bf       	out	0x3d, r28	; 61
    23cc:	cf 91       	pop	r28
    23ce:	df 91       	pop	r29
    23d0:	08 95       	ret

000023d2 <DIO_u8ReadPinValue>:

//reads value on 1 pin in a port
u8 DIO_u8ReadPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum){
    23d2:	df 93       	push	r29
    23d4:	cf 93       	push	r28
    23d6:	00 d0       	rcall	.+0      	; 0x23d8 <DIO_u8ReadPinValue+0x6>
    23d8:	00 d0       	rcall	.+0      	; 0x23da <DIO_u8ReadPinValue+0x8>
    23da:	0f 92       	push	r0
    23dc:	cd b7       	in	r28, 0x3d	; 61
    23de:	de b7       	in	r29, 0x3e	; 62
    23e0:	8a 83       	std	Y+2, r24	; 0x02
    23e2:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReadValue = 0;
    23e4:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    23e6:	8a 81       	ldd	r24, Y+2	; 0x02
    23e8:	28 2f       	mov	r18, r24
    23ea:	30 e0       	ldi	r19, 0x00	; 0
    23ec:	3d 83       	std	Y+5, r19	; 0x05
    23ee:	2c 83       	std	Y+4, r18	; 0x04
    23f0:	4c 81       	ldd	r20, Y+4	; 0x04
    23f2:	5d 81       	ldd	r21, Y+5	; 0x05
    23f4:	41 30       	cpi	r20, 0x01	; 1
    23f6:	51 05       	cpc	r21, r1
    23f8:	41 f1       	breq	.+80     	; 0x244a <DIO_u8ReadPinValue+0x78>
    23fa:	8c 81       	ldd	r24, Y+4	; 0x04
    23fc:	9d 81       	ldd	r25, Y+5	; 0x05
    23fe:	82 30       	cpi	r24, 0x02	; 2
    2400:	91 05       	cpc	r25, r1
    2402:	34 f4       	brge	.+12     	; 0x2410 <DIO_u8ReadPinValue+0x3e>
    2404:	2c 81       	ldd	r18, Y+4	; 0x04
    2406:	3d 81       	ldd	r19, Y+5	; 0x05
    2408:	21 15       	cp	r18, r1
    240a:	31 05       	cpc	r19, r1
    240c:	61 f0       	breq	.+24     	; 0x2426 <DIO_u8ReadPinValue+0x54>
    240e:	52 c0       	rjmp	.+164    	; 0x24b4 <DIO_u8ReadPinValue+0xe2>
    2410:	4c 81       	ldd	r20, Y+4	; 0x04
    2412:	5d 81       	ldd	r21, Y+5	; 0x05
    2414:	42 30       	cpi	r20, 0x02	; 2
    2416:	51 05       	cpc	r21, r1
    2418:	51 f1       	breq	.+84     	; 0x246e <DIO_u8ReadPinValue+0x9c>
    241a:	8c 81       	ldd	r24, Y+4	; 0x04
    241c:	9d 81       	ldd	r25, Y+5	; 0x05
    241e:	83 30       	cpi	r24, 0x03	; 3
    2420:	91 05       	cpc	r25, r1
    2422:	b9 f1       	breq	.+110    	; 0x2492 <DIO_u8ReadPinValue+0xc0>
    2424:	47 c0       	rjmp	.+142    	; 0x24b4 <DIO_u8ReadPinValue+0xe2>
	{
	case PORTA: Local_u8ReadValue = GET_BIT(PINA_REG, Copy_u8PinNum); break;
    2426:	e9 e3       	ldi	r30, 0x39	; 57
    2428:	f0 e0       	ldi	r31, 0x00	; 0
    242a:	80 81       	ld	r24, Z
    242c:	28 2f       	mov	r18, r24
    242e:	30 e0       	ldi	r19, 0x00	; 0
    2430:	8b 81       	ldd	r24, Y+3	; 0x03
    2432:	88 2f       	mov	r24, r24
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	a9 01       	movw	r20, r18
    2438:	02 c0       	rjmp	.+4      	; 0x243e <DIO_u8ReadPinValue+0x6c>
    243a:	55 95       	asr	r21
    243c:	47 95       	ror	r20
    243e:	8a 95       	dec	r24
    2440:	e2 f7       	brpl	.-8      	; 0x243a <DIO_u8ReadPinValue+0x68>
    2442:	ca 01       	movw	r24, r20
    2444:	81 70       	andi	r24, 0x01	; 1
    2446:	89 83       	std	Y+1, r24	; 0x01
    2448:	35 c0       	rjmp	.+106    	; 0x24b4 <DIO_u8ReadPinValue+0xe2>
	case PORTB: Local_u8ReadValue = GET_BIT(PINB_REG, Copy_u8PinNum); break;
    244a:	e6 e3       	ldi	r30, 0x36	; 54
    244c:	f0 e0       	ldi	r31, 0x00	; 0
    244e:	80 81       	ld	r24, Z
    2450:	28 2f       	mov	r18, r24
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	8b 81       	ldd	r24, Y+3	; 0x03
    2456:	88 2f       	mov	r24, r24
    2458:	90 e0       	ldi	r25, 0x00	; 0
    245a:	a9 01       	movw	r20, r18
    245c:	02 c0       	rjmp	.+4      	; 0x2462 <DIO_u8ReadPinValue+0x90>
    245e:	55 95       	asr	r21
    2460:	47 95       	ror	r20
    2462:	8a 95       	dec	r24
    2464:	e2 f7       	brpl	.-8      	; 0x245e <DIO_u8ReadPinValue+0x8c>
    2466:	ca 01       	movw	r24, r20
    2468:	81 70       	andi	r24, 0x01	; 1
    246a:	89 83       	std	Y+1, r24	; 0x01
    246c:	23 c0       	rjmp	.+70     	; 0x24b4 <DIO_u8ReadPinValue+0xe2>
	case PORTC: Local_u8ReadValue = GET_BIT(PINC_REG, Copy_u8PinNum); break;
    246e:	e3 e3       	ldi	r30, 0x33	; 51
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	80 81       	ld	r24, Z
    2474:	28 2f       	mov	r18, r24
    2476:	30 e0       	ldi	r19, 0x00	; 0
    2478:	8b 81       	ldd	r24, Y+3	; 0x03
    247a:	88 2f       	mov	r24, r24
    247c:	90 e0       	ldi	r25, 0x00	; 0
    247e:	a9 01       	movw	r20, r18
    2480:	02 c0       	rjmp	.+4      	; 0x2486 <DIO_u8ReadPinValue+0xb4>
    2482:	55 95       	asr	r21
    2484:	47 95       	ror	r20
    2486:	8a 95       	dec	r24
    2488:	e2 f7       	brpl	.-8      	; 0x2482 <DIO_u8ReadPinValue+0xb0>
    248a:	ca 01       	movw	r24, r20
    248c:	81 70       	andi	r24, 0x01	; 1
    248e:	89 83       	std	Y+1, r24	; 0x01
    2490:	11 c0       	rjmp	.+34     	; 0x24b4 <DIO_u8ReadPinValue+0xe2>
	case PORTD: Local_u8ReadValue = GET_BIT(PIND_REG, Copy_u8PinNum); break;
    2492:	e0 e3       	ldi	r30, 0x30	; 48
    2494:	f0 e0       	ldi	r31, 0x00	; 0
    2496:	80 81       	ld	r24, Z
    2498:	28 2f       	mov	r18, r24
    249a:	30 e0       	ldi	r19, 0x00	; 0
    249c:	8b 81       	ldd	r24, Y+3	; 0x03
    249e:	88 2f       	mov	r24, r24
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	a9 01       	movw	r20, r18
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <DIO_u8ReadPinValue+0xd8>
    24a6:	55 95       	asr	r21
    24a8:	47 95       	ror	r20
    24aa:	8a 95       	dec	r24
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <DIO_u8ReadPinValue+0xd4>
    24ae:	ca 01       	movw	r24, r20
    24b0:	81 70       	andi	r24, 0x01	; 1
    24b2:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    24b4:	89 81       	ldd	r24, Y+1	; 0x01
}
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	0f 90       	pop	r0
    24c0:	cf 91       	pop	r28
    24c2:	df 91       	pop	r29
    24c4:	08 95       	ret

000024c6 <DIO_vTogglePinValue>:

void DIO_vTogglePinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum){
    24c6:	df 93       	push	r29
    24c8:	cf 93       	push	r28
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <DIO_vTogglePinValue+0x6>
    24cc:	00 d0       	rcall	.+0      	; 0x24ce <DIO_vTogglePinValue+0x8>
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    24d6:	89 81       	ldd	r24, Y+1	; 0x01
    24d8:	28 2f       	mov	r18, r24
    24da:	30 e0       	ldi	r19, 0x00	; 0
    24dc:	3c 83       	std	Y+4, r19	; 0x04
    24de:	2b 83       	std	Y+3, r18	; 0x03
    24e0:	8b 81       	ldd	r24, Y+3	; 0x03
    24e2:	9c 81       	ldd	r25, Y+4	; 0x04
    24e4:	81 30       	cpi	r24, 0x01	; 1
    24e6:	91 05       	cpc	r25, r1
    24e8:	49 f1       	breq	.+82     	; 0x253c <DIO_vTogglePinValue+0x76>
    24ea:	2b 81       	ldd	r18, Y+3	; 0x03
    24ec:	3c 81       	ldd	r19, Y+4	; 0x04
    24ee:	22 30       	cpi	r18, 0x02	; 2
    24f0:	31 05       	cpc	r19, r1
    24f2:	2c f4       	brge	.+10     	; 0x24fe <DIO_vTogglePinValue+0x38>
    24f4:	8b 81       	ldd	r24, Y+3	; 0x03
    24f6:	9c 81       	ldd	r25, Y+4	; 0x04
    24f8:	00 97       	sbiw	r24, 0x00	; 0
    24fa:	61 f0       	breq	.+24     	; 0x2514 <DIO_vTogglePinValue+0x4e>
    24fc:	5a c0       	rjmp	.+180    	; 0x25b2 <DIO_vTogglePinValue+0xec>
    24fe:	2b 81       	ldd	r18, Y+3	; 0x03
    2500:	3c 81       	ldd	r19, Y+4	; 0x04
    2502:	22 30       	cpi	r18, 0x02	; 2
    2504:	31 05       	cpc	r19, r1
    2506:	71 f1       	breq	.+92     	; 0x2564 <DIO_vTogglePinValue+0x9e>
    2508:	8b 81       	ldd	r24, Y+3	; 0x03
    250a:	9c 81       	ldd	r25, Y+4	; 0x04
    250c:	83 30       	cpi	r24, 0x03	; 3
    250e:	91 05       	cpc	r25, r1
    2510:	e9 f1       	breq	.+122    	; 0x258c <DIO_vTogglePinValue+0xc6>
    2512:	4f c0       	rjmp	.+158    	; 0x25b2 <DIO_vTogglePinValue+0xec>
	{
	case PORTA: TOG_BIT(PORTA_REG, Copy_u8PinNum); break;
    2514:	ab e3       	ldi	r26, 0x3B	; 59
    2516:	b0 e0       	ldi	r27, 0x00	; 0
    2518:	eb e3       	ldi	r30, 0x3B	; 59
    251a:	f0 e0       	ldi	r31, 0x00	; 0
    251c:	80 81       	ld	r24, Z
    251e:	48 2f       	mov	r20, r24
    2520:	8a 81       	ldd	r24, Y+2	; 0x02
    2522:	28 2f       	mov	r18, r24
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	81 e0       	ldi	r24, 0x01	; 1
    2528:	90 e0       	ldi	r25, 0x00	; 0
    252a:	02 2e       	mov	r0, r18
    252c:	02 c0       	rjmp	.+4      	; 0x2532 <DIO_vTogglePinValue+0x6c>
    252e:	88 0f       	add	r24, r24
    2530:	99 1f       	adc	r25, r25
    2532:	0a 94       	dec	r0
    2534:	e2 f7       	brpl	.-8      	; 0x252e <DIO_vTogglePinValue+0x68>
    2536:	84 27       	eor	r24, r20
    2538:	8c 93       	st	X, r24
    253a:	3b c0       	rjmp	.+118    	; 0x25b2 <DIO_vTogglePinValue+0xec>
	case PORTB: TOG_BIT(PORTB_REG, Copy_u8PinNum); break;
    253c:	a8 e3       	ldi	r26, 0x38	; 56
    253e:	b0 e0       	ldi	r27, 0x00	; 0
    2540:	e8 e3       	ldi	r30, 0x38	; 56
    2542:	f0 e0       	ldi	r31, 0x00	; 0
    2544:	80 81       	ld	r24, Z
    2546:	48 2f       	mov	r20, r24
    2548:	8a 81       	ldd	r24, Y+2	; 0x02
    254a:	28 2f       	mov	r18, r24
    254c:	30 e0       	ldi	r19, 0x00	; 0
    254e:	81 e0       	ldi	r24, 0x01	; 1
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	02 2e       	mov	r0, r18
    2554:	02 c0       	rjmp	.+4      	; 0x255a <DIO_vTogglePinValue+0x94>
    2556:	88 0f       	add	r24, r24
    2558:	99 1f       	adc	r25, r25
    255a:	0a 94       	dec	r0
    255c:	e2 f7       	brpl	.-8      	; 0x2556 <DIO_vTogglePinValue+0x90>
    255e:	84 27       	eor	r24, r20
    2560:	8c 93       	st	X, r24
    2562:	27 c0       	rjmp	.+78     	; 0x25b2 <DIO_vTogglePinValue+0xec>
	case PORTC: TOG_BIT(PORTC_REG, Copy_u8PinNum); break;
    2564:	a5 e3       	ldi	r26, 0x35	; 53
    2566:	b0 e0       	ldi	r27, 0x00	; 0
    2568:	e5 e3       	ldi	r30, 0x35	; 53
    256a:	f0 e0       	ldi	r31, 0x00	; 0
    256c:	80 81       	ld	r24, Z
    256e:	48 2f       	mov	r20, r24
    2570:	8a 81       	ldd	r24, Y+2	; 0x02
    2572:	28 2f       	mov	r18, r24
    2574:	30 e0       	ldi	r19, 0x00	; 0
    2576:	81 e0       	ldi	r24, 0x01	; 1
    2578:	90 e0       	ldi	r25, 0x00	; 0
    257a:	02 2e       	mov	r0, r18
    257c:	02 c0       	rjmp	.+4      	; 0x2582 <DIO_vTogglePinValue+0xbc>
    257e:	88 0f       	add	r24, r24
    2580:	99 1f       	adc	r25, r25
    2582:	0a 94       	dec	r0
    2584:	e2 f7       	brpl	.-8      	; 0x257e <DIO_vTogglePinValue+0xb8>
    2586:	84 27       	eor	r24, r20
    2588:	8c 93       	st	X, r24
    258a:	13 c0       	rjmp	.+38     	; 0x25b2 <DIO_vTogglePinValue+0xec>
	case PORTD: TOG_BIT(PORTD_REG, Copy_u8PinNum); break;
    258c:	a2 e3       	ldi	r26, 0x32	; 50
    258e:	b0 e0       	ldi	r27, 0x00	; 0
    2590:	e2 e3       	ldi	r30, 0x32	; 50
    2592:	f0 e0       	ldi	r31, 0x00	; 0
    2594:	80 81       	ld	r24, Z
    2596:	48 2f       	mov	r20, r24
    2598:	8a 81       	ldd	r24, Y+2	; 0x02
    259a:	28 2f       	mov	r18, r24
    259c:	30 e0       	ldi	r19, 0x00	; 0
    259e:	81 e0       	ldi	r24, 0x01	; 1
    25a0:	90 e0       	ldi	r25, 0x00	; 0
    25a2:	02 2e       	mov	r0, r18
    25a4:	02 c0       	rjmp	.+4      	; 0x25aa <DIO_vTogglePinValue+0xe4>
    25a6:	88 0f       	add	r24, r24
    25a8:	99 1f       	adc	r25, r25
    25aa:	0a 94       	dec	r0
    25ac:	e2 f7       	brpl	.-8      	; 0x25a6 <DIO_vTogglePinValue+0xe0>
    25ae:	84 27       	eor	r24, r20
    25b0:	8c 93       	st	X, r24
	}
}
    25b2:	0f 90       	pop	r0
    25b4:	0f 90       	pop	r0
    25b6:	0f 90       	pop	r0
    25b8:	0f 90       	pop	r0
    25ba:	cf 91       	pop	r28
    25bc:	df 91       	pop	r29
    25be:	08 95       	ret

000025c0 <DIO_vSetGroupDir>:

//sets data direction of all 8 pins in a port
void DIO_vSetGroupDir(u8 Copy_u8PortName, u8 Copy_u8PortDir){
    25c0:	df 93       	push	r29
    25c2:	cf 93       	push	r28
    25c4:	00 d0       	rcall	.+0      	; 0x25c6 <DIO_vSetGroupDir+0x6>
    25c6:	00 d0       	rcall	.+0      	; 0x25c8 <DIO_vSetGroupDir+0x8>
    25c8:	00 d0       	rcall	.+0      	; 0x25ca <DIO_vSetGroupDir+0xa>
    25ca:	cd b7       	in	r28, 0x3d	; 61
    25cc:	de b7       	in	r29, 0x3e	; 62
    25ce:	89 83       	std	Y+1, r24	; 0x01
    25d0:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortDir == OUTPUT)
    25d2:	8a 81       	ldd	r24, Y+2	; 0x02
    25d4:	81 30       	cpi	r24, 0x01	; 1
    25d6:	99 f5       	brne	.+102    	; 0x263e <DIO_vSetGroupDir+0x7e>
	{
		switch(Copy_u8PortName)
    25d8:	89 81       	ldd	r24, Y+1	; 0x01
    25da:	28 2f       	mov	r18, r24
    25dc:	30 e0       	ldi	r19, 0x00	; 0
    25de:	3e 83       	std	Y+6, r19	; 0x06
    25e0:	2d 83       	std	Y+5, r18	; 0x05
    25e2:	8d 81       	ldd	r24, Y+5	; 0x05
    25e4:	9e 81       	ldd	r25, Y+6	; 0x06
    25e6:	81 30       	cpi	r24, 0x01	; 1
    25e8:	91 05       	cpc	r25, r1
    25ea:	d1 f0       	breq	.+52     	; 0x2620 <DIO_vSetGroupDir+0x60>
    25ec:	2d 81       	ldd	r18, Y+5	; 0x05
    25ee:	3e 81       	ldd	r19, Y+6	; 0x06
    25f0:	22 30       	cpi	r18, 0x02	; 2
    25f2:	31 05       	cpc	r19, r1
    25f4:	2c f4       	brge	.+10     	; 0x2600 <DIO_vSetGroupDir+0x40>
    25f6:	8d 81       	ldd	r24, Y+5	; 0x05
    25f8:	9e 81       	ldd	r25, Y+6	; 0x06
    25fa:	00 97       	sbiw	r24, 0x00	; 0
    25fc:	61 f0       	breq	.+24     	; 0x2616 <DIO_vSetGroupDir+0x56>
    25fe:	50 c0       	rjmp	.+160    	; 0x26a0 <DIO_vSetGroupDir+0xe0>
    2600:	2d 81       	ldd	r18, Y+5	; 0x05
    2602:	3e 81       	ldd	r19, Y+6	; 0x06
    2604:	22 30       	cpi	r18, 0x02	; 2
    2606:	31 05       	cpc	r19, r1
    2608:	81 f0       	breq	.+32     	; 0x262a <DIO_vSetGroupDir+0x6a>
    260a:	8d 81       	ldd	r24, Y+5	; 0x05
    260c:	9e 81       	ldd	r25, Y+6	; 0x06
    260e:	83 30       	cpi	r24, 0x03	; 3
    2610:	91 05       	cpc	r25, r1
    2612:	81 f0       	breq	.+32     	; 0x2634 <DIO_vSetGroupDir+0x74>
    2614:	45 c0       	rjmp	.+138    	; 0x26a0 <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0xFF; break;
    2616:	ea e3       	ldi	r30, 0x3A	; 58
    2618:	f0 e0       	ldi	r31, 0x00	; 0
    261a:	8f ef       	ldi	r24, 0xFF	; 255
    261c:	80 83       	st	Z, r24
    261e:	40 c0       	rjmp	.+128    	; 0x26a0 <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0xFF; break;
    2620:	e7 e3       	ldi	r30, 0x37	; 55
    2622:	f0 e0       	ldi	r31, 0x00	; 0
    2624:	8f ef       	ldi	r24, 0xFF	; 255
    2626:	80 83       	st	Z, r24
    2628:	3b c0       	rjmp	.+118    	; 0x26a0 <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0xFF; break;
    262a:	e4 e3       	ldi	r30, 0x34	; 52
    262c:	f0 e0       	ldi	r31, 0x00	; 0
    262e:	8f ef       	ldi	r24, 0xFF	; 255
    2630:	80 83       	st	Z, r24
    2632:	36 c0       	rjmp	.+108    	; 0x26a0 <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0xFF; break;
    2634:	e1 e3       	ldi	r30, 0x31	; 49
    2636:	f0 e0       	ldi	r31, 0x00	; 0
    2638:	8f ef       	ldi	r24, 0xFF	; 255
    263a:	80 83       	st	Z, r24
    263c:	31 c0       	rjmp	.+98     	; 0x26a0 <DIO_vSetGroupDir+0xe0>
		}
	}
	else if(Copy_u8PortDir == INPUT)
    263e:	8a 81       	ldd	r24, Y+2	; 0x02
    2640:	88 23       	and	r24, r24
    2642:	71 f5       	brne	.+92     	; 0x26a0 <DIO_vSetGroupDir+0xe0>
	{
		switch(Copy_u8PortName)
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	28 2f       	mov	r18, r24
    2648:	30 e0       	ldi	r19, 0x00	; 0
    264a:	3c 83       	std	Y+4, r19	; 0x04
    264c:	2b 83       	std	Y+3, r18	; 0x03
    264e:	8b 81       	ldd	r24, Y+3	; 0x03
    2650:	9c 81       	ldd	r25, Y+4	; 0x04
    2652:	81 30       	cpi	r24, 0x01	; 1
    2654:	91 05       	cpc	r25, r1
    2656:	c9 f0       	breq	.+50     	; 0x268a <DIO_vSetGroupDir+0xca>
    2658:	2b 81       	ldd	r18, Y+3	; 0x03
    265a:	3c 81       	ldd	r19, Y+4	; 0x04
    265c:	22 30       	cpi	r18, 0x02	; 2
    265e:	31 05       	cpc	r19, r1
    2660:	2c f4       	brge	.+10     	; 0x266c <DIO_vSetGroupDir+0xac>
    2662:	8b 81       	ldd	r24, Y+3	; 0x03
    2664:	9c 81       	ldd	r25, Y+4	; 0x04
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	61 f0       	breq	.+24     	; 0x2682 <DIO_vSetGroupDir+0xc2>
    266a:	1a c0       	rjmp	.+52     	; 0x26a0 <DIO_vSetGroupDir+0xe0>
    266c:	2b 81       	ldd	r18, Y+3	; 0x03
    266e:	3c 81       	ldd	r19, Y+4	; 0x04
    2670:	22 30       	cpi	r18, 0x02	; 2
    2672:	31 05       	cpc	r19, r1
    2674:	71 f0       	breq	.+28     	; 0x2692 <DIO_vSetGroupDir+0xd2>
    2676:	8b 81       	ldd	r24, Y+3	; 0x03
    2678:	9c 81       	ldd	r25, Y+4	; 0x04
    267a:	83 30       	cpi	r24, 0x03	; 3
    267c:	91 05       	cpc	r25, r1
    267e:	69 f0       	breq	.+26     	; 0x269a <DIO_vSetGroupDir+0xda>
    2680:	0f c0       	rjmp	.+30     	; 0x26a0 <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0x00; break;
    2682:	ea e3       	ldi	r30, 0x3A	; 58
    2684:	f0 e0       	ldi	r31, 0x00	; 0
    2686:	10 82       	st	Z, r1
    2688:	0b c0       	rjmp	.+22     	; 0x26a0 <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0x00; break;
    268a:	e7 e3       	ldi	r30, 0x37	; 55
    268c:	f0 e0       	ldi	r31, 0x00	; 0
    268e:	10 82       	st	Z, r1
    2690:	07 c0       	rjmp	.+14     	; 0x26a0 <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0x00; break;
    2692:	e4 e3       	ldi	r30, 0x34	; 52
    2694:	f0 e0       	ldi	r31, 0x00	; 0
    2696:	10 82       	st	Z, r1
    2698:	03 c0       	rjmp	.+6      	; 0x26a0 <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0x00; break;
    269a:	e1 e3       	ldi	r30, 0x31	; 49
    269c:	f0 e0       	ldi	r31, 0x00	; 0
    269e:	10 82       	st	Z, r1
		}
	}
}
    26a0:	26 96       	adiw	r28, 0x06	; 6
    26a2:	0f b6       	in	r0, 0x3f	; 63
    26a4:	f8 94       	cli
    26a6:	de bf       	out	0x3e, r29	; 62
    26a8:	0f be       	out	0x3f, r0	; 63
    26aa:	cd bf       	out	0x3d, r28	; 61
    26ac:	cf 91       	pop	r28
    26ae:	df 91       	pop	r29
    26b0:	08 95       	ret

000026b2 <DIO_vSetGroupValue>:

//sets value of all 8 pins in a port
void DIO_vSetGroupValue(u8 Copy_u8PortName, u8 Copy_u8PortValue){
    26b2:	df 93       	push	r29
    26b4:	cf 93       	push	r28
    26b6:	cd b7       	in	r28, 0x3d	; 61
    26b8:	de b7       	in	r29, 0x3e	; 62
    26ba:	28 97       	sbiw	r28, 0x08	; 8
    26bc:	0f b6       	in	r0, 0x3f	; 63
    26be:	f8 94       	cli
    26c0:	de bf       	out	0x3e, r29	; 62
    26c2:	0f be       	out	0x3f, r0	; 63
    26c4:	cd bf       	out	0x3d, r28	; 61
    26c6:	89 83       	std	Y+1, r24	; 0x01
    26c8:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    26ca:	89 81       	ldd	r24, Y+1	; 0x01
    26cc:	28 2f       	mov	r18, r24
    26ce:	30 e0       	ldi	r19, 0x00	; 0
    26d0:	38 87       	std	Y+8, r19	; 0x08
    26d2:	2f 83       	std	Y+7, r18	; 0x07
    26d4:	8f 81       	ldd	r24, Y+7	; 0x07
    26d6:	98 85       	ldd	r25, Y+8	; 0x08
    26d8:	81 30       	cpi	r24, 0x01	; 1
    26da:	91 05       	cpc	r25, r1
    26dc:	e9 f0       	breq	.+58     	; 0x2718 <DIO_vSetGroupValue+0x66>
    26de:	2f 81       	ldd	r18, Y+7	; 0x07
    26e0:	38 85       	ldd	r19, Y+8	; 0x08
    26e2:	22 30       	cpi	r18, 0x02	; 2
    26e4:	31 05       	cpc	r19, r1
    26e6:	2c f4       	brge	.+10     	; 0x26f2 <DIO_vSetGroupValue+0x40>
    26e8:	8f 81       	ldd	r24, Y+7	; 0x07
    26ea:	98 85       	ldd	r25, Y+8	; 0x08
    26ec:	00 97       	sbiw	r24, 0x00	; 0
    26ee:	61 f0       	breq	.+24     	; 0x2708 <DIO_vSetGroupValue+0x56>
    26f0:	2a c0       	rjmp	.+84     	; 0x2746 <DIO_vSetGroupValue+0x94>
    26f2:	2f 81       	ldd	r18, Y+7	; 0x07
    26f4:	38 85       	ldd	r19, Y+8	; 0x08
    26f6:	22 30       	cpi	r18, 0x02	; 2
    26f8:	31 05       	cpc	r19, r1
    26fa:	b1 f0       	breq	.+44     	; 0x2728 <DIO_vSetGroupValue+0x76>
    26fc:	8f 81       	ldd	r24, Y+7	; 0x07
    26fe:	98 85       	ldd	r25, Y+8	; 0x08
    2700:	83 30       	cpi	r24, 0x03	; 3
    2702:	91 05       	cpc	r25, r1
    2704:	c9 f0       	breq	.+50     	; 0x2738 <DIO_vSetGroupValue+0x86>
    2706:	1f c0       	rjmp	.+62     	; 0x2746 <DIO_vSetGroupValue+0x94>
	{
	case PORTA: PORTA_REG = (PORTA_REG&0) | Copy_u8PortValue; break;
    2708:	eb e3       	ldi	r30, 0x3B	; 59
    270a:	f0 e0       	ldi	r31, 0x00	; 0
    270c:	90 81       	ld	r25, Z
    270e:	eb e3       	ldi	r30, 0x3B	; 59
    2710:	f0 e0       	ldi	r31, 0x00	; 0
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	80 83       	st	Z, r24
    2716:	17 c0       	rjmp	.+46     	; 0x2746 <DIO_vSetGroupValue+0x94>
	case PORTB: PORTB_REG = (PORTB_REG&0) | Copy_u8PortValue; break;
    2718:	e8 e3       	ldi	r30, 0x38	; 56
    271a:	f0 e0       	ldi	r31, 0x00	; 0
    271c:	20 81       	ld	r18, Z
    271e:	e8 e3       	ldi	r30, 0x38	; 56
    2720:	f0 e0       	ldi	r31, 0x00	; 0
    2722:	8a 81       	ldd	r24, Y+2	; 0x02
    2724:	80 83       	st	Z, r24
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <DIO_vSetGroupValue+0x94>
	case PORTC: PORTC_REG = (PORTC_REG&0) | Copy_u8PortValue; break;
    2728:	e5 e3       	ldi	r30, 0x35	; 53
    272a:	f0 e0       	ldi	r31, 0x00	; 0
    272c:	30 81       	ld	r19, Z
    272e:	e5 e3       	ldi	r30, 0x35	; 53
    2730:	f0 e0       	ldi	r31, 0x00	; 0
    2732:	8a 81       	ldd	r24, Y+2	; 0x02
    2734:	80 83       	st	Z, r24
    2736:	07 c0       	rjmp	.+14     	; 0x2746 <DIO_vSetGroupValue+0x94>
	case PORTD: PORTD_REG = (PORTD_REG&0) | Copy_u8PortValue; break;
    2738:	e2 e3       	ldi	r30, 0x32	; 50
    273a:	f0 e0       	ldi	r31, 0x00	; 0
    273c:	80 81       	ld	r24, Z
    273e:	e2 e3       	ldi	r30, 0x32	; 50
    2740:	f0 e0       	ldi	r31, 0x00	; 0
    2742:	8a 81       	ldd	r24, Y+2	; 0x02
    2744:	80 83       	st	Z, r24
	}
}
    2746:	28 96       	adiw	r28, 0x08	; 8
    2748:	0f b6       	in	r0, 0x3f	; 63
    274a:	f8 94       	cli
    274c:	de bf       	out	0x3e, r29	; 62
    274e:	0f be       	out	0x3f, r0	; 63
    2750:	cd bf       	out	0x3d, r28	; 61
    2752:	cf 91       	pop	r28
    2754:	df 91       	pop	r29
    2756:	08 95       	ret

00002758 <DIO_u8ReadGroupValue>:

//reads value on all 8 pins of a port
u8 DIO_u8ReadGroupValue(u8 Copy_u8PortName){
    2758:	df 93       	push	r29
    275a:	cf 93       	push	r28
    275c:	00 d0       	rcall	.+0      	; 0x275e <DIO_u8ReadGroupValue+0x6>
    275e:	00 d0       	rcall	.+0      	; 0x2760 <DIO_u8ReadGroupValue+0x8>
    2760:	cd b7       	in	r28, 0x3d	; 61
    2762:	de b7       	in	r29, 0x3e	; 62
    2764:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReadValue = 0;
    2766:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    2768:	8a 81       	ldd	r24, Y+2	; 0x02
    276a:	28 2f       	mov	r18, r24
    276c:	30 e0       	ldi	r19, 0x00	; 0
    276e:	3c 83       	std	Y+4, r19	; 0x04
    2770:	2b 83       	std	Y+3, r18	; 0x03
    2772:	8b 81       	ldd	r24, Y+3	; 0x03
    2774:	9c 81       	ldd	r25, Y+4	; 0x04
    2776:	81 30       	cpi	r24, 0x01	; 1
    2778:	91 05       	cpc	r25, r1
    277a:	d1 f0       	breq	.+52     	; 0x27b0 <DIO_u8ReadGroupValue+0x58>
    277c:	2b 81       	ldd	r18, Y+3	; 0x03
    277e:	3c 81       	ldd	r19, Y+4	; 0x04
    2780:	22 30       	cpi	r18, 0x02	; 2
    2782:	31 05       	cpc	r19, r1
    2784:	2c f4       	brge	.+10     	; 0x2790 <DIO_u8ReadGroupValue+0x38>
    2786:	8b 81       	ldd	r24, Y+3	; 0x03
    2788:	9c 81       	ldd	r25, Y+4	; 0x04
    278a:	00 97       	sbiw	r24, 0x00	; 0
    278c:	61 f0       	breq	.+24     	; 0x27a6 <DIO_u8ReadGroupValue+0x4e>
    278e:	1e c0       	rjmp	.+60     	; 0x27cc <DIO_u8ReadGroupValue+0x74>
    2790:	2b 81       	ldd	r18, Y+3	; 0x03
    2792:	3c 81       	ldd	r19, Y+4	; 0x04
    2794:	22 30       	cpi	r18, 0x02	; 2
    2796:	31 05       	cpc	r19, r1
    2798:	81 f0       	breq	.+32     	; 0x27ba <DIO_u8ReadGroupValue+0x62>
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	9c 81       	ldd	r25, Y+4	; 0x04
    279e:	83 30       	cpi	r24, 0x03	; 3
    27a0:	91 05       	cpc	r25, r1
    27a2:	81 f0       	breq	.+32     	; 0x27c4 <DIO_u8ReadGroupValue+0x6c>
    27a4:	13 c0       	rjmp	.+38     	; 0x27cc <DIO_u8ReadGroupValue+0x74>
	{
	case PORTA: Local_u8ReadValue = PINA_REG; break;
    27a6:	e9 e3       	ldi	r30, 0x39	; 57
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	80 81       	ld	r24, Z
    27ac:	89 83       	std	Y+1, r24	; 0x01
    27ae:	0e c0       	rjmp	.+28     	; 0x27cc <DIO_u8ReadGroupValue+0x74>
	case PORTB: Local_u8ReadValue = PINB_REG; break;
    27b0:	e6 e3       	ldi	r30, 0x36	; 54
    27b2:	f0 e0       	ldi	r31, 0x00	; 0
    27b4:	80 81       	ld	r24, Z
    27b6:	89 83       	std	Y+1, r24	; 0x01
    27b8:	09 c0       	rjmp	.+18     	; 0x27cc <DIO_u8ReadGroupValue+0x74>
	case PORTC: Local_u8ReadValue = PINC_REG; break;
    27ba:	e3 e3       	ldi	r30, 0x33	; 51
    27bc:	f0 e0       	ldi	r31, 0x00	; 0
    27be:	80 81       	ld	r24, Z
    27c0:	89 83       	std	Y+1, r24	; 0x01
    27c2:	04 c0       	rjmp	.+8      	; 0x27cc <DIO_u8ReadGroupValue+0x74>
	case PORTD: Local_u8ReadValue = PIND_REG; break;
    27c4:	e0 e3       	ldi	r30, 0x30	; 48
    27c6:	f0 e0       	ldi	r31, 0x00	; 0
    27c8:	80 81       	ld	r24, Z
    27ca:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    27cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    27ce:	0f 90       	pop	r0
    27d0:	0f 90       	pop	r0
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
    27d6:	cf 91       	pop	r28
    27d8:	df 91       	pop	r29
    27da:	08 95       	ret

000027dc <DIO_vSet4LSBDir>:

//sets data direction of 4 LSB pins of a port
void DIO_vSet4LSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    27dc:	df 93       	push	r29
    27de:	cf 93       	push	r28
    27e0:	00 d0       	rcall	.+0      	; 0x27e2 <DIO_vSet4LSBDir+0x6>
    27e2:	00 d0       	rcall	.+0      	; 0x27e4 <DIO_vSet4LSBDir+0x8>
    27e4:	00 d0       	rcall	.+0      	; 0x27e6 <DIO_vSet4LSBDir+0xa>
    27e6:	cd b7       	in	r28, 0x3d	; 61
    27e8:	de b7       	in	r29, 0x3e	; 62
    27ea:	89 83       	std	Y+1, r24	; 0x01
    27ec:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    27ee:	8a 81       	ldd	r24, Y+2	; 0x02
    27f0:	81 30       	cpi	r24, 0x01	; 1
    27f2:	09 f0       	breq	.+2      	; 0x27f6 <DIO_vSet4LSBDir+0x1a>
    27f4:	3f c0       	rjmp	.+126    	; 0x2874 <DIO_vSet4LSBDir+0x98>
	{
		switch(Copy_u8PortName)
    27f6:	89 81       	ldd	r24, Y+1	; 0x01
    27f8:	28 2f       	mov	r18, r24
    27fa:	30 e0       	ldi	r19, 0x00	; 0
    27fc:	3e 83       	std	Y+6, r19	; 0x06
    27fe:	2d 83       	std	Y+5, r18	; 0x05
    2800:	8d 81       	ldd	r24, Y+5	; 0x05
    2802:	9e 81       	ldd	r25, Y+6	; 0x06
    2804:	81 30       	cpi	r24, 0x01	; 1
    2806:	91 05       	cpc	r25, r1
    2808:	e9 f0       	breq	.+58     	; 0x2844 <DIO_vSet4LSBDir+0x68>
    280a:	2d 81       	ldd	r18, Y+5	; 0x05
    280c:	3e 81       	ldd	r19, Y+6	; 0x06
    280e:	22 30       	cpi	r18, 0x02	; 2
    2810:	31 05       	cpc	r19, r1
    2812:	2c f4       	brge	.+10     	; 0x281e <DIO_vSet4LSBDir+0x42>
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	61 f0       	breq	.+24     	; 0x2834 <DIO_vSet4LSBDir+0x58>
    281c:	6d c0       	rjmp	.+218    	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
    281e:	2d 81       	ldd	r18, Y+5	; 0x05
    2820:	3e 81       	ldd	r19, Y+6	; 0x06
    2822:	22 30       	cpi	r18, 0x02	; 2
    2824:	31 05       	cpc	r19, r1
    2826:	b1 f0       	breq	.+44     	; 0x2854 <DIO_vSet4LSBDir+0x78>
    2828:	8d 81       	ldd	r24, Y+5	; 0x05
    282a:	9e 81       	ldd	r25, Y+6	; 0x06
    282c:	83 30       	cpi	r24, 0x03	; 3
    282e:	91 05       	cpc	r25, r1
    2830:	c9 f0       	breq	.+50     	; 0x2864 <DIO_vSet4LSBDir+0x88>
    2832:	62 c0       	rjmp	.+196    	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0x0F; break;
    2834:	aa e3       	ldi	r26, 0x3A	; 58
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	ea e3       	ldi	r30, 0x3A	; 58
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	8f 60       	ori	r24, 0x0F	; 15
    2840:	8c 93       	st	X, r24
    2842:	5a c0       	rjmp	.+180    	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG |= 0x0F; break;
    2844:	a7 e3       	ldi	r26, 0x37	; 55
    2846:	b0 e0       	ldi	r27, 0x00	; 0
    2848:	e7 e3       	ldi	r30, 0x37	; 55
    284a:	f0 e0       	ldi	r31, 0x00	; 0
    284c:	80 81       	ld	r24, Z
    284e:	8f 60       	ori	r24, 0x0F	; 15
    2850:	8c 93       	st	X, r24
    2852:	52 c0       	rjmp	.+164    	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG |= 0x0F; break;
    2854:	a4 e3       	ldi	r26, 0x34	; 52
    2856:	b0 e0       	ldi	r27, 0x00	; 0
    2858:	e4 e3       	ldi	r30, 0x34	; 52
    285a:	f0 e0       	ldi	r31, 0x00	; 0
    285c:	80 81       	ld	r24, Z
    285e:	8f 60       	ori	r24, 0x0F	; 15
    2860:	8c 93       	st	X, r24
    2862:	4a c0       	rjmp	.+148    	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG |= 0x0F; break;
    2864:	a1 e3       	ldi	r26, 0x31	; 49
    2866:	b0 e0       	ldi	r27, 0x00	; 0
    2868:	e1 e3       	ldi	r30, 0x31	; 49
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	80 81       	ld	r24, Z
    286e:	8f 60       	ori	r24, 0x0F	; 15
    2870:	8c 93       	st	X, r24
    2872:	42 c0       	rjmp	.+132    	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    2874:	8a 81       	ldd	r24, Y+2	; 0x02
    2876:	88 23       	and	r24, r24
    2878:	09 f0       	breq	.+2      	; 0x287c <DIO_vSet4LSBDir+0xa0>
    287a:	3e c0       	rjmp	.+124    	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    287c:	89 81       	ldd	r24, Y+1	; 0x01
    287e:	28 2f       	mov	r18, r24
    2880:	30 e0       	ldi	r19, 0x00	; 0
    2882:	3c 83       	std	Y+4, r19	; 0x04
    2884:	2b 83       	std	Y+3, r18	; 0x03
    2886:	8b 81       	ldd	r24, Y+3	; 0x03
    2888:	9c 81       	ldd	r25, Y+4	; 0x04
    288a:	81 30       	cpi	r24, 0x01	; 1
    288c:	91 05       	cpc	r25, r1
    288e:	e9 f0       	breq	.+58     	; 0x28ca <DIO_vSet4LSBDir+0xee>
    2890:	2b 81       	ldd	r18, Y+3	; 0x03
    2892:	3c 81       	ldd	r19, Y+4	; 0x04
    2894:	22 30       	cpi	r18, 0x02	; 2
    2896:	31 05       	cpc	r19, r1
    2898:	2c f4       	brge	.+10     	; 0x28a4 <DIO_vSet4LSBDir+0xc8>
    289a:	8b 81       	ldd	r24, Y+3	; 0x03
    289c:	9c 81       	ldd	r25, Y+4	; 0x04
    289e:	00 97       	sbiw	r24, 0x00	; 0
    28a0:	61 f0       	breq	.+24     	; 0x28ba <DIO_vSet4LSBDir+0xde>
    28a2:	2a c0       	rjmp	.+84     	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
    28a4:	2b 81       	ldd	r18, Y+3	; 0x03
    28a6:	3c 81       	ldd	r19, Y+4	; 0x04
    28a8:	22 30       	cpi	r18, 0x02	; 2
    28aa:	31 05       	cpc	r19, r1
    28ac:	b1 f0       	breq	.+44     	; 0x28da <DIO_vSet4LSBDir+0xfe>
    28ae:	8b 81       	ldd	r24, Y+3	; 0x03
    28b0:	9c 81       	ldd	r25, Y+4	; 0x04
    28b2:	83 30       	cpi	r24, 0x03	; 3
    28b4:	91 05       	cpc	r25, r1
    28b6:	c9 f0       	breq	.+50     	; 0x28ea <DIO_vSet4LSBDir+0x10e>
    28b8:	1f c0       	rjmp	.+62     	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0xF0; break;
    28ba:	aa e3       	ldi	r26, 0x3A	; 58
    28bc:	b0 e0       	ldi	r27, 0x00	; 0
    28be:	ea e3       	ldi	r30, 0x3A	; 58
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	80 7f       	andi	r24, 0xF0	; 240
    28c6:	8c 93       	st	X, r24
    28c8:	17 c0       	rjmp	.+46     	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG &= 0xF0; break;
    28ca:	a7 e3       	ldi	r26, 0x37	; 55
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	e7 e3       	ldi	r30, 0x37	; 55
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	80 7f       	andi	r24, 0xF0	; 240
    28d6:	8c 93       	st	X, r24
    28d8:	0f c0       	rjmp	.+30     	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG &= 0xF0; break;
    28da:	a4 e3       	ldi	r26, 0x34	; 52
    28dc:	b0 e0       	ldi	r27, 0x00	; 0
    28de:	e4 e3       	ldi	r30, 0x34	; 52
    28e0:	f0 e0       	ldi	r31, 0x00	; 0
    28e2:	80 81       	ld	r24, Z
    28e4:	80 7f       	andi	r24, 0xF0	; 240
    28e6:	8c 93       	st	X, r24
    28e8:	07 c0       	rjmp	.+14     	; 0x28f8 <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG &= 0xF0; break;
    28ea:	a1 e3       	ldi	r26, 0x31	; 49
    28ec:	b0 e0       	ldi	r27, 0x00	; 0
    28ee:	e1 e3       	ldi	r30, 0x31	; 49
    28f0:	f0 e0       	ldi	r31, 0x00	; 0
    28f2:	80 81       	ld	r24, Z
    28f4:	80 7f       	andi	r24, 0xF0	; 240
    28f6:	8c 93       	st	X, r24
		}
	}
}
    28f8:	26 96       	adiw	r28, 0x06	; 6
    28fa:	0f b6       	in	r0, 0x3f	; 63
    28fc:	f8 94       	cli
    28fe:	de bf       	out	0x3e, r29	; 62
    2900:	0f be       	out	0x3f, r0	; 63
    2902:	cd bf       	out	0x3d, r28	; 61
    2904:	cf 91       	pop	r28
    2906:	df 91       	pop	r29
    2908:	08 95       	ret

0000290a <DIO_vSet4MSBDir>:

//sets data direction of 4 MSB pins of a port
void DIO_vSet4MSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    290a:	df 93       	push	r29
    290c:	cf 93       	push	r28
    290e:	00 d0       	rcall	.+0      	; 0x2910 <DIO_vSet4MSBDir+0x6>
    2910:	00 d0       	rcall	.+0      	; 0x2912 <DIO_vSet4MSBDir+0x8>
    2912:	00 d0       	rcall	.+0      	; 0x2914 <DIO_vSet4MSBDir+0xa>
    2914:	cd b7       	in	r28, 0x3d	; 61
    2916:	de b7       	in	r29, 0x3e	; 62
    2918:	89 83       	std	Y+1, r24	; 0x01
    291a:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    291c:	8a 81       	ldd	r24, Y+2	; 0x02
    291e:	81 30       	cpi	r24, 0x01	; 1
    2920:	09 f0       	breq	.+2      	; 0x2924 <DIO_vSet4MSBDir+0x1a>
    2922:	3f c0       	rjmp	.+126    	; 0x29a2 <DIO_vSet4MSBDir+0x98>
	{
		switch(Copy_u8PortName)
    2924:	89 81       	ldd	r24, Y+1	; 0x01
    2926:	28 2f       	mov	r18, r24
    2928:	30 e0       	ldi	r19, 0x00	; 0
    292a:	3e 83       	std	Y+6, r19	; 0x06
    292c:	2d 83       	std	Y+5, r18	; 0x05
    292e:	8d 81       	ldd	r24, Y+5	; 0x05
    2930:	9e 81       	ldd	r25, Y+6	; 0x06
    2932:	81 30       	cpi	r24, 0x01	; 1
    2934:	91 05       	cpc	r25, r1
    2936:	e9 f0       	breq	.+58     	; 0x2972 <DIO_vSet4MSBDir+0x68>
    2938:	2d 81       	ldd	r18, Y+5	; 0x05
    293a:	3e 81       	ldd	r19, Y+6	; 0x06
    293c:	22 30       	cpi	r18, 0x02	; 2
    293e:	31 05       	cpc	r19, r1
    2940:	2c f4       	brge	.+10     	; 0x294c <DIO_vSet4MSBDir+0x42>
    2942:	8d 81       	ldd	r24, Y+5	; 0x05
    2944:	9e 81       	ldd	r25, Y+6	; 0x06
    2946:	00 97       	sbiw	r24, 0x00	; 0
    2948:	61 f0       	breq	.+24     	; 0x2962 <DIO_vSet4MSBDir+0x58>
    294a:	6d c0       	rjmp	.+218    	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
    294c:	2d 81       	ldd	r18, Y+5	; 0x05
    294e:	3e 81       	ldd	r19, Y+6	; 0x06
    2950:	22 30       	cpi	r18, 0x02	; 2
    2952:	31 05       	cpc	r19, r1
    2954:	b1 f0       	breq	.+44     	; 0x2982 <DIO_vSet4MSBDir+0x78>
    2956:	8d 81       	ldd	r24, Y+5	; 0x05
    2958:	9e 81       	ldd	r25, Y+6	; 0x06
    295a:	83 30       	cpi	r24, 0x03	; 3
    295c:	91 05       	cpc	r25, r1
    295e:	c9 f0       	breq	.+50     	; 0x2992 <DIO_vSet4MSBDir+0x88>
    2960:	62 c0       	rjmp	.+196    	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0xF0; break;
    2962:	aa e3       	ldi	r26, 0x3A	; 58
    2964:	b0 e0       	ldi	r27, 0x00	; 0
    2966:	ea e3       	ldi	r30, 0x3A	; 58
    2968:	f0 e0       	ldi	r31, 0x00	; 0
    296a:	80 81       	ld	r24, Z
    296c:	80 6f       	ori	r24, 0xF0	; 240
    296e:	8c 93       	st	X, r24
    2970:	5a c0       	rjmp	.+180    	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG |= 0xF0; break;
    2972:	a7 e3       	ldi	r26, 0x37	; 55
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	e7 e3       	ldi	r30, 0x37	; 55
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	80 6f       	ori	r24, 0xF0	; 240
    297e:	8c 93       	st	X, r24
    2980:	52 c0       	rjmp	.+164    	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG |= 0xF0; break;
    2982:	a4 e3       	ldi	r26, 0x34	; 52
    2984:	b0 e0       	ldi	r27, 0x00	; 0
    2986:	e4 e3       	ldi	r30, 0x34	; 52
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	80 81       	ld	r24, Z
    298c:	80 6f       	ori	r24, 0xF0	; 240
    298e:	8c 93       	st	X, r24
    2990:	4a c0       	rjmp	.+148    	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG |= 0xF0; break;
    2992:	a1 e3       	ldi	r26, 0x31	; 49
    2994:	b0 e0       	ldi	r27, 0x00	; 0
    2996:	e1 e3       	ldi	r30, 0x31	; 49
    2998:	f0 e0       	ldi	r31, 0x00	; 0
    299a:	80 81       	ld	r24, Z
    299c:	80 6f       	ori	r24, 0xF0	; 240
    299e:	8c 93       	st	X, r24
    29a0:	42 c0       	rjmp	.+132    	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    29a2:	8a 81       	ldd	r24, Y+2	; 0x02
    29a4:	88 23       	and	r24, r24
    29a6:	09 f0       	breq	.+2      	; 0x29aa <DIO_vSet4MSBDir+0xa0>
    29a8:	3e c0       	rjmp	.+124    	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	28 2f       	mov	r18, r24
    29ae:	30 e0       	ldi	r19, 0x00	; 0
    29b0:	3c 83       	std	Y+4, r19	; 0x04
    29b2:	2b 83       	std	Y+3, r18	; 0x03
    29b4:	8b 81       	ldd	r24, Y+3	; 0x03
    29b6:	9c 81       	ldd	r25, Y+4	; 0x04
    29b8:	81 30       	cpi	r24, 0x01	; 1
    29ba:	91 05       	cpc	r25, r1
    29bc:	e9 f0       	breq	.+58     	; 0x29f8 <DIO_vSet4MSBDir+0xee>
    29be:	2b 81       	ldd	r18, Y+3	; 0x03
    29c0:	3c 81       	ldd	r19, Y+4	; 0x04
    29c2:	22 30       	cpi	r18, 0x02	; 2
    29c4:	31 05       	cpc	r19, r1
    29c6:	2c f4       	brge	.+10     	; 0x29d2 <DIO_vSet4MSBDir+0xc8>
    29c8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ca:	9c 81       	ldd	r25, Y+4	; 0x04
    29cc:	00 97       	sbiw	r24, 0x00	; 0
    29ce:	61 f0       	breq	.+24     	; 0x29e8 <DIO_vSet4MSBDir+0xde>
    29d0:	2a c0       	rjmp	.+84     	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
    29d2:	2b 81       	ldd	r18, Y+3	; 0x03
    29d4:	3c 81       	ldd	r19, Y+4	; 0x04
    29d6:	22 30       	cpi	r18, 0x02	; 2
    29d8:	31 05       	cpc	r19, r1
    29da:	b1 f0       	breq	.+44     	; 0x2a08 <DIO_vSet4MSBDir+0xfe>
    29dc:	8b 81       	ldd	r24, Y+3	; 0x03
    29de:	9c 81       	ldd	r25, Y+4	; 0x04
    29e0:	83 30       	cpi	r24, 0x03	; 3
    29e2:	91 05       	cpc	r25, r1
    29e4:	c9 f0       	breq	.+50     	; 0x2a18 <DIO_vSet4MSBDir+0x10e>
    29e6:	1f c0       	rjmp	.+62     	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0x0F; break;
    29e8:	aa e3       	ldi	r26, 0x3A	; 58
    29ea:	b0 e0       	ldi	r27, 0x00	; 0
    29ec:	ea e3       	ldi	r30, 0x3A	; 58
    29ee:	f0 e0       	ldi	r31, 0x00	; 0
    29f0:	80 81       	ld	r24, Z
    29f2:	8f 70       	andi	r24, 0x0F	; 15
    29f4:	8c 93       	st	X, r24
    29f6:	17 c0       	rjmp	.+46     	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG &= 0x0F; break;
    29f8:	a7 e3       	ldi	r26, 0x37	; 55
    29fa:	b0 e0       	ldi	r27, 0x00	; 0
    29fc:	e7 e3       	ldi	r30, 0x37	; 55
    29fe:	f0 e0       	ldi	r31, 0x00	; 0
    2a00:	80 81       	ld	r24, Z
    2a02:	8f 70       	andi	r24, 0x0F	; 15
    2a04:	8c 93       	st	X, r24
    2a06:	0f c0       	rjmp	.+30     	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG &= 0x0F; break;
    2a08:	a4 e3       	ldi	r26, 0x34	; 52
    2a0a:	b0 e0       	ldi	r27, 0x00	; 0
    2a0c:	e4 e3       	ldi	r30, 0x34	; 52
    2a0e:	f0 e0       	ldi	r31, 0x00	; 0
    2a10:	80 81       	ld	r24, Z
    2a12:	8f 70       	andi	r24, 0x0F	; 15
    2a14:	8c 93       	st	X, r24
    2a16:	07 c0       	rjmp	.+14     	; 0x2a26 <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG &= 0x0F; break;
    2a18:	a1 e3       	ldi	r26, 0x31	; 49
    2a1a:	b0 e0       	ldi	r27, 0x00	; 0
    2a1c:	e1 e3       	ldi	r30, 0x31	; 49
    2a1e:	f0 e0       	ldi	r31, 0x00	; 0
    2a20:	80 81       	ld	r24, Z
    2a22:	8f 70       	andi	r24, 0x0F	; 15
    2a24:	8c 93       	st	X, r24
		}
	}
}
    2a26:	26 96       	adiw	r28, 0x06	; 6
    2a28:	0f b6       	in	r0, 0x3f	; 63
    2a2a:	f8 94       	cli
    2a2c:	de bf       	out	0x3e, r29	; 62
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	cd bf       	out	0x3d, r28	; 61
    2a32:	cf 91       	pop	r28
    2a34:	df 91       	pop	r29
    2a36:	08 95       	ret

00002a38 <DIO_vSet4LSBValue>:

//sets value of 4LSB pins of a port
void DIO_vSet4LSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    2a38:	df 93       	push	r29
    2a3a:	cf 93       	push	r28
    2a3c:	00 d0       	rcall	.+0      	; 0x2a3e <DIO_vSet4LSBValue+0x6>
    2a3e:	00 d0       	rcall	.+0      	; 0x2a40 <DIO_vSet4LSBValue+0x8>
    2a40:	cd b7       	in	r28, 0x3d	; 61
    2a42:	de b7       	in	r29, 0x3e	; 62
    2a44:	89 83       	std	Y+1, r24	; 0x01
    2a46:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    2a48:	89 81       	ldd	r24, Y+1	; 0x01
    2a4a:	28 2f       	mov	r18, r24
    2a4c:	30 e0       	ldi	r19, 0x00	; 0
    2a4e:	3c 83       	std	Y+4, r19	; 0x04
    2a50:	2b 83       	std	Y+3, r18	; 0x03
    2a52:	8b 81       	ldd	r24, Y+3	; 0x03
    2a54:	9c 81       	ldd	r25, Y+4	; 0x04
    2a56:	81 30       	cpi	r24, 0x01	; 1
    2a58:	91 05       	cpc	r25, r1
    2a5a:	09 f1       	breq	.+66     	; 0x2a9e <DIO_vSet4LSBValue+0x66>
    2a5c:	2b 81       	ldd	r18, Y+3	; 0x03
    2a5e:	3c 81       	ldd	r19, Y+4	; 0x04
    2a60:	22 30       	cpi	r18, 0x02	; 2
    2a62:	31 05       	cpc	r19, r1
    2a64:	2c f4       	brge	.+10     	; 0x2a70 <DIO_vSet4LSBValue+0x38>
    2a66:	8b 81       	ldd	r24, Y+3	; 0x03
    2a68:	9c 81       	ldd	r25, Y+4	; 0x04
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	61 f0       	breq	.+24     	; 0x2a86 <DIO_vSet4LSBValue+0x4e>
    2a6e:	3a c0       	rjmp	.+116    	; 0x2ae4 <DIO_vSet4LSBValue+0xac>
    2a70:	2b 81       	ldd	r18, Y+3	; 0x03
    2a72:	3c 81       	ldd	r19, Y+4	; 0x04
    2a74:	22 30       	cpi	r18, 0x02	; 2
    2a76:	31 05       	cpc	r19, r1
    2a78:	f1 f0       	breq	.+60     	; 0x2ab6 <DIO_vSet4LSBValue+0x7e>
    2a7a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a7c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a7e:	83 30       	cpi	r24, 0x03	; 3
    2a80:	91 05       	cpc	r25, r1
    2a82:	29 f1       	breq	.+74     	; 0x2ace <DIO_vSet4LSBValue+0x96>
    2a84:	2f c0       	rjmp	.+94     	; 0x2ae4 <DIO_vSet4LSBValue+0xac>
	{
	case PORTA: PORTA_REG = (PORTA_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    2a86:	ab e3       	ldi	r26, 0x3B	; 59
    2a88:	b0 e0       	ldi	r27, 0x00	; 0
    2a8a:	eb e3       	ldi	r30, 0x3B	; 59
    2a8c:	f0 e0       	ldi	r31, 0x00	; 0
    2a8e:	80 81       	ld	r24, Z
    2a90:	98 2f       	mov	r25, r24
    2a92:	90 7f       	andi	r25, 0xF0	; 240
    2a94:	8a 81       	ldd	r24, Y+2	; 0x02
    2a96:	8f 70       	andi	r24, 0x0F	; 15
    2a98:	89 2b       	or	r24, r25
    2a9a:	8c 93       	st	X, r24
    2a9c:	23 c0       	rjmp	.+70     	; 0x2ae4 <DIO_vSet4LSBValue+0xac>
	case PORTB: PORTB_REG = (PORTB_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    2a9e:	a8 e3       	ldi	r26, 0x38	; 56
    2aa0:	b0 e0       	ldi	r27, 0x00	; 0
    2aa2:	e8 e3       	ldi	r30, 0x38	; 56
    2aa4:	f0 e0       	ldi	r31, 0x00	; 0
    2aa6:	80 81       	ld	r24, Z
    2aa8:	98 2f       	mov	r25, r24
    2aaa:	90 7f       	andi	r25, 0xF0	; 240
    2aac:	8a 81       	ldd	r24, Y+2	; 0x02
    2aae:	8f 70       	andi	r24, 0x0F	; 15
    2ab0:	89 2b       	or	r24, r25
    2ab2:	8c 93       	st	X, r24
    2ab4:	17 c0       	rjmp	.+46     	; 0x2ae4 <DIO_vSet4LSBValue+0xac>
	case PORTC: PORTC_REG = (PORTC_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    2ab6:	a5 e3       	ldi	r26, 0x35	; 53
    2ab8:	b0 e0       	ldi	r27, 0x00	; 0
    2aba:	e5 e3       	ldi	r30, 0x35	; 53
    2abc:	f0 e0       	ldi	r31, 0x00	; 0
    2abe:	80 81       	ld	r24, Z
    2ac0:	98 2f       	mov	r25, r24
    2ac2:	90 7f       	andi	r25, 0xF0	; 240
    2ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac6:	8f 70       	andi	r24, 0x0F	; 15
    2ac8:	89 2b       	or	r24, r25
    2aca:	8c 93       	st	X, r24
    2acc:	0b c0       	rjmp	.+22     	; 0x2ae4 <DIO_vSet4LSBValue+0xac>
	case PORTD: PORTD_REG = (PORTD_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    2ace:	a2 e3       	ldi	r26, 0x32	; 50
    2ad0:	b0 e0       	ldi	r27, 0x00	; 0
    2ad2:	e2 e3       	ldi	r30, 0x32	; 50
    2ad4:	f0 e0       	ldi	r31, 0x00	; 0
    2ad6:	80 81       	ld	r24, Z
    2ad8:	98 2f       	mov	r25, r24
    2ada:	90 7f       	andi	r25, 0xF0	; 240
    2adc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ade:	8f 70       	andi	r24, 0x0F	; 15
    2ae0:	89 2b       	or	r24, r25
    2ae2:	8c 93       	st	X, r24
	}
}
    2ae4:	0f 90       	pop	r0
    2ae6:	0f 90       	pop	r0
    2ae8:	0f 90       	pop	r0
    2aea:	0f 90       	pop	r0
    2aec:	cf 91       	pop	r28
    2aee:	df 91       	pop	r29
    2af0:	08 95       	ret

00002af2 <DIO_vSet4MSBValue>:

//sets value of 4MSB pins of a port
void DIO_vSet4MSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    2af2:	df 93       	push	r29
    2af4:	cf 93       	push	r28
    2af6:	00 d0       	rcall	.+0      	; 0x2af8 <DIO_vSet4MSBValue+0x6>
    2af8:	00 d0       	rcall	.+0      	; 0x2afa <DIO_vSet4MSBValue+0x8>
    2afa:	cd b7       	in	r28, 0x3d	; 61
    2afc:	de b7       	in	r29, 0x3e	; 62
    2afe:	89 83       	std	Y+1, r24	; 0x01
    2b00:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	3c 83       	std	Y+4, r19	; 0x04
    2b0a:	2b 83       	std	Y+3, r18	; 0x03
    2b0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b10:	81 30       	cpi	r24, 0x01	; 1
    2b12:	91 05       	cpc	r25, r1
    2b14:	09 f1       	breq	.+66     	; 0x2b58 <DIO_vSet4MSBValue+0x66>
    2b16:	2b 81       	ldd	r18, Y+3	; 0x03
    2b18:	3c 81       	ldd	r19, Y+4	; 0x04
    2b1a:	22 30       	cpi	r18, 0x02	; 2
    2b1c:	31 05       	cpc	r19, r1
    2b1e:	2c f4       	brge	.+10     	; 0x2b2a <DIO_vSet4MSBValue+0x38>
    2b20:	8b 81       	ldd	r24, Y+3	; 0x03
    2b22:	9c 81       	ldd	r25, Y+4	; 0x04
    2b24:	00 97       	sbiw	r24, 0x00	; 0
    2b26:	61 f0       	breq	.+24     	; 0x2b40 <DIO_vSet4MSBValue+0x4e>
    2b28:	3a c0       	rjmp	.+116    	; 0x2b9e <DIO_vSet4MSBValue+0xac>
    2b2a:	2b 81       	ldd	r18, Y+3	; 0x03
    2b2c:	3c 81       	ldd	r19, Y+4	; 0x04
    2b2e:	22 30       	cpi	r18, 0x02	; 2
    2b30:	31 05       	cpc	r19, r1
    2b32:	f1 f0       	breq	.+60     	; 0x2b70 <DIO_vSet4MSBValue+0x7e>
    2b34:	8b 81       	ldd	r24, Y+3	; 0x03
    2b36:	9c 81       	ldd	r25, Y+4	; 0x04
    2b38:	83 30       	cpi	r24, 0x03	; 3
    2b3a:	91 05       	cpc	r25, r1
    2b3c:	29 f1       	breq	.+74     	; 0x2b88 <DIO_vSet4MSBValue+0x96>
    2b3e:	2f c0       	rjmp	.+94     	; 0x2b9e <DIO_vSet4MSBValue+0xac>
	{
	case PORTA: PORTA_REG = (PORTA_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    2b40:	ab e3       	ldi	r26, 0x3B	; 59
    2b42:	b0 e0       	ldi	r27, 0x00	; 0
    2b44:	eb e3       	ldi	r30, 0x3B	; 59
    2b46:	f0 e0       	ldi	r31, 0x00	; 0
    2b48:	80 81       	ld	r24, Z
    2b4a:	98 2f       	mov	r25, r24
    2b4c:	9f 70       	andi	r25, 0x0F	; 15
    2b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b50:	80 7f       	andi	r24, 0xF0	; 240
    2b52:	89 2b       	or	r24, r25
    2b54:	8c 93       	st	X, r24
    2b56:	23 c0       	rjmp	.+70     	; 0x2b9e <DIO_vSet4MSBValue+0xac>
	case PORTB: PORTB_REG = (PORTB_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    2b58:	a8 e3       	ldi	r26, 0x38	; 56
    2b5a:	b0 e0       	ldi	r27, 0x00	; 0
    2b5c:	e8 e3       	ldi	r30, 0x38	; 56
    2b5e:	f0 e0       	ldi	r31, 0x00	; 0
    2b60:	80 81       	ld	r24, Z
    2b62:	98 2f       	mov	r25, r24
    2b64:	9f 70       	andi	r25, 0x0F	; 15
    2b66:	8a 81       	ldd	r24, Y+2	; 0x02
    2b68:	80 7f       	andi	r24, 0xF0	; 240
    2b6a:	89 2b       	or	r24, r25
    2b6c:	8c 93       	st	X, r24
    2b6e:	17 c0       	rjmp	.+46     	; 0x2b9e <DIO_vSet4MSBValue+0xac>
	case PORTC: PORTC_REG = (PORTC_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    2b70:	a5 e3       	ldi	r26, 0x35	; 53
    2b72:	b0 e0       	ldi	r27, 0x00	; 0
    2b74:	e5 e3       	ldi	r30, 0x35	; 53
    2b76:	f0 e0       	ldi	r31, 0x00	; 0
    2b78:	80 81       	ld	r24, Z
    2b7a:	98 2f       	mov	r25, r24
    2b7c:	9f 70       	andi	r25, 0x0F	; 15
    2b7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2b80:	80 7f       	andi	r24, 0xF0	; 240
    2b82:	89 2b       	or	r24, r25
    2b84:	8c 93       	st	X, r24
    2b86:	0b c0       	rjmp	.+22     	; 0x2b9e <DIO_vSet4MSBValue+0xac>
	case PORTD: PORTD_REG = (PORTD_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    2b88:	a2 e3       	ldi	r26, 0x32	; 50
    2b8a:	b0 e0       	ldi	r27, 0x00	; 0
    2b8c:	e2 e3       	ldi	r30, 0x32	; 50
    2b8e:	f0 e0       	ldi	r31, 0x00	; 0
    2b90:	80 81       	ld	r24, Z
    2b92:	98 2f       	mov	r25, r24
    2b94:	9f 70       	andi	r25, 0x0F	; 15
    2b96:	8a 81       	ldd	r24, Y+2	; 0x02
    2b98:	80 7f       	andi	r24, 0xF0	; 240
    2b9a:	89 2b       	or	r24, r25
    2b9c:	8c 93       	st	X, r24
	}
}
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	0f 90       	pop	r0
    2ba4:	0f 90       	pop	r0
    2ba6:	cf 91       	pop	r28
    2ba8:	df 91       	pop	r29
    2baa:	08 95       	ret

00002bac <SERVO_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "servo_interface.h"

void SERVO_vInit(const SERVO_PWM_cfg_t *Servo_PWM){
    2bac:	df 93       	push	r29
    2bae:	cf 93       	push	r28
    2bb0:	00 d0       	rcall	.+0      	; 0x2bb2 <SERVO_vInit+0x6>
    2bb2:	cd b7       	in	r28, 0x3d	; 61
    2bb4:	de b7       	in	r29, 0x3e	; 62
    2bb6:	9a 83       	std	Y+2, r25	; 0x02
    2bb8:	89 83       	std	Y+1, r24	; 0x01
	if(Servo_PWM != NULL){
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bbe:	00 97       	sbiw	r24, 0x00	; 0
    2bc0:	41 f1       	breq	.+80     	; 0x2c12 <SERVO_vInit+0x66>
		PWM_vInit(&(Servo_PWM->ServoPWM));
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc6:	0e 94 e3 07 	call	0xfc6	; 0xfc6 <PWM_vInit>
		if( (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_PhaseFreqICR) || (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_PhaseICR) || (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_FastICR) ){
    2bca:	e9 81       	ldd	r30, Y+1	; 0x01
    2bcc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bce:	80 81       	ld	r24, Z
    2bd0:	88 30       	cpi	r24, 0x08	; 8
    2bd2:	51 f0       	breq	.+20     	; 0x2be8 <SERVO_vInit+0x3c>
    2bd4:	e9 81       	ldd	r30, Y+1	; 0x01
    2bd6:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd8:	80 81       	ld	r24, Z
    2bda:	8a 30       	cpi	r24, 0x0A	; 10
    2bdc:	29 f0       	breq	.+10     	; 0x2be8 <SERVO_vInit+0x3c>
    2bde:	e9 81       	ldd	r30, Y+1	; 0x01
    2be0:	fa 81       	ldd	r31, Y+2	; 0x02
    2be2:	80 81       	ld	r24, Z
    2be4:	8c 30       	cpi	r24, 0x0C	; 12
    2be6:	49 f4       	brne	.+18     	; 0x2bfa <SERVO_vInit+0x4e>
			PWM_vSetICR(&(Servo_PWM->ServoPWM), Servo_PWM->ICR_Value);
    2be8:	89 81       	ldd	r24, Y+1	; 0x01
    2bea:	9a 81       	ldd	r25, Y+2	; 0x02
    2bec:	e9 81       	ldd	r30, Y+1	; 0x01
    2bee:	fa 81       	ldd	r31, Y+2	; 0x02
    2bf0:	25 81       	ldd	r18, Z+5	; 0x05
    2bf2:	36 81       	ldd	r19, Z+6	; 0x06
    2bf4:	b9 01       	movw	r22, r18
    2bf6:	0e 94 24 0c 	call	0x1848	; 0x1848 <PWM_vSetICR>
		}
		SERVO_vChangeDirection(Servo_PWM, Servo_PWM->ServoInitialDirection);
    2bfa:	e9 81       	ldd	r30, Y+1	; 0x01
    2bfc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bfe:	24 81       	ldd	r18, Z+4	; 0x04
    2c00:	89 81       	ldd	r24, Y+1	; 0x01
    2c02:	9a 81       	ldd	r25, Y+2	; 0x02
    2c04:	62 2f       	mov	r22, r18
    2c06:	0e 94 0e 16 	call	0x2c1c	; 0x2c1c <SERVO_vChangeDirection>
		PWM_vStart(&(Servo_PWM->ServoPWM));
    2c0a:	89 81       	ldd	r24, Y+1	; 0x01
    2c0c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c0e:	0e 94 8c 0c 	call	0x1918	; 0x1918 <PWM_vStart>
	}
}
    2c12:	0f 90       	pop	r0
    2c14:	0f 90       	pop	r0
    2c16:	cf 91       	pop	r28
    2c18:	df 91       	pop	r29
    2c1a:	08 95       	ret

00002c1c <SERVO_vChangeDirection>:

void SERVO_vChangeDirection(const SERVO_PWM_cfg_t *Servo_PWM, enu_servoDirections Copy_enuDirection){
    2c1c:	df 93       	push	r29
    2c1e:	cf 93       	push	r28
    2c20:	00 d0       	rcall	.+0      	; 0x2c22 <SERVO_vChangeDirection+0x6>
    2c22:	00 d0       	rcall	.+0      	; 0x2c24 <SERVO_vChangeDirection+0x8>
    2c24:	0f 92       	push	r0
    2c26:	cd b7       	in	r28, 0x3d	; 61
    2c28:	de b7       	in	r29, 0x3e	; 62
    2c2a:	9a 83       	std	Y+2, r25	; 0x02
    2c2c:	89 83       	std	Y+1, r24	; 0x01
    2c2e:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_enuDirection){
    2c30:	8b 81       	ldd	r24, Y+3	; 0x03
    2c32:	28 2f       	mov	r18, r24
    2c34:	30 e0       	ldi	r19, 0x00	; 0
    2c36:	3d 83       	std	Y+5, r19	; 0x05
    2c38:	2c 83       	std	Y+4, r18	; 0x04
    2c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c3c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c3e:	81 30       	cpi	r24, 0x01	; 1
    2c40:	91 05       	cpc	r25, r1
    2c42:	99 f0       	breq	.+38     	; 0x2c6a <SERVO_vChangeDirection+0x4e>
    2c44:	2c 81       	ldd	r18, Y+4	; 0x04
    2c46:	3d 81       	ldd	r19, Y+5	; 0x05
    2c48:	22 30       	cpi	r18, 0x02	; 2
    2c4a:	31 05       	cpc	r19, r1
    2c4c:	c1 f0       	breq	.+48     	; 0x2c7e <SERVO_vChangeDirection+0x62>
    2c4e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c50:	9d 81       	ldd	r25, Y+5	; 0x05
    2c52:	00 97       	sbiw	r24, 0x00	; 0
    2c54:	e9 f4       	brne	.+58     	; 0x2c90 <SERVO_vChangeDirection+0x74>
	case SERVO_0:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_0degree_Value);
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	9a 81       	ldd	r25, Y+2	; 0x02
    2c5a:	e9 81       	ldd	r30, Y+1	; 0x01
    2c5c:	fa 81       	ldd	r31, Y+2	; 0x02
    2c5e:	27 81       	ldd	r18, Z+7	; 0x07
    2c60:	30 85       	ldd	r19, Z+8	; 0x08
    2c62:	b9 01       	movw	r22, r18
    2c64:	0e 94 48 0c 	call	0x1890	; 0x1890 <PWM_vSetOCR>
    2c68:	13 c0       	rjmp	.+38     	; 0x2c90 <SERVO_vChangeDirection+0x74>
		break;
	case SERVO_90:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_90degree_Value);
    2c6a:	89 81       	ldd	r24, Y+1	; 0x01
    2c6c:	9a 81       	ldd	r25, Y+2	; 0x02
    2c6e:	e9 81       	ldd	r30, Y+1	; 0x01
    2c70:	fa 81       	ldd	r31, Y+2	; 0x02
    2c72:	21 85       	ldd	r18, Z+9	; 0x09
    2c74:	32 85       	ldd	r19, Z+10	; 0x0a
    2c76:	b9 01       	movw	r22, r18
    2c78:	0e 94 48 0c 	call	0x1890	; 0x1890 <PWM_vSetOCR>
    2c7c:	09 c0       	rjmp	.+18     	; 0x2c90 <SERVO_vChangeDirection+0x74>
		break;
	case SERVO_180:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_180degree_Value);
    2c7e:	89 81       	ldd	r24, Y+1	; 0x01
    2c80:	9a 81       	ldd	r25, Y+2	; 0x02
    2c82:	e9 81       	ldd	r30, Y+1	; 0x01
    2c84:	fa 81       	ldd	r31, Y+2	; 0x02
    2c86:	23 85       	ldd	r18, Z+11	; 0x0b
    2c88:	34 85       	ldd	r19, Z+12	; 0x0c
    2c8a:	b9 01       	movw	r22, r18
    2c8c:	0e 94 48 0c 	call	0x1890	; 0x1890 <PWM_vSetOCR>
		break;
	default: /* Do Nothing */ break;
	}
}
    2c90:	0f 90       	pop	r0
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <SERVO_vStart>:

void SERVO_vStart(const SERVO_PWM_cfg_t *Servo_PWM){
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	00 d0       	rcall	.+0      	; 0x2ca6 <SERVO_vStart+0x6>
    2ca6:	cd b7       	in	r28, 0x3d	; 61
    2ca8:	de b7       	in	r29, 0x3e	; 62
    2caa:	9a 83       	std	Y+2, r25	; 0x02
    2cac:	89 83       	std	Y+1, r24	; 0x01
	PWM_vStart(&(Servo_PWM->ServoPWM));
    2cae:	89 81       	ldd	r24, Y+1	; 0x01
    2cb0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cb2:	0e 94 8c 0c 	call	0x1918	; 0x1918 <PWM_vStart>
}
    2cb6:	0f 90       	pop	r0
    2cb8:	0f 90       	pop	r0
    2cba:	cf 91       	pop	r28
    2cbc:	df 91       	pop	r29
    2cbe:	08 95       	ret

00002cc0 <SERVO_vStop>:

void SERVO_vStop(const SERVO_PWM_cfg_t *Servo_PWM){
    2cc0:	df 93       	push	r29
    2cc2:	cf 93       	push	r28
    2cc4:	00 d0       	rcall	.+0      	; 0x2cc6 <SERVO_vStop+0x6>
    2cc6:	cd b7       	in	r28, 0x3d	; 61
    2cc8:	de b7       	in	r29, 0x3e	; 62
    2cca:	9a 83       	std	Y+2, r25	; 0x02
    2ccc:	89 83       	std	Y+1, r24	; 0x01
	PWM_vStop(&(Servo_PWM->ServoPWM));
    2cce:	89 81       	ldd	r24, Y+1	; 0x01
    2cd0:	9a 81       	ldd	r25, Y+2	; 0x02
    2cd2:	0e 94 3e 0e 	call	0x1c7c	; 0x1c7c <PWM_vStop>
}
    2cd6:	0f 90       	pop	r0
    2cd8:	0f 90       	pop	r0
    2cda:	cf 91       	pop	r28
    2cdc:	df 91       	pop	r29
    2cde:	08 95       	ret

00002ce0 <PBD_vInit>:
/*************************************************************************/

#include "PBD_interface.h"

// This function is responsible for initializing a push button
Std_ReturnType PBD_vInit(const PB_cfg *PB){
    2ce0:	df 93       	push	r29
    2ce2:	cf 93       	push	r28
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <PBD_vInit+0x6>
    2ce6:	0f 92       	push	r0
    2ce8:	cd b7       	in	r28, 0x3d	; 61
    2cea:	de b7       	in	r29, 0x3e	; 62
    2cec:	9b 83       	std	Y+3, r25	; 0x03
    2cee:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOT_OK;
    2cf0:	19 82       	std	Y+1, r1	; 0x01
	if(PB != NULL){
    2cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf4:	9b 81       	ldd	r25, Y+3	; 0x03
    2cf6:	00 97       	sbiw	r24, 0x00	; 0
    2cf8:	b9 f1       	breq	.+110    	; 0x2d68 <PBD_vInit+0x88>

		if(PB->PBmode == MODE_PULLUP){
    2cfa:	ea 81       	ldd	r30, Y+2	; 0x02
    2cfc:	fb 81       	ldd	r31, Y+3	; 0x03
    2cfe:	80 81       	ld	r24, Z
    2d00:	81 70       	andi	r24, 0x01	; 1
    2d02:	88 23       	and	r24, r24
    2d04:	a9 f4       	brne	.+42     	; 0x2d30 <PBD_vInit+0x50>
			DIO_vPinInit(PB->PortName, PB->PinNum, INPUT, HIGH);
    2d06:	ea 81       	ldd	r30, Y+2	; 0x02
    2d08:	fb 81       	ldd	r31, Y+3	; 0x03
    2d0a:	80 81       	ld	r24, Z
    2d0c:	86 95       	lsr	r24
    2d0e:	83 70       	andi	r24, 0x03	; 3
    2d10:	28 2f       	mov	r18, r24
    2d12:	ea 81       	ldd	r30, Y+2	; 0x02
    2d14:	fb 81       	ldd	r31, Y+3	; 0x03
    2d16:	80 81       	ld	r24, Z
    2d18:	86 95       	lsr	r24
    2d1a:	86 95       	lsr	r24
    2d1c:	86 95       	lsr	r24
    2d1e:	87 70       	andi	r24, 0x07	; 7
    2d20:	98 2f       	mov	r25, r24
    2d22:	82 2f       	mov	r24, r18
    2d24:	69 2f       	mov	r22, r25
    2d26:	40 e0       	ldi	r20, 0x00	; 0
    2d28:	21 e0       	ldi	r18, 0x01	; 1
    2d2a:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_vPinInit>
    2d2e:	1a c0       	rjmp	.+52     	; 0x2d64 <PBD_vInit+0x84>
		}
		else if(PB->PBmode == MODE_PULLDOWN){
    2d30:	ea 81       	ldd	r30, Y+2	; 0x02
    2d32:	fb 81       	ldd	r31, Y+3	; 0x03
    2d34:	80 81       	ld	r24, Z
    2d36:	81 70       	andi	r24, 0x01	; 1
    2d38:	88 23       	and	r24, r24
    2d3a:	a1 f0       	breq	.+40     	; 0x2d64 <PBD_vInit+0x84>
			DIO_vPinInit(PB->PortName, PB->PinNum, INPUT, LOW);
    2d3c:	ea 81       	ldd	r30, Y+2	; 0x02
    2d3e:	fb 81       	ldd	r31, Y+3	; 0x03
    2d40:	80 81       	ld	r24, Z
    2d42:	86 95       	lsr	r24
    2d44:	83 70       	andi	r24, 0x03	; 3
    2d46:	28 2f       	mov	r18, r24
    2d48:	ea 81       	ldd	r30, Y+2	; 0x02
    2d4a:	fb 81       	ldd	r31, Y+3	; 0x03
    2d4c:	80 81       	ld	r24, Z
    2d4e:	86 95       	lsr	r24
    2d50:	86 95       	lsr	r24
    2d52:	86 95       	lsr	r24
    2d54:	87 70       	andi	r24, 0x07	; 7
    2d56:	98 2f       	mov	r25, r24
    2d58:	82 2f       	mov	r24, r18
    2d5a:	69 2f       	mov	r22, r25
    2d5c:	40 e0       	ldi	r20, 0x00	; 0
    2d5e:	20 e0       	ldi	r18, 0x00	; 0
    2d60:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_vPinInit>
		}
		ret = E_OK;
    2d64:	81 e0       	ldi	r24, 0x01	; 1
    2d66:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    2d68:	89 81       	ldd	r24, Y+1	; 0x01
}
    2d6a:	0f 90       	pop	r0
    2d6c:	0f 90       	pop	r0
    2d6e:	0f 90       	pop	r0
    2d70:	cf 91       	pop	r28
    2d72:	df 91       	pop	r29
    2d74:	08 95       	ret

00002d76 <PBD_vGetButtonState>:

// This function is responsible for getting button state
Std_ReturnType PBD_vGetButtonState(const PB_cfg *PB, u8 *Copy_u8State){
    2d76:	df 93       	push	r29
    2d78:	cf 93       	push	r28
    2d7a:	cd b7       	in	r28, 0x3d	; 61
    2d7c:	de b7       	in	r29, 0x3e	; 62
    2d7e:	28 97       	sbiw	r28, 0x08	; 8
    2d80:	0f b6       	in	r0, 0x3f	; 63
    2d82:	f8 94       	cli
    2d84:	de bf       	out	0x3e, r29	; 62
    2d86:	0f be       	out	0x3f, r0	; 63
    2d88:	cd bf       	out	0x3d, r28	; 61
    2d8a:	9c 83       	std	Y+4, r25	; 0x04
    2d8c:	8b 83       	std	Y+3, r24	; 0x03
    2d8e:	7e 83       	std	Y+6, r23	; 0x06
    2d90:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType ret = E_NOT_OK;
    2d92:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOCAL_Button_State;
	if(PB != NULL){
    2d94:	8b 81       	ldd	r24, Y+3	; 0x03
    2d96:	9c 81       	ldd	r25, Y+4	; 0x04
    2d98:	00 97       	sbiw	r24, 0x00	; 0
    2d9a:	09 f4       	brne	.+2      	; 0x2d9e <PBD_vGetButtonState+0x28>
    2d9c:	44 c0       	rjmp	.+136    	; 0x2e26 <PBD_vGetButtonState+0xb0>
		LOCAL_Button_State = DIO_u8ReadPinValue(PB->PortName, PB->PinNum);
    2d9e:	eb 81       	ldd	r30, Y+3	; 0x03
    2da0:	fc 81       	ldd	r31, Y+4	; 0x04
    2da2:	80 81       	ld	r24, Z
    2da4:	86 95       	lsr	r24
    2da6:	83 70       	andi	r24, 0x03	; 3
    2da8:	28 2f       	mov	r18, r24
    2daa:	eb 81       	ldd	r30, Y+3	; 0x03
    2dac:	fc 81       	ldd	r31, Y+4	; 0x04
    2dae:	80 81       	ld	r24, Z
    2db0:	86 95       	lsr	r24
    2db2:	86 95       	lsr	r24
    2db4:	86 95       	lsr	r24
    2db6:	87 70       	andi	r24, 0x07	; 7
    2db8:	98 2f       	mov	r25, r24
    2dba:	82 2f       	mov	r24, r18
    2dbc:	69 2f       	mov	r22, r25
    2dbe:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <DIO_u8ReadPinValue>
    2dc2:	89 83       	std	Y+1, r24	; 0x01
		switch(PB->PBmode){
    2dc4:	eb 81       	ldd	r30, Y+3	; 0x03
    2dc6:	fc 81       	ldd	r31, Y+4	; 0x04
    2dc8:	80 81       	ld	r24, Z
    2dca:	81 70       	andi	r24, 0x01	; 1
    2dcc:	28 2f       	mov	r18, r24
    2dce:	30 e0       	ldi	r19, 0x00	; 0
    2dd0:	38 87       	std	Y+8, r19	; 0x08
    2dd2:	2f 83       	std	Y+7, r18	; 0x07
    2dd4:	8f 81       	ldd	r24, Y+7	; 0x07
    2dd6:	98 85       	ldd	r25, Y+8	; 0x08
    2dd8:	00 97       	sbiw	r24, 0x00	; 0
    2dda:	31 f0       	breq	.+12     	; 0x2de8 <PBD_vGetButtonState+0x72>
    2ddc:	2f 81       	ldd	r18, Y+7	; 0x07
    2dde:	38 85       	ldd	r19, Y+8	; 0x08
    2de0:	21 30       	cpi	r18, 0x01	; 1
    2de2:	31 05       	cpc	r19, r1
    2de4:	81 f0       	breq	.+32     	; 0x2e06 <PBD_vGetButtonState+0x90>
    2de6:	1d c0       	rjmp	.+58     	; 0x2e22 <PBD_vGetButtonState+0xac>
		case MODE_PULLUP:
			if(LOCAL_Button_State == 0)		{ *Copy_u8State = BUTTON_PRESSED;  }
    2de8:	89 81       	ldd	r24, Y+1	; 0x01
    2dea:	88 23       	and	r24, r24
    2dec:	21 f4       	brne	.+8      	; 0x2df6 <PBD_vGetButtonState+0x80>
    2dee:	ed 81       	ldd	r30, Y+5	; 0x05
    2df0:	fe 81       	ldd	r31, Y+6	; 0x06
    2df2:	10 82       	st	Z, r1
    2df4:	16 c0       	rjmp	.+44     	; 0x2e22 <PBD_vGetButtonState+0xac>
			else if(LOCAL_Button_State == 1){ *Copy_u8State = BUTTON_RELEASED; }
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	81 30       	cpi	r24, 0x01	; 1
    2dfa:	99 f4       	brne	.+38     	; 0x2e22 <PBD_vGetButtonState+0xac>
    2dfc:	ed 81       	ldd	r30, Y+5	; 0x05
    2dfe:	fe 81       	ldd	r31, Y+6	; 0x06
    2e00:	81 e0       	ldi	r24, 0x01	; 1
    2e02:	80 83       	st	Z, r24
    2e04:	0e c0       	rjmp	.+28     	; 0x2e22 <PBD_vGetButtonState+0xac>
			else{ /* Do Nothing */ }		  break;
		case MODE_PULLDOWN:
			if(LOCAL_Button_State == 0)		{ *Copy_u8State = BUTTON_RELEASED; }
    2e06:	89 81       	ldd	r24, Y+1	; 0x01
    2e08:	88 23       	and	r24, r24
    2e0a:	29 f4       	brne	.+10     	; 0x2e16 <PBD_vGetButtonState+0xa0>
    2e0c:	ed 81       	ldd	r30, Y+5	; 0x05
    2e0e:	fe 81       	ldd	r31, Y+6	; 0x06
    2e10:	81 e0       	ldi	r24, 0x01	; 1
    2e12:	80 83       	st	Z, r24
    2e14:	06 c0       	rjmp	.+12     	; 0x2e22 <PBD_vGetButtonState+0xac>
			else if(LOCAL_Button_State == 1){ *Copy_u8State = BUTTON_PRESSED;  }
    2e16:	89 81       	ldd	r24, Y+1	; 0x01
    2e18:	81 30       	cpi	r24, 0x01	; 1
    2e1a:	19 f4       	brne	.+6      	; 0x2e22 <PBD_vGetButtonState+0xac>
    2e1c:	ed 81       	ldd	r30, Y+5	; 0x05
    2e1e:	fe 81       	ldd	r31, Y+6	; 0x06
    2e20:	10 82       	st	Z, r1
			else{ /* Do Nothing */ }		  break;
		default: /* Do Nothing */ break;
		}
		ret = E_OK;
    2e22:	81 e0       	ldi	r24, 0x01	; 1
    2e24:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    2e26:	8a 81       	ldd	r24, Y+2	; 0x02
}
    2e28:	28 96       	adiw	r28, 0x08	; 8
    2e2a:	0f b6       	in	r0, 0x3f	; 63
    2e2c:	f8 94       	cli
    2e2e:	de bf       	out	0x3e, r29	; 62
    2e30:	0f be       	out	0x3f, r0	; 63
    2e32:	cd bf       	out	0x3d, r28	; 61
    2e34:	cf 91       	pop	r28
    2e36:	df 91       	pop	r29
    2e38:	08 95       	ret

00002e3a <LED_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "led_interface.h"

void LED_vInit(const LED_cfg *LED){
    2e3a:	df 93       	push	r29
    2e3c:	cf 93       	push	r28
    2e3e:	00 d0       	rcall	.+0      	; 0x2e40 <LED_vInit+0x6>
    2e40:	cd b7       	in	r28, 0x3d	; 61
    2e42:	de b7       	in	r29, 0x3e	; 62
    2e44:	9a 83       	std	Y+2, r25	; 0x02
    2e46:	89 83       	std	Y+1, r24	; 0x01
	if(LED != NULL){
    2e48:	89 81       	ldd	r24, Y+1	; 0x01
    2e4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2e4c:	00 97       	sbiw	r24, 0x00	; 0
    2e4e:	a9 f1       	breq	.+106    	; 0x2eba <LED_vInit+0x80>
		if(LED->InitialStatus == InitiallyOn){
    2e50:	e9 81       	ldd	r30, Y+1	; 0x01
    2e52:	fa 81       	ldd	r31, Y+2	; 0x02
    2e54:	80 81       	ld	r24, Z
    2e56:	81 70       	andi	r24, 0x01	; 1
    2e58:	88 23       	and	r24, r24
    2e5a:	a9 f0       	breq	.+42     	; 0x2e86 <LED_vInit+0x4c>
			DIO_vPinInit(LED->PortName, LED->PinNum, OUTPUT, HIGH);
    2e5c:	e9 81       	ldd	r30, Y+1	; 0x01
    2e5e:	fa 81       	ldd	r31, Y+2	; 0x02
    2e60:	80 81       	ld	r24, Z
    2e62:	86 95       	lsr	r24
    2e64:	83 70       	andi	r24, 0x03	; 3
    2e66:	28 2f       	mov	r18, r24
    2e68:	e9 81       	ldd	r30, Y+1	; 0x01
    2e6a:	fa 81       	ldd	r31, Y+2	; 0x02
    2e6c:	80 81       	ld	r24, Z
    2e6e:	86 95       	lsr	r24
    2e70:	86 95       	lsr	r24
    2e72:	86 95       	lsr	r24
    2e74:	87 70       	andi	r24, 0x07	; 7
    2e76:	98 2f       	mov	r25, r24
    2e78:	82 2f       	mov	r24, r18
    2e7a:	69 2f       	mov	r22, r25
    2e7c:	41 e0       	ldi	r20, 0x01	; 1
    2e7e:	21 e0       	ldi	r18, 0x01	; 1
    2e80:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_vPinInit>
    2e84:	1a c0       	rjmp	.+52     	; 0x2eba <LED_vInit+0x80>
		}
		else if(LED->InitialStatus == InitiallyOff){
    2e86:	e9 81       	ldd	r30, Y+1	; 0x01
    2e88:	fa 81       	ldd	r31, Y+2	; 0x02
    2e8a:	80 81       	ld	r24, Z
    2e8c:	81 70       	andi	r24, 0x01	; 1
    2e8e:	88 23       	and	r24, r24
    2e90:	a1 f4       	brne	.+40     	; 0x2eba <LED_vInit+0x80>
			DIO_vPinInit(LED->PortName, LED->PinNum, OUTPUT, LOW);
    2e92:	e9 81       	ldd	r30, Y+1	; 0x01
    2e94:	fa 81       	ldd	r31, Y+2	; 0x02
    2e96:	80 81       	ld	r24, Z
    2e98:	86 95       	lsr	r24
    2e9a:	83 70       	andi	r24, 0x03	; 3
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea2:	80 81       	ld	r24, Z
    2ea4:	86 95       	lsr	r24
    2ea6:	86 95       	lsr	r24
    2ea8:	86 95       	lsr	r24
    2eaa:	87 70       	andi	r24, 0x07	; 7
    2eac:	98 2f       	mov	r25, r24
    2eae:	82 2f       	mov	r24, r18
    2eb0:	69 2f       	mov	r22, r25
    2eb2:	41 e0       	ldi	r20, 0x01	; 1
    2eb4:	20 e0       	ldi	r18, 0x00	; 0
    2eb6:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_vPinInit>
		}
		else{ /* Do Nothing */ }
	}
	else{ /* Do Nothing */ }
}
    2eba:	0f 90       	pop	r0
    2ebc:	0f 90       	pop	r0
    2ebe:	cf 91       	pop	r28
    2ec0:	df 91       	pop	r29
    2ec2:	08 95       	ret

00002ec4 <LED_vTurnOn>:

void LED_vTurnOn(const LED_cfg *LED){
    2ec4:	df 93       	push	r29
    2ec6:	cf 93       	push	r28
    2ec8:	00 d0       	rcall	.+0      	; 0x2eca <LED_vTurnOn+0x6>
    2eca:	cd b7       	in	r28, 0x3d	; 61
    2ecc:	de b7       	in	r29, 0x3e	; 62
    2ece:	9a 83       	std	Y+2, r25	; 0x02
    2ed0:	89 83       	std	Y+1, r24	; 0x01
	if(LED != NULL){
    2ed2:	89 81       	ldd	r24, Y+1	; 0x01
    2ed4:	9a 81       	ldd	r25, Y+2	; 0x02
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	a1 f0       	breq	.+40     	; 0x2f02 <LED_vTurnOn+0x3e>
		DIO_vPinInit(LED->PortName, LED->PinNum, OUTPUT, HIGH);
    2eda:	e9 81       	ldd	r30, Y+1	; 0x01
    2edc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ede:	80 81       	ld	r24, Z
    2ee0:	86 95       	lsr	r24
    2ee2:	83 70       	andi	r24, 0x03	; 3
    2ee4:	28 2f       	mov	r18, r24
    2ee6:	e9 81       	ldd	r30, Y+1	; 0x01
    2ee8:	fa 81       	ldd	r31, Y+2	; 0x02
    2eea:	80 81       	ld	r24, Z
    2eec:	86 95       	lsr	r24
    2eee:	86 95       	lsr	r24
    2ef0:	86 95       	lsr	r24
    2ef2:	87 70       	andi	r24, 0x07	; 7
    2ef4:	98 2f       	mov	r25, r24
    2ef6:	82 2f       	mov	r24, r18
    2ef8:	69 2f       	mov	r22, r25
    2efa:	41 e0       	ldi	r20, 0x01	; 1
    2efc:	21 e0       	ldi	r18, 0x01	; 1
    2efe:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_vPinInit>
	}
	else{ /* Do Nothing */ }
}
    2f02:	0f 90       	pop	r0
    2f04:	0f 90       	pop	r0
    2f06:	cf 91       	pop	r28
    2f08:	df 91       	pop	r29
    2f0a:	08 95       	ret

00002f0c <LED_vTurnOff>:

void LED_vTurnOff(const LED_cfg *LED){
    2f0c:	df 93       	push	r29
    2f0e:	cf 93       	push	r28
    2f10:	00 d0       	rcall	.+0      	; 0x2f12 <LED_vTurnOff+0x6>
    2f12:	cd b7       	in	r28, 0x3d	; 61
    2f14:	de b7       	in	r29, 0x3e	; 62
    2f16:	9a 83       	std	Y+2, r25	; 0x02
    2f18:	89 83       	std	Y+1, r24	; 0x01
	if(LED != NULL){
    2f1a:	89 81       	ldd	r24, Y+1	; 0x01
    2f1c:	9a 81       	ldd	r25, Y+2	; 0x02
    2f1e:	00 97       	sbiw	r24, 0x00	; 0
    2f20:	a1 f0       	breq	.+40     	; 0x2f4a <LED_vTurnOff+0x3e>
		DIO_vPinInit(LED->PortName, LED->PinNum, OUTPUT, LOW);
    2f22:	e9 81       	ldd	r30, Y+1	; 0x01
    2f24:	fa 81       	ldd	r31, Y+2	; 0x02
    2f26:	80 81       	ld	r24, Z
    2f28:	86 95       	lsr	r24
    2f2a:	83 70       	andi	r24, 0x03	; 3
    2f2c:	28 2f       	mov	r18, r24
    2f2e:	e9 81       	ldd	r30, Y+1	; 0x01
    2f30:	fa 81       	ldd	r31, Y+2	; 0x02
    2f32:	80 81       	ld	r24, Z
    2f34:	86 95       	lsr	r24
    2f36:	86 95       	lsr	r24
    2f38:	86 95       	lsr	r24
    2f3a:	87 70       	andi	r24, 0x07	; 7
    2f3c:	98 2f       	mov	r25, r24
    2f3e:	82 2f       	mov	r24, r18
    2f40:	69 2f       	mov	r22, r25
    2f42:	41 e0       	ldi	r20, 0x01	; 1
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <DIO_vPinInit>
	}
	else{ /* Do Nothing */ }
}
    2f4a:	0f 90       	pop	r0
    2f4c:	0f 90       	pop	r0
    2f4e:	cf 91       	pop	r28
    2f50:	df 91       	pop	r29
    2f52:	08 95       	ret

00002f54 <LED_vToggle>:

void LED_vToggle(const LED_cfg *LED){
    2f54:	df 93       	push	r29
    2f56:	cf 93       	push	r28
    2f58:	00 d0       	rcall	.+0      	; 0x2f5a <LED_vToggle+0x6>
    2f5a:	cd b7       	in	r28, 0x3d	; 61
    2f5c:	de b7       	in	r29, 0x3e	; 62
    2f5e:	9a 83       	std	Y+2, r25	; 0x02
    2f60:	89 83       	std	Y+1, r24	; 0x01
	if(LED != NULL){
    2f62:	89 81       	ldd	r24, Y+1	; 0x01
    2f64:	9a 81       	ldd	r25, Y+2	; 0x02
    2f66:	00 97       	sbiw	r24, 0x00	; 0
    2f68:	91 f0       	breq	.+36     	; 0x2f8e <LED_vToggle+0x3a>
		DIO_vTogglePinValue(LED->PortName, LED->PinNum);
    2f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    2f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    2f6e:	80 81       	ld	r24, Z
    2f70:	86 95       	lsr	r24
    2f72:	83 70       	andi	r24, 0x03	; 3
    2f74:	28 2f       	mov	r18, r24
    2f76:	e9 81       	ldd	r30, Y+1	; 0x01
    2f78:	fa 81       	ldd	r31, Y+2	; 0x02
    2f7a:	80 81       	ld	r24, Z
    2f7c:	86 95       	lsr	r24
    2f7e:	86 95       	lsr	r24
    2f80:	86 95       	lsr	r24
    2f82:	87 70       	andi	r24, 0x07	; 7
    2f84:	98 2f       	mov	r25, r24
    2f86:	82 2f       	mov	r24, r18
    2f88:	69 2f       	mov	r22, r25
    2f8a:	0e 94 63 12 	call	0x24c6	; 0x24c6 <DIO_vTogglePinValue>
	}
	else{ /* Do Nothing */ }
}
    2f8e:	0f 90       	pop	r0
    2f90:	0f 90       	pop	r0
    2f92:	cf 91       	pop	r28
    2f94:	df 91       	pop	r29
    2f96:	08 95       	ret

00002f98 <EEPROM_vinit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "EEPROM_interface.h"

void EEPROM_vinit(void){
    2f98:	df 93       	push	r29
    2f9a:	cf 93       	push	r28
    2f9c:	cd b7       	in	r28, 0x3d	; 61
    2f9e:	de b7       	in	r29, 0x3e	; 62
	TWI_vInit();
    2fa0:	0e 94 3f 02 	call	0x47e	; 0x47e <TWI_vInit>
}
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <EEPROM_u8WriteByte>:
u8 EEPROM_u8WriteByte(u8 Copy_u8Address, u8 Copy_u8Data, enu_EEPROM_Blocks Copy_enuBlock){
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <EEPROM_u8WriteByte+0x6>
    2fb0:	00 d0       	rcall	.+0      	; 0x2fb2 <EEPROM_u8WriteByte+0x8>
    2fb2:	cd b7       	in	r28, 0x3d	; 61
    2fb4:	de b7       	in	r29, 0x3e	; 62
    2fb6:	89 83       	std	Y+1, r24	; 0x01
    2fb8:	6a 83       	std	Y+2, r22	; 0x02
    2fba:	4b 83       	std	Y+3, r20	; 0x03
	TWI_vStart();
    2fbc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <TWI_vStart>
	if(TWI_u8GetStatus() != TW_START){
    2fc0:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_u8GetStatus>
    2fc4:	88 30       	cpi	r24, 0x08	; 8
    2fc6:	11 f0       	breq	.+4      	; 0x2fcc <EEPROM_u8WriteByte+0x22>
		return 0;
    2fc8:	1c 82       	std	Y+4, r1	; 0x04
    2fca:	22 c0       	rjmp	.+68     	; 0x3010 <EEPROM_u8WriteByte+0x66>
	}
	/* Send the device address, we need to get A8 A9 A10 address bits from
	 * memory location address and R/W=0 (write) */
	//TWI_vWriteData( ((EEPROM_Address | EEPROM_EN_CFG | Copy_enuBlock) & 0xFE) );
	TWI_vWriteData( 0xA2 );
    2fcc:	82 ea       	ldi	r24, 0xA2	; 162
    2fce:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_SLA_W_ACK){
    2fd2:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_u8GetStatus>
    2fd6:	88 31       	cpi	r24, 0x18	; 24
    2fd8:	19 f0       	breq	.+6      	; 0x2fe0 <EEPROM_u8WriteByte+0x36>
		return 1;
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	8c 83       	std	Y+4, r24	; 0x04
    2fde:	18 c0       	rjmp	.+48     	; 0x3010 <EEPROM_u8WriteByte+0x66>
	}
	/* Send the required memory location address */
	TWI_vWriteData(Copy_u8Address);
    2fe0:	89 81       	ldd	r24, Y+1	; 0x01
    2fe2:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_DATA_ACK){
    2fe6:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_u8GetStatus>
    2fea:	88 32       	cpi	r24, 0x28	; 40
    2fec:	19 f0       	breq	.+6      	; 0x2ff4 <EEPROM_u8WriteByte+0x4a>
		return 2;
    2fee:	82 e0       	ldi	r24, 0x02	; 2
    2ff0:	8c 83       	std	Y+4, r24	; 0x04
    2ff2:	0e c0       	rjmp	.+28     	; 0x3010 <EEPROM_u8WriteByte+0x66>
	}

	/* Write byte to eeprom */
	TWI_vWriteData(Copy_u8Data);
    2ff4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ff6:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_DATA_ACK){
    2ffa:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_u8GetStatus>
    2ffe:	88 32       	cpi	r24, 0x28	; 40
    3000:	19 f0       	breq	.+6      	; 0x3008 <EEPROM_u8WriteByte+0x5e>
		return 3;
    3002:	83 e0       	ldi	r24, 0x03	; 3
    3004:	8c 83       	std	Y+4, r24	; 0x04
    3006:	04 c0       	rjmp	.+8      	; 0x3010 <EEPROM_u8WriteByte+0x66>
	}
	TWI_vStop();
    3008:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_vStop>
	return 4;
    300c:	84 e0       	ldi	r24, 0x04	; 4
    300e:	8c 83       	std	Y+4, r24	; 0x04
    3010:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	0f 90       	pop	r0
    3018:	0f 90       	pop	r0
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <EEPROM_u8ReadByte>:

u8 EEPROM_u8ReadByte(u8 Copy_u8Address, u8 *Copy_u8Data, enu_EEPROM_Blocks Copy_enuBlock){
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	00 d0       	rcall	.+0      	; 0x3026 <EEPROM_u8ReadByte+0x6>
    3026:	00 d0       	rcall	.+0      	; 0x3028 <EEPROM_u8ReadByte+0x8>
    3028:	0f 92       	push	r0
    302a:	cd b7       	in	r28, 0x3d	; 61
    302c:	de b7       	in	r29, 0x3e	; 62
    302e:	89 83       	std	Y+1, r24	; 0x01
    3030:	7b 83       	std	Y+3, r23	; 0x03
    3032:	6a 83       	std	Y+2, r22	; 0x02
    3034:	4c 83       	std	Y+4, r20	; 0x04
	TWI_vStart();
    3036:	0e 94 61 02 	call	0x4c2	; 0x4c2 <TWI_vStart>
	if(TWI_u8GetStatus() != TW_START){
    303a:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_u8GetStatus>
    303e:	88 30       	cpi	r24, 0x08	; 8
    3040:	11 f0       	breq	.+4      	; 0x3046 <EEPROM_u8ReadByte+0x26>
		return 0;
    3042:	1d 82       	std	Y+5, r1	; 0x05
    3044:	30 c0       	rjmp	.+96     	; 0x30a6 <EEPROM_u8ReadByte+0x86>
	}
	/* Send the device address, we need to get A8 A9 A10 address bits from
	 * memory location address and R/W=0 (write) */
	//TWI_vWriteData( (EEPROM_Address | EEPROM_EN_CFG | Copy_enuBlock) & 0xFE );
	TWI_vWriteData( 0xA2 );
    3046:	82 ea       	ldi	r24, 0xA2	; 162
    3048:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_SLA_W_ACK){
    304c:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_u8GetStatus>
    3050:	88 31       	cpi	r24, 0x18	; 24
    3052:	19 f0       	breq	.+6      	; 0x305a <EEPROM_u8ReadByte+0x3a>
		return 1;
    3054:	81 e0       	ldi	r24, 0x01	; 1
    3056:	8d 83       	std	Y+5, r24	; 0x05
    3058:	26 c0       	rjmp	.+76     	; 0x30a6 <EEPROM_u8ReadByte+0x86>
	}
	/* Send the required memory location address */
	TWI_vWriteData(Copy_u8Address);
    305a:	89 81       	ldd	r24, Y+1	; 0x01
    305c:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_DATA_ACK){
    3060:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_u8GetStatus>
    3064:	88 32       	cpi	r24, 0x28	; 40
    3066:	19 f0       	breq	.+6      	; 0x306e <EEPROM_u8ReadByte+0x4e>
		return 2;
    3068:	82 e0       	ldi	r24, 0x02	; 2
    306a:	8d 83       	std	Y+5, r24	; 0x05
    306c:	1c c0       	rjmp	.+56     	; 0x30a6 <EEPROM_u8ReadByte+0x86>
	}
	TWI_vStart();
    306e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <TWI_vStart>
	if(TWI_u8GetStatus() != TW_REP_START){
    3072:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_u8GetStatus>
    3076:	80 31       	cpi	r24, 0x10	; 16
    3078:	19 f0       	breq	.+6      	; 0x3080 <EEPROM_u8ReadByte+0x60>
		return 3;
    307a:	83 e0       	ldi	r24, 0x03	; 3
    307c:	8d 83       	std	Y+5, r24	; 0x05
    307e:	13 c0       	rjmp	.+38     	; 0x30a6 <EEPROM_u8ReadByte+0x86>
	}
	//TWI_vWriteData( EEPROM_Address | EEPROM_EN_CFG | Copy_enuBlock | 1 );
	TWI_vWriteData( 0xA3 );
    3080:	83 ea       	ldi	r24, 0xA3	; 163
    3082:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_SLA_R_ACK){
    3086:	0e 94 d8 02 	call	0x5b0	; 0x5b0 <TWI_u8GetStatus>
    308a:	80 34       	cpi	r24, 0x40	; 64
    308c:	19 f0       	breq	.+6      	; 0x3094 <EEPROM_u8ReadByte+0x74>
		return 4;
    308e:	84 e0       	ldi	r24, 0x04	; 4
    3090:	8d 83       	std	Y+5, r24	; 0x05
    3092:	09 c0       	rjmp	.+18     	; 0x30a6 <EEPROM_u8ReadByte+0x86>
	}
	*Copy_u8Data = TWI_u8ReadWithNoAck();
    3094:	0e 94 b9 02 	call	0x572	; 0x572 <TWI_u8ReadWithNoAck>
    3098:	ea 81       	ldd	r30, Y+2	; 0x02
    309a:	fb 81       	ldd	r31, Y+3	; 0x03
    309c:	80 83       	st	Z, r24
	TWI_vStop();
    309e:	0e 94 71 02 	call	0x4e2	; 0x4e2 <TWI_vStop>
	return 5;
    30a2:	85 e0       	ldi	r24, 0x05	; 5
    30a4:	8d 83       	std	Y+5, r24	; 0x05
    30a6:	8d 81       	ldd	r24, Y+5	; 0x05
}
    30a8:	0f 90       	pop	r0
    30aa:	0f 90       	pop	r0
    30ac:	0f 90       	pop	r0
    30ae:	0f 90       	pop	r0
    30b0:	0f 90       	pop	r0
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <BUZZER_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "buzzer_interface.h"

void BUZZER_vInit(const buzzer_cfg *PTR_BUZZER){
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <BUZZER_vInit+0x6>
    30be:	cd b7       	in	r28, 0x3d	; 61
    30c0:	de b7       	in	r29, 0x3e	; 62
    30c2:	9a 83       	std	Y+2, r25	; 0x02
    30c4:	89 83       	std	Y+1, r24	; 0x01
	DIO_vSetPinDir(PTR_BUZZER->buzzer_port, PTR_BUZZER->buzzer_pin, OUTPUT);
    30c6:	e9 81       	ldd	r30, Y+1	; 0x01
    30c8:	fa 81       	ldd	r31, Y+2	; 0x02
    30ca:	80 81       	ld	r24, Z
    30cc:	83 70       	andi	r24, 0x03	; 3
    30ce:	28 2f       	mov	r18, r24
    30d0:	e9 81       	ldd	r30, Y+1	; 0x01
    30d2:	fa 81       	ldd	r31, Y+2	; 0x02
    30d4:	80 81       	ld	r24, Z
    30d6:	86 95       	lsr	r24
    30d8:	86 95       	lsr	r24
    30da:	87 70       	andi	r24, 0x07	; 7
    30dc:	98 2f       	mov	r25, r24
    30de:	82 2f       	mov	r24, r18
    30e0:	69 2f       	mov	r22, r25
    30e2:	41 e0       	ldi	r20, 0x01	; 1
    30e4:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <DIO_vSetPinDir>
}
    30e8:	0f 90       	pop	r0
    30ea:	0f 90       	pop	r0
    30ec:	cf 91       	pop	r28
    30ee:	df 91       	pop	r29
    30f0:	08 95       	ret

000030f2 <BUZZER_vShortBeep>:

void BUZZER_vShortBeep(const buzzer_cfg *PTR_BUZZER){
    30f2:	df 93       	push	r29
    30f4:	cf 93       	push	r28
    30f6:	00 d0       	rcall	.+0      	; 0x30f8 <BUZZER_vShortBeep+0x6>
    30f8:	00 d0       	rcall	.+0      	; 0x30fa <BUZZER_vShortBeep+0x8>
    30fa:	cd b7       	in	r28, 0x3d	; 61
    30fc:	de b7       	in	r29, 0x3e	; 62
    30fe:	9c 83       	std	Y+4, r25	; 0x04
    3100:	8b 83       	std	Y+3, r24	; 0x03
	DIO_vSetPinValue(PTR_BUZZER->buzzer_port, PTR_BUZZER->buzzer_pin, HIGH);
    3102:	eb 81       	ldd	r30, Y+3	; 0x03
    3104:	fc 81       	ldd	r31, Y+4	; 0x04
    3106:	80 81       	ld	r24, Z
    3108:	83 70       	andi	r24, 0x03	; 3
    310a:	28 2f       	mov	r18, r24
    310c:	eb 81       	ldd	r30, Y+3	; 0x03
    310e:	fc 81       	ldd	r31, Y+4	; 0x04
    3110:	80 81       	ld	r24, Z
    3112:	86 95       	lsr	r24
    3114:	86 95       	lsr	r24
    3116:	87 70       	andi	r24, 0x07	; 7
    3118:	98 2f       	mov	r25, r24
    311a:	82 2f       	mov	r24, r18
    311c:	69 2f       	mov	r22, r25
    311e:	41 e0       	ldi	r20, 0x01	; 1
    3120:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <DIO_vSetPinValue>
	for(int i=0;i<20000;i++);
    3124:	1a 82       	std	Y+2, r1	; 0x02
    3126:	19 82       	std	Y+1, r1	; 0x01
    3128:	05 c0       	rjmp	.+10     	; 0x3134 <BUZZER_vShortBeep+0x42>
    312a:	89 81       	ldd	r24, Y+1	; 0x01
    312c:	9a 81       	ldd	r25, Y+2	; 0x02
    312e:	01 96       	adiw	r24, 0x01	; 1
    3130:	9a 83       	std	Y+2, r25	; 0x02
    3132:	89 83       	std	Y+1, r24	; 0x01
    3134:	89 81       	ldd	r24, Y+1	; 0x01
    3136:	9a 81       	ldd	r25, Y+2	; 0x02
    3138:	2e e4       	ldi	r18, 0x4E	; 78
    313a:	80 32       	cpi	r24, 0x20	; 32
    313c:	92 07       	cpc	r25, r18
    313e:	ac f3       	brlt	.-22     	; 0x312a <BUZZER_vShortBeep+0x38>
	DIO_vSetPinValue(PTR_BUZZER->buzzer_port, PTR_BUZZER->buzzer_pin, LOW);
    3140:	eb 81       	ldd	r30, Y+3	; 0x03
    3142:	fc 81       	ldd	r31, Y+4	; 0x04
    3144:	80 81       	ld	r24, Z
    3146:	83 70       	andi	r24, 0x03	; 3
    3148:	28 2f       	mov	r18, r24
    314a:	eb 81       	ldd	r30, Y+3	; 0x03
    314c:	fc 81       	ldd	r31, Y+4	; 0x04
    314e:	80 81       	ld	r24, Z
    3150:	86 95       	lsr	r24
    3152:	86 95       	lsr	r24
    3154:	87 70       	andi	r24, 0x07	; 7
    3156:	98 2f       	mov	r25, r24
    3158:	82 2f       	mov	r24, r18
    315a:	69 2f       	mov	r22, r25
    315c:	40 e0       	ldi	r20, 0x00	; 0
    315e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <DIO_vSetPinValue>
}
    3162:	0f 90       	pop	r0
    3164:	0f 90       	pop	r0
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	cf 91       	pop	r28
    316c:	df 91       	pop	r29
    316e:	08 95       	ret

00003170 <BUZZER_vLongBeep>:

void BUZZER_vLongBeep(const buzzer_cfg *PTR_BUZZER){
    3170:	df 93       	push	r29
    3172:	cf 93       	push	r28
    3174:	00 d0       	rcall	.+0      	; 0x3176 <BUZZER_vLongBeep+0x6>
    3176:	00 d0       	rcall	.+0      	; 0x3178 <BUZZER_vLongBeep+0x8>
    3178:	00 d0       	rcall	.+0      	; 0x317a <BUZZER_vLongBeep+0xa>
    317a:	cd b7       	in	r28, 0x3d	; 61
    317c:	de b7       	in	r29, 0x3e	; 62
    317e:	9e 83       	std	Y+6, r25	; 0x06
    3180:	8d 83       	std	Y+5, r24	; 0x05
	DIO_vSetPinValue(PTR_BUZZER->buzzer_port, PTR_BUZZER->buzzer_pin, HIGH);
    3182:	ed 81       	ldd	r30, Y+5	; 0x05
    3184:	fe 81       	ldd	r31, Y+6	; 0x06
    3186:	80 81       	ld	r24, Z
    3188:	83 70       	andi	r24, 0x03	; 3
    318a:	28 2f       	mov	r18, r24
    318c:	ed 81       	ldd	r30, Y+5	; 0x05
    318e:	fe 81       	ldd	r31, Y+6	; 0x06
    3190:	80 81       	ld	r24, Z
    3192:	86 95       	lsr	r24
    3194:	86 95       	lsr	r24
    3196:	87 70       	andi	r24, 0x07	; 7
    3198:	98 2f       	mov	r25, r24
    319a:	82 2f       	mov	r24, r18
    319c:	69 2f       	mov	r22, r25
    319e:	41 e0       	ldi	r20, 0x01	; 1
    31a0:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <DIO_vSetPinValue>
	for(u32 i=0;i<80000;i++);
    31a4:	19 82       	std	Y+1, r1	; 0x01
    31a6:	1a 82       	std	Y+2, r1	; 0x02
    31a8:	1b 82       	std	Y+3, r1	; 0x03
    31aa:	1c 82       	std	Y+4, r1	; 0x04
    31ac:	0b c0       	rjmp	.+22     	; 0x31c4 <BUZZER_vLongBeep+0x54>
    31ae:	89 81       	ldd	r24, Y+1	; 0x01
    31b0:	9a 81       	ldd	r25, Y+2	; 0x02
    31b2:	ab 81       	ldd	r26, Y+3	; 0x03
    31b4:	bc 81       	ldd	r27, Y+4	; 0x04
    31b6:	01 96       	adiw	r24, 0x01	; 1
    31b8:	a1 1d       	adc	r26, r1
    31ba:	b1 1d       	adc	r27, r1
    31bc:	89 83       	std	Y+1, r24	; 0x01
    31be:	9a 83       	std	Y+2, r25	; 0x02
    31c0:	ab 83       	std	Y+3, r26	; 0x03
    31c2:	bc 83       	std	Y+4, r27	; 0x04
    31c4:	89 81       	ldd	r24, Y+1	; 0x01
    31c6:	9a 81       	ldd	r25, Y+2	; 0x02
    31c8:	ab 81       	ldd	r26, Y+3	; 0x03
    31ca:	bc 81       	ldd	r27, Y+4	; 0x04
    31cc:	80 38       	cpi	r24, 0x80	; 128
    31ce:	28 e3       	ldi	r18, 0x38	; 56
    31d0:	92 07       	cpc	r25, r18
    31d2:	21 e0       	ldi	r18, 0x01	; 1
    31d4:	a2 07       	cpc	r26, r18
    31d6:	20 e0       	ldi	r18, 0x00	; 0
    31d8:	b2 07       	cpc	r27, r18
    31da:	48 f3       	brcs	.-46     	; 0x31ae <BUZZER_vLongBeep+0x3e>
	DIO_vSetPinValue(PTR_BUZZER->buzzer_port, PTR_BUZZER->buzzer_pin, LOW);
    31dc:	ed 81       	ldd	r30, Y+5	; 0x05
    31de:	fe 81       	ldd	r31, Y+6	; 0x06
    31e0:	80 81       	ld	r24, Z
    31e2:	83 70       	andi	r24, 0x03	; 3
    31e4:	28 2f       	mov	r18, r24
    31e6:	ed 81       	ldd	r30, Y+5	; 0x05
    31e8:	fe 81       	ldd	r31, Y+6	; 0x06
    31ea:	80 81       	ld	r24, Z
    31ec:	86 95       	lsr	r24
    31ee:	86 95       	lsr	r24
    31f0:	87 70       	andi	r24, 0x07	; 7
    31f2:	98 2f       	mov	r25, r24
    31f4:	82 2f       	mov	r24, r18
    31f6:	69 2f       	mov	r22, r25
    31f8:	40 e0       	ldi	r20, 0x00	; 0
    31fa:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <DIO_vSetPinValue>
}
    31fe:	26 96       	adiw	r28, 0x06	; 6
    3200:	0f b6       	in	r0, 0x3f	; 63
    3202:	f8 94       	cli
    3204:	de bf       	out	0x3e, r29	; 62
    3206:	0f be       	out	0x3f, r0	; 63
    3208:	cd bf       	out	0x3d, r28	; 61
    320a:	cf 91       	pop	r28
    320c:	df 91       	pop	r29
    320e:	08 95       	ret

00003210 <app_copy_string>:
#include "string_functions.h"

/*
 * Function to save a string with known length into another variable
 */
void app_copy_string(u8* Copy_u8InputString, u8* Copy_u8OutputString, u8 Copy_u8Length){
    3210:	df 93       	push	r29
    3212:	cf 93       	push	r28
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	27 97       	sbiw	r28, 0x07	; 7
    321a:	0f b6       	in	r0, 0x3f	; 63
    321c:	f8 94       	cli
    321e:	de bf       	out	0x3e, r29	; 62
    3220:	0f be       	out	0x3f, r0	; 63
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	9c 83       	std	Y+4, r25	; 0x04
    3226:	8b 83       	std	Y+3, r24	; 0x03
    3228:	7e 83       	std	Y+6, r23	; 0x06
    322a:	6d 83       	std	Y+5, r22	; 0x05
    322c:	4f 83       	std	Y+7, r20	; 0x07
	app_clear_string(Copy_u8OutputString, array_max_size);
    322e:	8d 81       	ldd	r24, Y+5	; 0x05
    3230:	9e 81       	ldd	r25, Y+6	; 0x06
    3232:	64 e1       	ldi	r22, 0x14	; 20
    3234:	0e 94 45 19 	call	0x328a	; 0x328a <app_clear_string>
	for(int i=0;i<Copy_u8Length;i++){
    3238:	1a 82       	std	Y+2, r1	; 0x02
    323a:	19 82       	std	Y+1, r1	; 0x01
    323c:	15 c0       	rjmp	.+42     	; 0x3268 <app_copy_string+0x58>
		Copy_u8OutputString[i] = Copy_u8InputString[i];
    323e:	29 81       	ldd	r18, Y+1	; 0x01
    3240:	3a 81       	ldd	r19, Y+2	; 0x02
    3242:	8d 81       	ldd	r24, Y+5	; 0x05
    3244:	9e 81       	ldd	r25, Y+6	; 0x06
    3246:	dc 01       	movw	r26, r24
    3248:	a2 0f       	add	r26, r18
    324a:	b3 1f       	adc	r27, r19
    324c:	29 81       	ldd	r18, Y+1	; 0x01
    324e:	3a 81       	ldd	r19, Y+2	; 0x02
    3250:	8b 81       	ldd	r24, Y+3	; 0x03
    3252:	9c 81       	ldd	r25, Y+4	; 0x04
    3254:	fc 01       	movw	r30, r24
    3256:	e2 0f       	add	r30, r18
    3258:	f3 1f       	adc	r31, r19
    325a:	80 81       	ld	r24, Z
    325c:	8c 93       	st	X, r24
/*
 * Function to save a string with known length into another variable
 */
void app_copy_string(u8* Copy_u8InputString, u8* Copy_u8OutputString, u8 Copy_u8Length){
	app_clear_string(Copy_u8OutputString, array_max_size);
	for(int i=0;i<Copy_u8Length;i++){
    325e:	89 81       	ldd	r24, Y+1	; 0x01
    3260:	9a 81       	ldd	r25, Y+2	; 0x02
    3262:	01 96       	adiw	r24, 0x01	; 1
    3264:	9a 83       	std	Y+2, r25	; 0x02
    3266:	89 83       	std	Y+1, r24	; 0x01
    3268:	8f 81       	ldd	r24, Y+7	; 0x07
    326a:	28 2f       	mov	r18, r24
    326c:	30 e0       	ldi	r19, 0x00	; 0
    326e:	89 81       	ldd	r24, Y+1	; 0x01
    3270:	9a 81       	ldd	r25, Y+2	; 0x02
    3272:	82 17       	cp	r24, r18
    3274:	93 07       	cpc	r25, r19
    3276:	1c f3       	brlt	.-58     	; 0x323e <app_copy_string+0x2e>
		Copy_u8OutputString[i] = Copy_u8InputString[i];
	}
}
    3278:	27 96       	adiw	r28, 0x07	; 7
    327a:	0f b6       	in	r0, 0x3f	; 63
    327c:	f8 94       	cli
    327e:	de bf       	out	0x3e, r29	; 62
    3280:	0f be       	out	0x3f, r0	; 63
    3282:	cd bf       	out	0x3d, r28	; 61
    3284:	cf 91       	pop	r28
    3286:	df 91       	pop	r29
    3288:	08 95       	ret

0000328a <app_clear_string>:

/**
 * Function to clear an array to null
 */
void app_clear_string(u8* Copy_u8InputString, u8 Copy_u8Length){
    328a:	df 93       	push	r29
    328c:	cf 93       	push	r28
    328e:	00 d0       	rcall	.+0      	; 0x3290 <app_clear_string+0x6>
    3290:	00 d0       	rcall	.+0      	; 0x3292 <app_clear_string+0x8>
    3292:	0f 92       	push	r0
    3294:	cd b7       	in	r28, 0x3d	; 61
    3296:	de b7       	in	r29, 0x3e	; 62
    3298:	9c 83       	std	Y+4, r25	; 0x04
    329a:	8b 83       	std	Y+3, r24	; 0x03
    329c:	6d 83       	std	Y+5, r22	; 0x05
	for(int i=0;i<Copy_u8Length;i++){
    329e:	1a 82       	std	Y+2, r1	; 0x02
    32a0:	19 82       	std	Y+1, r1	; 0x01
    32a2:	0d c0       	rjmp	.+26     	; 0x32be <app_clear_string+0x34>
		Copy_u8InputString[i] = NULL;
    32a4:	29 81       	ldd	r18, Y+1	; 0x01
    32a6:	3a 81       	ldd	r19, Y+2	; 0x02
    32a8:	8b 81       	ldd	r24, Y+3	; 0x03
    32aa:	9c 81       	ldd	r25, Y+4	; 0x04
    32ac:	fc 01       	movw	r30, r24
    32ae:	e2 0f       	add	r30, r18
    32b0:	f3 1f       	adc	r31, r19
    32b2:	10 82       	st	Z, r1

/**
 * Function to clear an array to null
 */
void app_clear_string(u8* Copy_u8InputString, u8 Copy_u8Length){
	for(int i=0;i<Copy_u8Length;i++){
    32b4:	89 81       	ldd	r24, Y+1	; 0x01
    32b6:	9a 81       	ldd	r25, Y+2	; 0x02
    32b8:	01 96       	adiw	r24, 0x01	; 1
    32ba:	9a 83       	std	Y+2, r25	; 0x02
    32bc:	89 83       	std	Y+1, r24	; 0x01
    32be:	8d 81       	ldd	r24, Y+5	; 0x05
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	9a 81       	ldd	r25, Y+2	; 0x02
    32c8:	82 17       	cp	r24, r18
    32ca:	93 07       	cpc	r25, r19
    32cc:	5c f3       	brlt	.-42     	; 0x32a4 <app_clear_string+0x1a>
		Copy_u8InputString[i] = NULL;
	}
}
    32ce:	0f 90       	pop	r0
    32d0:	0f 90       	pop	r0
    32d2:	0f 90       	pop	r0
    32d4:	0f 90       	pop	r0
    32d6:	0f 90       	pop	r0
    32d8:	cf 91       	pop	r28
    32da:	df 91       	pop	r29
    32dc:	08 95       	ret

000032de <psw_Check_Credentials>:
 * This function takes username and password as input and check if it's equal to the saved ones
 * returns master_data if the inputs are for master user
 * returns correct_data if the inputs are for saved username and password
 * returns wrong_data if the inputs are not identical for any saved username and password
 */
enu_psw_check_return psw_Check_Credentials(){
    32de:	df 93       	push	r29
    32e0:	cf 93       	push	r28
    32e2:	00 d0       	rcall	.+0      	; 0x32e4 <psw_Check_Credentials+0x6>
    32e4:	cd b7       	in	r28, 0x3d	; 61
    32e6:	de b7       	in	r29, 0x3e	; 62
	u8 temp_return = 0;
    32e8:	19 82       	std	Y+1, r1	; 0x01
	/* Check if username and password are for master */
	temp_return = psw_Check_If_Master();
    32ea:	0e 94 af 19 	call	0x335e	; 0x335e <psw_Check_If_Master>
    32ee:	89 83       	std	Y+1, r24	; 0x01
	if(temp_return == 1){
    32f0:	89 81       	ldd	r24, Y+1	; 0x01
    32f2:	81 30       	cpi	r24, 0x01	; 1
    32f4:	19 f4       	brne	.+6      	; 0x32fc <psw_Check_Credentials+0x1e>
		return master_data;
    32f6:	82 e0       	ldi	r24, 0x02	; 2
    32f8:	8a 83       	std	Y+2, r24	; 0x02
    32fa:	2b c0       	rjmp	.+86     	; 0x3352 <psw_Check_Credentials+0x74>
	}
	/* If not, check for saved users */
	if(strcmp((char*)saved_user1, (char*)input_username_string) == 0){
    32fc:	87 e5       	ldi	r24, 0x57	; 87
    32fe:	92 e0       	ldi	r25, 0x02	; 2
    3300:	20 ec       	ldi	r18, 0xC0	; 192
    3302:	32 e0       	ldi	r19, 0x02	; 2
    3304:	b9 01       	movw	r22, r18
    3306:	0e 94 bc 1b 	call	0x3778	; 0x3778 <strcmp>
    330a:	00 97       	sbiw	r24, 0x00	; 0
    330c:	61 f4       	brne	.+24     	; 0x3326 <psw_Check_Credentials+0x48>
		if(strcmp((char*)saved_user1_psw, (char*)input_psw_string) == 0){
    330e:	8b e6       	ldi	r24, 0x6B	; 107
    3310:	92 e0       	ldi	r25, 0x02	; 2
    3312:	25 ed       	ldi	r18, 0xD5	; 213
    3314:	32 e0       	ldi	r19, 0x02	; 2
    3316:	b9 01       	movw	r22, r18
    3318:	0e 94 bc 1b 	call	0x3778	; 0x3778 <strcmp>
    331c:	00 97       	sbiw	r24, 0x00	; 0
    331e:	c1 f4       	brne	.+48     	; 0x3350 <psw_Check_Credentials+0x72>
			return correct_data;
    3320:	81 e0       	ldi	r24, 0x01	; 1
    3322:	8a 83       	std	Y+2, r24	; 0x02
    3324:	16 c0       	rjmp	.+44     	; 0x3352 <psw_Check_Credentials+0x74>
		}
	}
	else if(strcmp((char*)saved_user2, (char*)input_username_string) == 0){
    3326:	8f e7       	ldi	r24, 0x7F	; 127
    3328:	92 e0       	ldi	r25, 0x02	; 2
    332a:	20 ec       	ldi	r18, 0xC0	; 192
    332c:	32 e0       	ldi	r19, 0x02	; 2
    332e:	b9 01       	movw	r22, r18
    3330:	0e 94 bc 1b 	call	0x3778	; 0x3778 <strcmp>
    3334:	00 97       	sbiw	r24, 0x00	; 0
    3336:	61 f4       	brne	.+24     	; 0x3350 <psw_Check_Credentials+0x72>
		if(strcmp((char*)saved_user2_psw, (char*)input_psw_string) == 0){
    3338:	83 e9       	ldi	r24, 0x93	; 147
    333a:	92 e0       	ldi	r25, 0x02	; 2
    333c:	25 ed       	ldi	r18, 0xD5	; 213
    333e:	32 e0       	ldi	r19, 0x02	; 2
    3340:	b9 01       	movw	r22, r18
    3342:	0e 94 bc 1b 	call	0x3778	; 0x3778 <strcmp>
    3346:	00 97       	sbiw	r24, 0x00	; 0
    3348:	19 f4       	brne	.+6      	; 0x3350 <psw_Check_Credentials+0x72>
			return correct_data;
    334a:	81 e0       	ldi	r24, 0x01	; 1
    334c:	8a 83       	std	Y+2, r24	; 0x02
    334e:	01 c0       	rjmp	.+2      	; 0x3352 <psw_Check_Credentials+0x74>
		}
	}
	/* If not, return 0 as not found */
	return wrong_data;
    3350:	1a 82       	std	Y+2, r1	; 0x02
    3352:	8a 81       	ldd	r24, Y+2	; 0x02
}
    3354:	0f 90       	pop	r0
    3356:	0f 90       	pop	r0
    3358:	cf 91       	pop	r28
    335a:	df 91       	pop	r29
    335c:	08 95       	ret

0000335e <psw_Check_If_Master>:
/*
 * This function checks if username and password are for master user or not
 * returns 1 if the inputs are identical to master login credentials
 * returns 0 if the inputs are not identical to master login credentials
 */
static u8 psw_Check_If_Master(){
    335e:	df 93       	push	r29
    3360:	cf 93       	push	r28
    3362:	cd b7       	in	r28, 0x3d	; 61
    3364:	de b7       	in	r29, 0x3e	; 62
    3366:	e3 97       	sbiw	r28, 0x33	; 51
    3368:	0f b6       	in	r0, 0x3f	; 63
    336a:	f8 94       	cli
    336c:	de bf       	out	0x3e, r29	; 62
    336e:	0f be       	out	0x3f, r0	; 63
    3370:	cd bf       	out	0x3d, r28	; 61
	u8 Master_username[20] = "MASTER";
    3372:	ce 01       	movw	r24, r28
    3374:	01 96       	adiw	r24, 0x01	; 1
    3376:	9b a7       	std	Y+43, r25	; 0x2b
    3378:	8a a7       	std	Y+42, r24	; 0x2a
    337a:	a0 e6       	ldi	r26, 0x60	; 96
    337c:	b0 e0       	ldi	r27, 0x00	; 0
    337e:	bd a7       	std	Y+45, r27	; 0x2d
    3380:	ac a7       	std	Y+44, r26	; 0x2c
    3382:	b7 e0       	ldi	r27, 0x07	; 7
    3384:	be a7       	std	Y+46, r27	; 0x2e
    3386:	ec a5       	ldd	r30, Y+44	; 0x2c
    3388:	fd a5       	ldd	r31, Y+45	; 0x2d
    338a:	00 80       	ld	r0, Z
    338c:	8c a5       	ldd	r24, Y+44	; 0x2c
    338e:	9d a5       	ldd	r25, Y+45	; 0x2d
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	9d a7       	std	Y+45, r25	; 0x2d
    3394:	8c a7       	std	Y+44, r24	; 0x2c
    3396:	aa a5       	ldd	r26, Y+42	; 0x2a
    3398:	bb a5       	ldd	r27, Y+43	; 0x2b
    339a:	0c 92       	st	X, r0
    339c:	ea a5       	ldd	r30, Y+42	; 0x2a
    339e:	fb a5       	ldd	r31, Y+43	; 0x2b
    33a0:	31 96       	adiw	r30, 0x01	; 1
    33a2:	fb a7       	std	Y+43, r31	; 0x2b
    33a4:	ea a7       	std	Y+42, r30	; 0x2a
    33a6:	fe a5       	ldd	r31, Y+46	; 0x2e
    33a8:	f1 50       	subi	r31, 0x01	; 1
    33aa:	fe a7       	std	Y+46, r31	; 0x2e
    33ac:	8e a5       	ldd	r24, Y+46	; 0x2e
    33ae:	88 23       	and	r24, r24
    33b0:	51 f7       	brne	.-44     	; 0x3386 <psw_Check_If_Master+0x28>
    33b2:	8d e0       	ldi	r24, 0x0D	; 13
    33b4:	fe 01       	movw	r30, r28
    33b6:	38 96       	adiw	r30, 0x08	; 8
    33b8:	df 01       	movw	r26, r30
    33ba:	98 2f       	mov	r25, r24
    33bc:	1d 92       	st	X+, r1
    33be:	9a 95       	dec	r25
    33c0:	e9 f7       	brne	.-6      	; 0x33bc <psw_Check_If_Master+0x5e>
	u8 Master_password[20] = "MASTER";
    33c2:	de 01       	movw	r26, r28
    33c4:	55 96       	adiw	r26, 0x15	; 21
    33c6:	b8 ab       	std	Y+48, r27	; 0x30
    33c8:	af a7       	std	Y+47, r26	; 0x2f
    33ca:	e0 e6       	ldi	r30, 0x60	; 96
    33cc:	f0 e0       	ldi	r31, 0x00	; 0
    33ce:	fa ab       	std	Y+50, r31	; 0x32
    33d0:	e9 ab       	std	Y+49, r30	; 0x31
    33d2:	f7 e0       	ldi	r31, 0x07	; 7
    33d4:	fb ab       	std	Y+51, r31	; 0x33
    33d6:	a9 a9       	ldd	r26, Y+49	; 0x31
    33d8:	ba a9       	ldd	r27, Y+50	; 0x32
    33da:	0c 90       	ld	r0, X
    33dc:	e9 a9       	ldd	r30, Y+49	; 0x31
    33de:	fa a9       	ldd	r31, Y+50	; 0x32
    33e0:	31 96       	adiw	r30, 0x01	; 1
    33e2:	fa ab       	std	Y+50, r31	; 0x32
    33e4:	e9 ab       	std	Y+49, r30	; 0x31
    33e6:	af a5       	ldd	r26, Y+47	; 0x2f
    33e8:	b8 a9       	ldd	r27, Y+48	; 0x30
    33ea:	0c 92       	st	X, r0
    33ec:	ef a5       	ldd	r30, Y+47	; 0x2f
    33ee:	f8 a9       	ldd	r31, Y+48	; 0x30
    33f0:	31 96       	adiw	r30, 0x01	; 1
    33f2:	f8 ab       	std	Y+48, r31	; 0x30
    33f4:	ef a7       	std	Y+47, r30	; 0x2f
    33f6:	fb a9       	ldd	r31, Y+51	; 0x33
    33f8:	f1 50       	subi	r31, 0x01	; 1
    33fa:	fb ab       	std	Y+51, r31	; 0x33
    33fc:	8b a9       	ldd	r24, Y+51	; 0x33
    33fe:	88 23       	and	r24, r24
    3400:	51 f7       	brne	.-44     	; 0x33d6 <psw_Check_If_Master+0x78>
    3402:	8d e0       	ldi	r24, 0x0D	; 13
    3404:	fe 01       	movw	r30, r28
    3406:	7c 96       	adiw	r30, 0x1c	; 28
    3408:	df 01       	movw	r26, r30
    340a:	98 2f       	mov	r25, r24
    340c:	1d 92       	st	X+, r1
    340e:	9a 95       	dec	r25
    3410:	e9 f7       	brne	.-6      	; 0x340c <psw_Check_If_Master+0xae>
	/* If username and password equals to master user and password, return 1 */
	if( (strcmp((char*)input_username_string, (char*)Master_username) == 0) && (strcmp((char*)input_psw_string, (char*)Master_password) == 0) ){
    3412:	80 ec       	ldi	r24, 0xC0	; 192
    3414:	92 e0       	ldi	r25, 0x02	; 2
    3416:	9e 01       	movw	r18, r28
    3418:	2f 5f       	subi	r18, 0xFF	; 255
    341a:	3f 4f       	sbci	r19, 0xFF	; 255
    341c:	b9 01       	movw	r22, r18
    341e:	0e 94 bc 1b 	call	0x3778	; 0x3778 <strcmp>
    3422:	00 97       	sbiw	r24, 0x00	; 0
    3424:	69 f4       	brne	.+26     	; 0x3440 <psw_Check_If_Master+0xe2>
    3426:	85 ed       	ldi	r24, 0xD5	; 213
    3428:	92 e0       	ldi	r25, 0x02	; 2
    342a:	9e 01       	movw	r18, r28
    342c:	2b 5e       	subi	r18, 0xEB	; 235
    342e:	3f 4f       	sbci	r19, 0xFF	; 255
    3430:	b9 01       	movw	r22, r18
    3432:	0e 94 bc 1b 	call	0x3778	; 0x3778 <strcmp>
    3436:	00 97       	sbiw	r24, 0x00	; 0
    3438:	19 f4       	brne	.+6      	; 0x3440 <psw_Check_If_Master+0xe2>
		return 1;
    343a:	a1 e0       	ldi	r26, 0x01	; 1
    343c:	a9 a7       	std	Y+41, r26	; 0x29
    343e:	01 c0       	rjmp	.+2      	; 0x3442 <psw_Check_If_Master+0xe4>
	}
	/* If username and password are not for master user, return 0 */
	return 0;
    3440:	19 a6       	std	Y+41, r1	; 0x29
    3442:	89 a5       	ldd	r24, Y+41	; 0x29
}
    3444:	e3 96       	adiw	r28, 0x33	; 51
    3446:	0f b6       	in	r0, 0x3f	; 63
    3448:	f8 94       	cli
    344a:	de bf       	out	0x3e, r29	; 62
    344c:	0f be       	out	0x3f, r0	; 63
    344e:	cd bf       	out	0x3d, r28	; 61
    3450:	cf 91       	pop	r28
    3452:	df 91       	pop	r29
    3454:	08 95       	ret

00003456 <master_main_interface>:

static void master_remove_user();

static void master_list_users();

void master_main_interface(void){
    3456:	df 93       	push	r29
    3458:	cf 93       	push	r28
    345a:	00 d0       	rcall	.+0      	; 0x345c <master_main_interface+0x6>
    345c:	0f 92       	push	r0
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62

	UART_vSendString((u8*)"\n\rWelcome to master user mode\n\r");
    3462:	84 e7       	ldi	r24, 0x74	; 116
    3464:	90 e0       	ldi	r25, 0x00	; 0
    3466:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
	UART_vSendString((u8*)"---------------------------\n\r");
    346a:	84 e9       	ldi	r24, 0x94	; 148
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
	u8 user_choice;
	while(1){
		UART_vSendString((u8*)"\n\r1- Add new user\n\r");
    3472:	82 eb       	ldi	r24, 0xB2	; 178
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
		UART_vSendString((u8*)"2- Remove a user\n\r");
    347a:	86 ec       	ldi	r24, 0xC6	; 198
    347c:	90 e0       	ldi	r25, 0x00	; 0
    347e:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
		UART_vSendString((u8*)"3- List all users\n\r");
    3482:	89 ed       	ldi	r24, 0xD9	; 217
    3484:	90 e0       	ldi	r25, 0x00	; 0
    3486:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
		UART_vSendString((u8*)"0- Exit master user\n\r");
    348a:	8d ee       	ldi	r24, 0xED	; 237
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
		UART_vSendString((u8*)"Your choice: ");
    3492:	83 e0       	ldi	r24, 0x03	; 3
    3494:	91 e0       	ldi	r25, 0x01	; 1
    3496:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
		user_choice = UART_u8ReceiveData();
    349a:	0e 94 05 02 	call	0x40a	; 0x40a <UART_u8ReceiveData>
    349e:	89 83       	std	Y+1, r24	; 0x01
		UART_vSendData(user_choice);
    34a0:	89 81       	ldd	r24, Y+1	; 0x01
    34a2:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <UART_vSendData>
		switch(user_choice){
    34a6:	89 81       	ldd	r24, Y+1	; 0x01
    34a8:	28 2f       	mov	r18, r24
    34aa:	30 e0       	ldi	r19, 0x00	; 0
    34ac:	3b 83       	std	Y+3, r19	; 0x03
    34ae:	2a 83       	std	Y+2, r18	; 0x02
    34b0:	8a 81       	ldd	r24, Y+2	; 0x02
    34b2:	9b 81       	ldd	r25, Y+3	; 0x03
    34b4:	81 33       	cpi	r24, 0x31	; 49
    34b6:	91 05       	cpc	r25, r1
    34b8:	21 f1       	breq	.+72     	; 0x3502 <master_main_interface+0xac>
    34ba:	2a 81       	ldd	r18, Y+2	; 0x02
    34bc:	3b 81       	ldd	r19, Y+3	; 0x03
    34be:	22 33       	cpi	r18, 0x32	; 50
    34c0:	31 05       	cpc	r19, r1
    34c2:	34 f4       	brge	.+12     	; 0x34d0 <master_main_interface+0x7a>
    34c4:	8a 81       	ldd	r24, Y+2	; 0x02
    34c6:	9b 81       	ldd	r25, Y+3	; 0x03
    34c8:	80 33       	cpi	r24, 0x30	; 48
    34ca:	91 05       	cpc	r25, r1
    34cc:	61 f0       	breq	.+24     	; 0x34e6 <master_main_interface+0x90>
    34ce:	22 c0       	rjmp	.+68     	; 0x3514 <master_main_interface+0xbe>
    34d0:	2a 81       	ldd	r18, Y+2	; 0x02
    34d2:	3b 81       	ldd	r19, Y+3	; 0x03
    34d4:	22 33       	cpi	r18, 0x32	; 50
    34d6:	31 05       	cpc	r19, r1
    34d8:	b9 f0       	breq	.+46     	; 0x3508 <master_main_interface+0xb2>
    34da:	8a 81       	ldd	r24, Y+2	; 0x02
    34dc:	9b 81       	ldd	r25, Y+3	; 0x03
    34de:	83 33       	cpi	r24, 0x33	; 51
    34e0:	91 05       	cpc	r25, r1
    34e2:	a9 f0       	breq	.+42     	; 0x350e <master_main_interface+0xb8>
    34e4:	17 c0       	rjmp	.+46     	; 0x3514 <master_main_interface+0xbe>
		case '0':
			UART_vSendString((u8*)"\n\rLogging out of master user\n\r");
    34e6:	81 e1       	ldi	r24, 0x11	; 17
    34e8:	91 e0       	ldi	r25, 0x01	; 1
    34ea:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
			UART_vSendString((u8*)"App locked\n\r\n\r");
    34ee:	80 e3       	ldi	r24, 0x30	; 48
    34f0:	91 e0       	ldi	r25, 0x01	; 1
    34f2:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
		default:
			UART_vSendString((u8*)"\n\rWrong choice, please enter a correct option\n\r");
			break;
		}
	}
}
    34f6:	0f 90       	pop	r0
    34f8:	0f 90       	pop	r0
    34fa:	0f 90       	pop	r0
    34fc:	cf 91       	pop	r28
    34fe:	df 91       	pop	r29
    3500:	08 95       	ret
			UART_vSendString((u8*)"\n\rLogging out of master user\n\r");
			UART_vSendString((u8*)"App locked\n\r\n\r");
			return;
			break;
		case '1':
			master_add_user();
    3502:	0e 94 8f 1a 	call	0x351e	; 0x351e <master_add_user>
    3506:	b5 cf       	rjmp	.-150    	; 0x3472 <master_main_interface+0x1c>
			break;
		case '2':
			master_remove_user();
    3508:	0e 94 9a 1a 	call	0x3534	; 0x3534 <master_remove_user>
    350c:	b2 cf       	rjmp	.-156    	; 0x3472 <master_main_interface+0x1c>
			break;
		case '3':
			master_list_users();
    350e:	0e 94 a5 1a 	call	0x354a	; 0x354a <master_list_users>
    3512:	af cf       	rjmp	.-162    	; 0x3472 <master_main_interface+0x1c>
			break;
		default:
			UART_vSendString((u8*)"\n\rWrong choice, please enter a correct option\n\r");
    3514:	8f e3       	ldi	r24, 0x3F	; 63
    3516:	91 e0       	ldi	r25, 0x01	; 1
    3518:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
    351c:	aa cf       	rjmp	.-172    	; 0x3472 <master_main_interface+0x1c>

0000351e <master_add_user>:
			break;
		}
	}
}

static void master_add_user(){
    351e:	df 93       	push	r29
    3520:	cf 93       	push	r28
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
	UART_vSendString((u8*)"\n\rAdd new user\n\r");
    3526:	8f e6       	ldi	r24, 0x6F	; 111
    3528:	91 e0       	ldi	r25, 0x01	; 1
    352a:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
}
    352e:	cf 91       	pop	r28
    3530:	df 91       	pop	r29
    3532:	08 95       	ret

00003534 <master_remove_user>:

static void master_remove_user(){
    3534:	df 93       	push	r29
    3536:	cf 93       	push	r28
    3538:	cd b7       	in	r28, 0x3d	; 61
    353a:	de b7       	in	r29, 0x3e	; 62
	UART_vSendString((u8*)"\n\rRemove a user\n\r");
    353c:	80 e8       	ldi	r24, 0x80	; 128
    353e:	91 e0       	ldi	r25, 0x01	; 1
    3540:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
}
    3544:	cf 91       	pop	r28
    3546:	df 91       	pop	r29
    3548:	08 95       	ret

0000354a <master_list_users>:

static void master_list_users(){
    354a:	df 93       	push	r29
    354c:	cf 93       	push	r28
    354e:	cd b7       	in	r28, 0x3d	; 61
    3550:	de b7       	in	r29, 0x3e	; 62
	UART_vSendString((u8*)"\n\rList all users\n\r");
    3552:	82 e9       	ldi	r24, 0x92	; 146
    3554:	91 e0       	ldi	r25, 0x01	; 1
    3556:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
}
    355a:	cf 91       	pop	r28
    355c:	df 91       	pop	r29
    355e:	08 95       	ret

00003560 <app_vInit>:
		.OCR_90degree_Value = 188,
		.OCR_180degree_Value = 250
};


void app_vInit(void){
    3560:	df 93       	push	r29
    3562:	cf 93       	push	r28
    3564:	cd b7       	in	r28, 0x3d	; 61
    3566:	de b7       	in	r29, 0x3e	; 62
	/* Initialize hardware components */
	//LED_vInit(&RED_LED);
	//SERVO_vInit(&SERVO1);
	UART_vInit(&UART1);
    3568:	88 ea       	ldi	r24, 0xA8	; 168
    356a:	92 e0       	ldi	r25, 0x02	; 2
    356c:	0e 94 49 00 	call	0x92	; 0x92 <UART_vInit>
	UART_vEnable(&UART1);
    3570:	88 ea       	ldi	r24, 0xA8	; 168
    3572:	92 e0       	ldi	r25, 0x02	; 2
    3574:	0e 94 b7 01 	call	0x36e	; 0x36e <UART_vEnable>
	//EEPROM_vinit();
	Current_State = start_state;
    3578:	10 92 d4 02 	sts	0x02D4, r1

	/* Initialize variables */

}
    357c:	cf 91       	pop	r28
    357e:	df 91       	pop	r29
    3580:	08 95       	ret

00003582 <app_ReceiveInput>:

void app_ReceiveInput(void){
    3582:	df 93       	push	r29
    3584:	cf 93       	push	r28
    3586:	00 d0       	rcall	.+0      	; 0x3588 <app_ReceiveInput+0x6>
    3588:	cd b7       	in	r28, 0x3d	; 61
    358a:	de b7       	in	r29, 0x3e	; 62
    358c:	1f c0       	rjmp	.+62     	; 0x35cc <app_ReceiveInput+0x4a>
	while(temp_char != '\r'){
		temp_char = UART_u8ReceiveData();
    358e:	0e 94 05 02 	call	0x40a	; 0x40a <UART_u8ReceiveData>
    3592:	80 93 bf 02 	sts	0x02BF, r24
		UART_vSendData(temp_char);
    3596:	80 91 bf 02 	lds	r24, 0x02BF
    359a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <UART_vSendData>
		if(temp_char != '\r'){
    359e:	80 91 bf 02 	lds	r24, 0x02BF
    35a2:	8d 30       	cpi	r24, 0x0D	; 13
    35a4:	99 f0       	breq	.+38     	; 0x35cc <app_ReceiveInput+0x4a>
			if(array_max_size != char_counter){
    35a6:	80 91 be 02 	lds	r24, 0x02BE
    35aa:	84 31       	cpi	r24, 0x14	; 20
    35ac:	79 f0       	breq	.+30     	; 0x35cc <app_ReceiveInput+0x4a>
				input_temp_string[char_counter] = temp_char;
    35ae:	80 91 be 02 	lds	r24, 0x02BE
    35b2:	88 2f       	mov	r24, r24
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	20 91 bf 02 	lds	r18, 0x02BF
    35ba:	fc 01       	movw	r30, r24
    35bc:	e7 51       	subi	r30, 0x17	; 23
    35be:	fd 4f       	sbci	r31, 0xFD	; 253
    35c0:	20 83       	st	Z, r18
				char_counter++;
    35c2:	80 91 be 02 	lds	r24, 0x02BE
    35c6:	8f 5f       	subi	r24, 0xFF	; 255
    35c8:	80 93 be 02 	sts	0x02BE, r24
	/* Initialize variables */

}

void app_ReceiveInput(void){
	while(temp_char != '\r'){
    35cc:	80 91 bf 02 	lds	r24, 0x02BF
    35d0:	8d 30       	cpi	r24, 0x0D	; 13
    35d2:	e9 f6       	brne	.-70     	; 0x358e <app_ReceiveInput+0xc>
				input_temp_string[char_counter] = temp_char;
				char_counter++;
			}
		}
	}
	temp_char = 0;
    35d4:	10 92 bf 02 	sts	0x02BF, r1
	UART_vSendString((u8*)"\r\n");
    35d8:	85 ea       	ldi	r24, 0xA5	; 165
    35da:	91 e0       	ldi	r25, 0x01	; 1
    35dc:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
	switch(Current_State){
    35e0:	80 91 d4 02 	lds	r24, 0x02D4
    35e4:	28 2f       	mov	r18, r24
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	3a 83       	std	Y+2, r19	; 0x02
    35ea:	29 83       	std	Y+1, r18	; 0x01
    35ec:	89 81       	ldd	r24, Y+1	; 0x01
    35ee:	9a 81       	ldd	r25, Y+2	; 0x02
    35f0:	81 30       	cpi	r24, 0x01	; 1
    35f2:	91 05       	cpc	r25, r1
    35f4:	31 f0       	breq	.+12     	; 0x3602 <app_ReceiveInput+0x80>
    35f6:	29 81       	ldd	r18, Y+1	; 0x01
    35f8:	3a 81       	ldd	r19, Y+2	; 0x02
    35fa:	22 30       	cpi	r18, 0x02	; 2
    35fc:	31 05       	cpc	r19, r1
    35fe:	a1 f0       	breq	.+40     	; 0x3628 <app_ReceiveInput+0xa6>
    3600:	25 c0       	rjmp	.+74     	; 0x364c <app_ReceiveInput+0xca>
	case locked_user_input:
		/* Save entered username and jump to locked_psw_input state */
		app_copy_string(input_temp_string, input_username_string, char_counter);
    3602:	40 91 be 02 	lds	r20, 0x02BE
    3606:	89 ee       	ldi	r24, 0xE9	; 233
    3608:	92 e0       	ldi	r25, 0x02	; 2
    360a:	20 ec       	ldi	r18, 0xC0	; 192
    360c:	32 e0       	ldi	r19, 0x02	; 2
    360e:	b9 01       	movw	r22, r18
    3610:	0e 94 08 19 	call	0x3210	; 0x3210 <app_copy_string>
		app_clear_string(input_temp_string, char_counter);
    3614:	20 91 be 02 	lds	r18, 0x02BE
    3618:	89 ee       	ldi	r24, 0xE9	; 233
    361a:	92 e0       	ldi	r25, 0x02	; 2
    361c:	62 2f       	mov	r22, r18
    361e:	0e 94 45 19 	call	0x328a	; 0x328a <app_clear_string>
		char_counter = 0;
    3622:	10 92 be 02 	sts	0x02BE, r1
    3626:	12 c0       	rjmp	.+36     	; 0x364c <app_ReceiveInput+0xca>
	case locked_psw_input:
		/* Save entered password and call a function to check if username and password are correct
		 * if username and password correct, jump to unlocked_state
		 * if username and password incorrect, go back to locked_user_input state
		 */
		app_copy_string(input_temp_string, input_psw_string, char_counter);
    3628:	40 91 be 02 	lds	r20, 0x02BE
    362c:	89 ee       	ldi	r24, 0xE9	; 233
    362e:	92 e0       	ldi	r25, 0x02	; 2
    3630:	25 ed       	ldi	r18, 0xD5	; 213
    3632:	32 e0       	ldi	r19, 0x02	; 2
    3634:	b9 01       	movw	r22, r18
    3636:	0e 94 08 19 	call	0x3210	; 0x3210 <app_copy_string>
		app_clear_string(input_temp_string, char_counter);
    363a:	20 91 be 02 	lds	r18, 0x02BE
    363e:	89 ee       	ldi	r24, 0xE9	; 233
    3640:	92 e0       	ldi	r25, 0x02	; 2
    3642:	62 2f       	mov	r22, r18
    3644:	0e 94 45 19 	call	0x328a	; 0x328a <app_clear_string>
		char_counter = 0;
    3648:	10 92 be 02 	sts	0x02BE, r1
		// Function to handle the command
		break;
	default: /* Do Nothing */ break;
	}

}
    364c:	0f 90       	pop	r0
    364e:	0f 90       	pop	r0
    3650:	cf 91       	pop	r28
    3652:	df 91       	pop	r29
    3654:	08 95       	ret

00003656 <main>:

extern enu_app_states Current_State;
extern u8 input_username_string[20];
extern u8 input_psw_string[20];

int main(void){
    3656:	df 93       	push	r29
    3658:	cf 93       	push	r28
    365a:	00 d0       	rcall	.+0      	; 0x365c <main+0x6>
    365c:	00 d0       	rcall	.+0      	; 0x365e <main+0x8>
    365e:	0f 92       	push	r0
    3660:	cd b7       	in	r28, 0x3d	; 61
    3662:	de b7       	in	r29, 0x3e	; 62
	/* Initialization part */
	enu_psw_check_return psw_check_flag;
	app_vInit();
    3664:	0e 94 b0 1a 	call	0x3560	; 0x3560 <app_vInit>
	while(1){
		/* Main Program */
		switch(Current_State){
    3668:	80 91 d4 02 	lds	r24, 0x02D4
    366c:	28 2f       	mov	r18, r24
    366e:	30 e0       	ldi	r19, 0x00	; 0
    3670:	3d 83       	std	Y+5, r19	; 0x05
    3672:	2c 83       	std	Y+4, r18	; 0x04
    3674:	8c 81       	ldd	r24, Y+4	; 0x04
    3676:	9d 81       	ldd	r25, Y+5	; 0x05
    3678:	82 30       	cpi	r24, 0x02	; 2
    367a:	91 05       	cpc	r25, r1
    367c:	b9 f1       	breq	.+110    	; 0x36ec <main+0x96>
    367e:	2c 81       	ldd	r18, Y+4	; 0x04
    3680:	3d 81       	ldd	r19, Y+5	; 0x05
    3682:	23 30       	cpi	r18, 0x03	; 3
    3684:	31 05       	cpc	r19, r1
    3686:	54 f4       	brge	.+20     	; 0x369c <main+0x46>
    3688:	8c 81       	ldd	r24, Y+4	; 0x04
    368a:	9d 81       	ldd	r25, Y+5	; 0x05
    368c:	00 97       	sbiw	r24, 0x00	; 0
    368e:	c1 f0       	breq	.+48     	; 0x36c0 <main+0x6a>
    3690:	2c 81       	ldd	r18, Y+4	; 0x04
    3692:	3d 81       	ldd	r19, Y+5	; 0x05
    3694:	21 30       	cpi	r18, 0x01	; 1
    3696:	31 05       	cpc	r19, r1
    3698:	f9 f0       	breq	.+62     	; 0x36d8 <main+0x82>
    369a:	e6 cf       	rjmp	.-52     	; 0x3668 <main+0x12>
    369c:	8c 81       	ldd	r24, Y+4	; 0x04
    369e:	9d 81       	ldd	r25, Y+5	; 0x05
    36a0:	84 30       	cpi	r24, 0x04	; 4
    36a2:	91 05       	cpc	r25, r1
    36a4:	09 f4       	brne	.+2      	; 0x36a8 <main+0x52>
    36a6:	60 c0       	rjmp	.+192    	; 0x3768 <main+0x112>
    36a8:	2c 81       	ldd	r18, Y+4	; 0x04
    36aa:	3d 81       	ldd	r19, Y+5	; 0x05
    36ac:	24 30       	cpi	r18, 0x04	; 4
    36ae:	31 05       	cpc	r19, r1
    36b0:	3c f1       	brlt	.+78     	; 0x3700 <main+0xaa>
    36b2:	8c 81       	ldd	r24, Y+4	; 0x04
    36b4:	9d 81       	ldd	r25, Y+5	; 0x05
    36b6:	85 30       	cpi	r24, 0x05	; 5
    36b8:	91 05       	cpc	r25, r1
    36ba:	09 f4       	brne	.+2      	; 0x36be <main+0x68>
    36bc:	5a c0       	rjmp	.+180    	; 0x3772 <main+0x11c>
    36be:	d4 cf       	rjmp	.-88     	; 0x3668 <main+0x12>
		case start_state:
			UART_vSendString((u8*)"Welcome to Mobile Controlled System\n\r");
    36c0:	88 ea       	ldi	r24, 0xA8	; 168
    36c2:	91 e0       	ldi	r25, 0x01	; 1
    36c4:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
			UART_vSendString((u8*)"-----------------------------------\n\n\r");
    36c8:	8e ec       	ldi	r24, 0xCE	; 206
    36ca:	91 e0       	ldi	r25, 0x01	; 1
    36cc:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
			Current_State = locked_user_input;
    36d0:	81 e0       	ldi	r24, 0x01	; 1
    36d2:	80 93 d4 02 	sts	0x02D4, r24
    36d6:	c8 cf       	rjmp	.-112    	; 0x3668 <main+0x12>
			break;
		case locked_user_input:
			UART_vSendString((u8*)"Enter username: ");
    36d8:	85 ef       	ldi	r24, 0xF5	; 245
    36da:	91 e0       	ldi	r25, 0x01	; 1
    36dc:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
			app_ReceiveInput();
    36e0:	0e 94 c1 1a 	call	0x3582	; 0x3582 <app_ReceiveInput>
			Current_State = locked_psw_input;
    36e4:	82 e0       	ldi	r24, 0x02	; 2
    36e6:	80 93 d4 02 	sts	0x02D4, r24
    36ea:	be cf       	rjmp	.-132    	; 0x3668 <main+0x12>
			break;
		case locked_psw_input:
			UART_vSendString((u8*)"Enter password: ");
    36ec:	86 e0       	ldi	r24, 0x06	; 6
    36ee:	92 e0       	ldi	r25, 0x02	; 2
    36f0:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
			app_ReceiveInput();
    36f4:	0e 94 c1 1a 	call	0x3582	; 0x3582 <app_ReceiveInput>
			Current_State = locked_checking_user_psw;
    36f8:	83 e0       	ldi	r24, 0x03	; 3
    36fa:	80 93 d4 02 	sts	0x02D4, r24
    36fe:	b4 cf       	rjmp	.-152    	; 0x3668 <main+0x12>
			break;
		case locked_checking_user_psw:
			psw_check_flag = psw_Check_Credentials(input_username_string, input_psw_string);
    3700:	80 ec       	ldi	r24, 0xC0	; 192
    3702:	92 e0       	ldi	r25, 0x02	; 2
    3704:	25 ed       	ldi	r18, 0xD5	; 213
    3706:	32 e0       	ldi	r19, 0x02	; 2
    3708:	b9 01       	movw	r22, r18
    370a:	0e 94 6f 19 	call	0x32de	; 0x32de <psw_Check_Credentials>
    370e:	89 83       	std	Y+1, r24	; 0x01
			switch(psw_check_flag){
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	28 2f       	mov	r18, r24
    3714:	30 e0       	ldi	r19, 0x00	; 0
    3716:	3b 83       	std	Y+3, r19	; 0x03
    3718:	2a 83       	std	Y+2, r18	; 0x02
    371a:	8a 81       	ldd	r24, Y+2	; 0x02
    371c:	9b 81       	ldd	r25, Y+3	; 0x03
    371e:	81 30       	cpi	r24, 0x01	; 1
    3720:	91 05       	cpc	r25, r1
    3722:	91 f0       	breq	.+36     	; 0x3748 <main+0xf2>
    3724:	2a 81       	ldd	r18, Y+2	; 0x02
    3726:	3b 81       	ldd	r19, Y+3	; 0x03
    3728:	22 30       	cpi	r18, 0x02	; 2
    372a:	31 05       	cpc	r19, r1
    372c:	a9 f0       	breq	.+42     	; 0x3758 <main+0x102>
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	9b 81       	ldd	r25, Y+3	; 0x03
    3732:	00 97       	sbiw	r24, 0x00	; 0
    3734:	09 f0       	breq	.+2      	; 0x3738 <main+0xe2>
    3736:	98 cf       	rjmp	.-208    	; 0x3668 <main+0x12>
			case wrong_data:
				UART_vSendString((u8*)"Wrong data!\n\r");
    3738:	87 e1       	ldi	r24, 0x17	; 23
    373a:	92 e0       	ldi	r25, 0x02	; 2
    373c:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
				Current_State = locked_user_input;
    3740:	81 e0       	ldi	r24, 0x01	; 1
    3742:	80 93 d4 02 	sts	0x02D4, r24
    3746:	90 cf       	rjmp	.-224    	; 0x3668 <main+0x12>
				break;
			case correct_data:
				UART_vSendString((u8*)"Normal user activated!\n\r");
    3748:	85 e2       	ldi	r24, 0x25	; 37
    374a:	92 e0       	ldi	r25, 0x02	; 2
    374c:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
				Current_State = unlocked_normal_user;
    3750:	85 e0       	ldi	r24, 0x05	; 5
    3752:	80 93 d4 02 	sts	0x02D4, r24
    3756:	88 cf       	rjmp	.-240    	; 0x3668 <main+0x12>
				break;
			case master_data:
				UART_vSendString((u8*)"Master user activated!\n\r");
    3758:	8e e3       	ldi	r24, 0x3E	; 62
    375a:	92 e0       	ldi	r25, 0x02	; 2
    375c:	0e 94 22 02 	call	0x444	; 0x444 <UART_vSendString>
				Current_State = unlocked_master_user;
    3760:	84 e0       	ldi	r24, 0x04	; 4
    3762:	80 93 d4 02 	sts	0x02D4, r24
    3766:	80 cf       	rjmp	.-256    	; 0x3668 <main+0x12>
				break;
			default: /* Do Nothing */ break;
			}
			break;
		case unlocked_master_user:
			master_main_interface();
    3768:	0e 94 2b 1a 	call	0x3456	; 0x3456 <master_main_interface>
			Current_State = start_state;
    376c:	10 92 d4 02 	sts	0x02D4, r1
    3770:	7b cf       	rjmp	.-266    	; 0x3668 <main+0x12>
			break;
		case unlocked_normal_user:
			/* ToDo: Implement normal user */
			Current_State = start_state;
    3772:	10 92 d4 02 	sts	0x02D4, r1
    3776:	78 cf       	rjmp	.-272    	; 0x3668 <main+0x12>

00003778 <strcmp>:
    3778:	fb 01       	movw	r30, r22
    377a:	dc 01       	movw	r26, r24
    377c:	8d 91       	ld	r24, X+
    377e:	01 90       	ld	r0, Z+
    3780:	80 19       	sub	r24, r0
    3782:	01 10       	cpse	r0, r1
    3784:	d9 f3       	breq	.-10     	; 0x377c <strcmp+0x4>
    3786:	99 0b       	sbc	r25, r25
    3788:	08 95       	ret

0000378a <_exit>:
    378a:	f8 94       	cli

0000378c <__stop_program>:
    378c:	ff cf       	rjmp	.-2      	; 0x378c <__stop_program>
