
Mobile.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000042f4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  000042f4  00004388  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000065  00800084  00800084  000043ac  2**0
                  ALLOC
  3 .stab         000051c0  00000000  00000000  000043ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00004de5  00000000  00000000  0000956c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000e351  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000e491  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000e601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0001024a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00011135  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  00011ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  00012044  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  000122d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  00012a9f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 ef       	ldi	r30, 0xF4	; 244
      68:	f2 e4       	ldi	r31, 0x42	; 66
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a4 38       	cpi	r26, 0x84	; 132
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a4 e8       	ldi	r26, 0x84	; 132
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 3e       	cpi	r26, 0xE9	; 233
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <main>
      8a:	0c 94 78 21 	jmp	0x42f0	; 0x42f0 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 5d 21 	jmp	0x42ba	; 0x42ba <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 41 21 	jmp	0x4282	; 0x4282 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 5d 21 	jmp	0x42ba	; 0x42ba <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 4d 21 	jmp	0x429a	; 0x429a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 69 21 	jmp	0x42d2	; 0x42d2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 51 21 	jmp	0x42a2	; 0x42a2 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 6d 21 	jmp	0x42da	; 0x42da <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <UART_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "UART_interface.h"

void UART_vInit(const UART_tcfgInitialize *LOCAL_tcfgUART){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <UART_vInit+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9a 83       	std	Y+2, r25	; 0x02
     b52:	89 83       	std	Y+1, r24	; 0x01


	if(LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_5_BITS){
     b54:	e9 81       	ldd	r30, Y+1	; 0x01
     b56:	fa 81       	ldd	r31, Y+2	; 0x02
     b58:	80 81       	ld	r24, Z
     b5a:	88 23       	and	r24, r24
     b5c:	b1 f4       	brne	.+44     	; 0xb8a <UART_vInit+0x44>
		CLR_BIT(UCSRC_REG, UCSZ0_BIT);
     b5e:	a0 e4       	ldi	r26, 0x40	; 64
     b60:	b0 e0       	ldi	r27, 0x00	; 0
     b62:	e0 e4       	ldi	r30, 0x40	; 64
     b64:	f0 e0       	ldi	r31, 0x00	; 0
     b66:	80 81       	ld	r24, Z
     b68:	8d 7f       	andi	r24, 0xFD	; 253
     b6a:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSZ1_BIT);
     b6c:	a0 e4       	ldi	r26, 0x40	; 64
     b6e:	b0 e0       	ldi	r27, 0x00	; 0
     b70:	e0 e4       	ldi	r30, 0x40	; 64
     b72:	f0 e0       	ldi	r31, 0x00	; 0
     b74:	80 81       	ld	r24, Z
     b76:	8b 7f       	andi	r24, 0xFB	; 251
     b78:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     b7a:	aa e2       	ldi	r26, 0x2A	; 42
     b7c:	b0 e0       	ldi	r27, 0x00	; 0
     b7e:	ea e2       	ldi	r30, 0x2A	; 42
     b80:	f0 e0       	ldi	r31, 0x00	; 0
     b82:	80 81       	ld	r24, Z
     b84:	8b 7f       	andi	r24, 0xFB	; 251
     b86:	8c 93       	st	X, r24
     b88:	6b c0       	rjmp	.+214    	; 0xc60 <UART_vInit+0x11a>
	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_6_BITS)){
     b8a:	e9 81       	ldd	r30, Y+1	; 0x01
     b8c:	fa 81       	ldd	r31, Y+2	; 0x02
     b8e:	80 81       	ld	r24, Z
     b90:	81 30       	cpi	r24, 0x01	; 1
     b92:	b1 f4       	brne	.+44     	; 0xbc0 <UART_vInit+0x7a>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
     b94:	a0 e4       	ldi	r26, 0x40	; 64
     b96:	b0 e0       	ldi	r27, 0x00	; 0
     b98:	e0 e4       	ldi	r30, 0x40	; 64
     b9a:	f0 e0       	ldi	r31, 0x00	; 0
     b9c:	80 81       	ld	r24, Z
     b9e:	82 60       	ori	r24, 0x02	; 2
     ba0:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UCSZ1_BIT);
     ba2:	a0 e4       	ldi	r26, 0x40	; 64
     ba4:	b0 e0       	ldi	r27, 0x00	; 0
     ba6:	e0 e4       	ldi	r30, 0x40	; 64
     ba8:	f0 e0       	ldi	r31, 0x00	; 0
     baa:	80 81       	ld	r24, Z
     bac:	8b 7f       	andi	r24, 0xFB	; 251
     bae:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     bb0:	aa e2       	ldi	r26, 0x2A	; 42
     bb2:	b0 e0       	ldi	r27, 0x00	; 0
     bb4:	ea e2       	ldi	r30, 0x2A	; 42
     bb6:	f0 e0       	ldi	r31, 0x00	; 0
     bb8:	80 81       	ld	r24, Z
     bba:	8b 7f       	andi	r24, 0xFB	; 251
     bbc:	8c 93       	st	X, r24
     bbe:	50 c0       	rjmp	.+160    	; 0xc60 <UART_vInit+0x11a>

	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_7_BITS)){
     bc0:	e9 81       	ldd	r30, Y+1	; 0x01
     bc2:	fa 81       	ldd	r31, Y+2	; 0x02
     bc4:	80 81       	ld	r24, Z
     bc6:	82 30       	cpi	r24, 0x02	; 2
     bc8:	b1 f4       	brne	.+44     	; 0xbf6 <UART_vInit+0xb0>
		CLR_BIT(UCSRC_REG, UCSZ0_BIT);
     bca:	a0 e4       	ldi	r26, 0x40	; 64
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e0 e4       	ldi	r30, 0x40	; 64
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	8d 7f       	andi	r24, 0xFD	; 253
     bd6:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
     bd8:	a0 e4       	ldi	r26, 0x40	; 64
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e0 e4       	ldi	r30, 0x40	; 64
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	84 60       	ori	r24, 0x04	; 4
     be4:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     be6:	aa e2       	ldi	r26, 0x2A	; 42
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	ea e2       	ldi	r30, 0x2A	; 42
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8b 7f       	andi	r24, 0xFB	; 251
     bf2:	8c 93       	st	X, r24
     bf4:	35 c0       	rjmp	.+106    	; 0xc60 <UART_vInit+0x11a>

	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_8_BITS)){
     bf6:	e9 81       	ldd	r30, Y+1	; 0x01
     bf8:	fa 81       	ldd	r31, Y+2	; 0x02
     bfa:	80 81       	ld	r24, Z
     bfc:	83 30       	cpi	r24, 0x03	; 3
     bfe:	b1 f4       	brne	.+44     	; 0xc2c <UART_vInit+0xe6>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
     c00:	a0 e4       	ldi	r26, 0x40	; 64
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	e0 e4       	ldi	r30, 0x40	; 64
     c06:	f0 e0       	ldi	r31, 0x00	; 0
     c08:	80 81       	ld	r24, Z
     c0a:	82 60       	ori	r24, 0x02	; 2
     c0c:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
     c0e:	a0 e4       	ldi	r26, 0x40	; 64
     c10:	b0 e0       	ldi	r27, 0x00	; 0
     c12:	e0 e4       	ldi	r30, 0x40	; 64
     c14:	f0 e0       	ldi	r31, 0x00	; 0
     c16:	80 81       	ld	r24, Z
     c18:	84 60       	ori	r24, 0x04	; 4
     c1a:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UCSZ2_BIT);
     c1c:	aa e2       	ldi	r26, 0x2A	; 42
     c1e:	b0 e0       	ldi	r27, 0x00	; 0
     c20:	ea e2       	ldi	r30, 0x2A	; 42
     c22:	f0 e0       	ldi	r31, 0x00	; 0
     c24:	80 81       	ld	r24, Z
     c26:	8b 7f       	andi	r24, 0xFB	; 251
     c28:	8c 93       	st	X, r24
     c2a:	1a c0       	rjmp	.+52     	; 0xc60 <UART_vInit+0x11a>
	}
	else if((LOCAL_tcfgUART->GLOBAL_tcfgCharSize == CHAR_9_BITS)){
     c2c:	e9 81       	ldd	r30, Y+1	; 0x01
     c2e:	fa 81       	ldd	r31, Y+2	; 0x02
     c30:	80 81       	ld	r24, Z
     c32:	84 30       	cpi	r24, 0x04	; 4
     c34:	a9 f4       	brne	.+42     	; 0xc60 <UART_vInit+0x11a>
		SET_BIT(UCSRC_REG, UCSZ0_BIT);
     c36:	a0 e4       	ldi	r26, 0x40	; 64
     c38:	b0 e0       	ldi	r27, 0x00	; 0
     c3a:	e0 e4       	ldi	r30, 0x40	; 64
     c3c:	f0 e0       	ldi	r31, 0x00	; 0
     c3e:	80 81       	ld	r24, Z
     c40:	82 60       	ori	r24, 0x02	; 2
     c42:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UCSZ1_BIT);
     c44:	a0 e4       	ldi	r26, 0x40	; 64
     c46:	b0 e0       	ldi	r27, 0x00	; 0
     c48:	e0 e4       	ldi	r30, 0x40	; 64
     c4a:	f0 e0       	ldi	r31, 0x00	; 0
     c4c:	80 81       	ld	r24, Z
     c4e:	84 60       	ori	r24, 0x04	; 4
     c50:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, UCSZ2_BIT);
     c52:	aa e2       	ldi	r26, 0x2A	; 42
     c54:	b0 e0       	ldi	r27, 0x00	; 0
     c56:	ea e2       	ldi	r30, 0x2A	; 42
     c58:	f0 e0       	ldi	r31, 0x00	; 0
     c5a:	80 81       	ld	r24, Z
     c5c:	84 60       	ori	r24, 0x04	; 4
     c5e:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_DISABLED){
     c60:	e9 81       	ldd	r30, Y+1	; 0x01
     c62:	fa 81       	ldd	r31, Y+2	; 0x02
     c64:	81 81       	ldd	r24, Z+1	; 0x01
     c66:	88 23       	and	r24, r24
     c68:	79 f4       	brne	.+30     	; 0xc88 <UART_vInit+0x142>
		CLR_BIT(UCSRC_REG, UPM0_BIT);
     c6a:	a0 e4       	ldi	r26, 0x40	; 64
     c6c:	b0 e0       	ldi	r27, 0x00	; 0
     c6e:	e0 e4       	ldi	r30, 0x40	; 64
     c70:	f0 e0       	ldi	r31, 0x00	; 0
     c72:	80 81       	ld	r24, Z
     c74:	8f 7e       	andi	r24, 0xEF	; 239
     c76:	8c 93       	st	X, r24
		CLR_BIT(UCSRC_REG, UPM1_BIT);
     c78:	a0 e4       	ldi	r26, 0x40	; 64
     c7a:	b0 e0       	ldi	r27, 0x00	; 0
     c7c:	e0 e4       	ldi	r30, 0x40	; 64
     c7e:	f0 e0       	ldi	r31, 0x00	; 0
     c80:	80 81       	ld	r24, Z
     c82:	8f 7d       	andi	r24, 0xDF	; 223
     c84:	8c 93       	st	X, r24
     c86:	27 c0       	rjmp	.+78     	; 0xcd6 <UART_vInit+0x190>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_EVEN){
     c88:	e9 81       	ldd	r30, Y+1	; 0x01
     c8a:	fa 81       	ldd	r31, Y+2	; 0x02
     c8c:	81 81       	ldd	r24, Z+1	; 0x01
     c8e:	81 30       	cpi	r24, 0x01	; 1
     c90:	79 f4       	brne	.+30     	; 0xcb0 <UART_vInit+0x16a>
		CLR_BIT(UCSRC_REG, UPM0_BIT);
     c92:	a0 e4       	ldi	r26, 0x40	; 64
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e0 e4       	ldi	r30, 0x40	; 64
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	8f 7e       	andi	r24, 0xEF	; 239
     c9e:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UPM1_BIT);
     ca0:	a0 e4       	ldi	r26, 0x40	; 64
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e0 e4       	ldi	r30, 0x40	; 64
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	80 62       	ori	r24, 0x20	; 32
     cac:	8c 93       	st	X, r24
     cae:	13 c0       	rjmp	.+38     	; 0xcd6 <UART_vInit+0x190>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgParityState == PARITY_ODD){
     cb0:	e9 81       	ldd	r30, Y+1	; 0x01
     cb2:	fa 81       	ldd	r31, Y+2	; 0x02
     cb4:	81 81       	ldd	r24, Z+1	; 0x01
     cb6:	82 30       	cpi	r24, 0x02	; 2
     cb8:	71 f4       	brne	.+28     	; 0xcd6 <UART_vInit+0x190>
		SET_BIT(UCSRC_REG, UPM0_BIT);
     cba:	a0 e4       	ldi	r26, 0x40	; 64
     cbc:	b0 e0       	ldi	r27, 0x00	; 0
     cbe:	e0 e4       	ldi	r30, 0x40	; 64
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	80 81       	ld	r24, Z
     cc4:	80 61       	ori	r24, 0x10	; 16
     cc6:	8c 93       	st	X, r24
		SET_BIT(UCSRC_REG, UPM1_BIT);
     cc8:	a0 e4       	ldi	r26, 0x40	; 64
     cca:	b0 e0       	ldi	r27, 0x00	; 0
     ccc:	e0 e4       	ldi	r30, 0x40	; 64
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	80 81       	ld	r24, Z
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgStopBits == STOP_BITS_1){
     cd6:	e9 81       	ldd	r30, Y+1	; 0x01
     cd8:	fa 81       	ldd	r31, Y+2	; 0x02
     cda:	82 81       	ldd	r24, Z+2	; 0x02
     cdc:	88 23       	and	r24, r24
     cde:	41 f4       	brne	.+16     	; 0xcf0 <UART_vInit+0x1aa>
		CLR_BIT(UCSRC_REG, USBS_BIT);
     ce0:	a0 e4       	ldi	r26, 0x40	; 64
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e0 e4       	ldi	r30, 0x40	; 64
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	87 7f       	andi	r24, 0xF7	; 247
     cec:	8c 93       	st	X, r24
     cee:	0c c0       	rjmp	.+24     	; 0xd08 <UART_vInit+0x1c2>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgStopBits == STOP_BITS_2){
     cf0:	e9 81       	ldd	r30, Y+1	; 0x01
     cf2:	fa 81       	ldd	r31, Y+2	; 0x02
     cf4:	82 81       	ldd	r24, Z+2	; 0x02
     cf6:	81 30       	cpi	r24, 0x01	; 1
     cf8:	39 f4       	brne	.+14     	; 0xd08 <UART_vInit+0x1c2>
		SET_BIT(UCSRC_REG, USBS_BIT);
     cfa:	a0 e4       	ldi	r26, 0x40	; 64
     cfc:	b0 e0       	ldi	r27, 0x00	; 0
     cfe:	e0 e4       	ldi	r30, 0x40	; 64
     d00:	f0 e0       	ldi	r31, 0x00	; 0
     d02:	80 81       	ld	r24, Z
     d04:	88 60       	ori	r24, 0x08	; 8
     d06:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartInterrupt == UART_INTERRUPT_DISABLED){
     d08:	e9 81       	ldd	r30, Y+1	; 0x01
     d0a:	fa 81       	ldd	r31, Y+2	; 0x02
     d0c:	83 81       	ldd	r24, Z+3	; 0x03
     d0e:	88 23       	and	r24, r24
     d10:	b1 f4       	brne	.+44     	; 0xd3e <UART_vInit+0x1f8>
		CLR_BIT(UCSRB_REG, RXCIE_BIT);
     d12:	aa e2       	ldi	r26, 0x2A	; 42
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	ea e2       	ldi	r30, 0x2A	; 42
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	8f 77       	andi	r24, 0x7F	; 127
     d1e:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, UDRIE_BIT);
     d20:	aa e2       	ldi	r26, 0x2A	; 42
     d22:	b0 e0       	ldi	r27, 0x00	; 0
     d24:	ea e2       	ldi	r30, 0x2A	; 42
     d26:	f0 e0       	ldi	r31, 0x00	; 0
     d28:	80 81       	ld	r24, Z
     d2a:	8f 7d       	andi	r24, 0xDF	; 223
     d2c:	8c 93       	st	X, r24
		CLR_BIT(UCSRB_REG, TXCIE_BIT);
     d2e:	aa e2       	ldi	r26, 0x2A	; 42
     d30:	b0 e0       	ldi	r27, 0x00	; 0
     d32:	ea e2       	ldi	r30, 0x2A	; 42
     d34:	f0 e0       	ldi	r31, 0x00	; 0
     d36:	80 81       	ld	r24, Z
     d38:	8f 7b       	andi	r24, 0xBF	; 191
     d3a:	8c 93       	st	X, r24
     d3c:	1a c0       	rjmp	.+52     	; 0xd72 <UART_vInit+0x22c>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartInterrupt == UART_INTERRUPT_ENABLED){
     d3e:	e9 81       	ldd	r30, Y+1	; 0x01
     d40:	fa 81       	ldd	r31, Y+2	; 0x02
     d42:	83 81       	ldd	r24, Z+3	; 0x03
     d44:	81 30       	cpi	r24, 0x01	; 1
     d46:	a9 f4       	brne	.+42     	; 0xd72 <UART_vInit+0x22c>
		SET_BIT(UCSRB_REG, RXCIE_BIT);
     d48:	aa e2       	ldi	r26, 0x2A	; 42
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	ea e2       	ldi	r30, 0x2A	; 42
     d4e:	f0 e0       	ldi	r31, 0x00	; 0
     d50:	80 81       	ld	r24, Z
     d52:	80 68       	ori	r24, 0x80	; 128
     d54:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, UDRIE_BIT);
     d56:	aa e2       	ldi	r26, 0x2A	; 42
     d58:	b0 e0       	ldi	r27, 0x00	; 0
     d5a:	ea e2       	ldi	r30, 0x2A	; 42
     d5c:	f0 e0       	ldi	r31, 0x00	; 0
     d5e:	80 81       	ld	r24, Z
     d60:	80 62       	ori	r24, 0x20	; 32
     d62:	8c 93       	st	X, r24
		SET_BIT(UCSRB_REG, TXCIE_BIT);
     d64:	aa e2       	ldi	r26, 0x2A	; 42
     d66:	b0 e0       	ldi	r27, 0x00	; 0
     d68:	ea e2       	ldi	r30, 0x2A	; 42
     d6a:	f0 e0       	ldi	r31, 0x00	; 0
     d6c:	80 81       	ld	r24, Z
     d6e:	80 64       	ori	r24, 0x40	; 64
     d70:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartClkMode == UART_ASYNCHRONOUS){
     d72:	e9 81       	ldd	r30, Y+1	; 0x01
     d74:	fa 81       	ldd	r31, Y+2	; 0x02
     d76:	87 81       	ldd	r24, Z+7	; 0x07
     d78:	81 30       	cpi	r24, 0x01	; 1
     d7a:	41 f4       	brne	.+16     	; 0xd8c <UART_vInit+0x246>
		CLR_BIT(UCSRC_REG, UMSEL_BIT);
     d7c:	a0 e4       	ldi	r26, 0x40	; 64
     d7e:	b0 e0       	ldi	r27, 0x00	; 0
     d80:	e0 e4       	ldi	r30, 0x40	; 64
     d82:	f0 e0       	ldi	r31, 0x00	; 0
     d84:	80 81       	ld	r24, Z
     d86:	8f 7b       	andi	r24, 0xBF	; 191
     d88:	8c 93       	st	X, r24
     d8a:	0c c0       	rjmp	.+24     	; 0xda4 <UART_vInit+0x25e>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartClkMode == UART_SYNCHRONOUS){
     d8c:	e9 81       	ldd	r30, Y+1	; 0x01
     d8e:	fa 81       	ldd	r31, Y+2	; 0x02
     d90:	87 81       	ldd	r24, Z+7	; 0x07
     d92:	88 23       	and	r24, r24
     d94:	39 f4       	brne	.+14     	; 0xda4 <UART_vInit+0x25e>
		SET_BIT(UCSRC_REG, UMSEL_BIT);
     d96:	a0 e4       	ldi	r26, 0x40	; 64
     d98:	b0 e0       	ldi	r27, 0x00	; 0
     d9a:	e0 e4       	ldi	r30, 0x40	; 64
     d9c:	f0 e0       	ldi	r31, 0x00	; 0
     d9e:	80 81       	ld	r24, Z
     da0:	80 64       	ori	r24, 0x40	; 64
     da2:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }

	if(LOCAL_tcfgUART->GLOBAL_tcfgUartCommMode == UART_2X_SPEED){
     da4:	e9 81       	ldd	r30, Y+1	; 0x01
     da6:	fa 81       	ldd	r31, Y+2	; 0x02
     da8:	80 85       	ldd	r24, Z+8	; 0x08
     daa:	81 30       	cpi	r24, 0x01	; 1
     dac:	c1 f4       	brne	.+48     	; 0xdde <UART_vInit+0x298>
		SET_BIT(UCSRA_REG, U2X_BIT);
     dae:	ab e2       	ldi	r26, 0x2B	; 43
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	eb e2       	ldi	r30, 0x2B	; 43
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	82 60       	ori	r24, 0x02	; 2
     dba:	8c 93       	st	X, r24
		UBRRL_REG = LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate2X;
     dbc:	a9 e2       	ldi	r26, 0x29	; 41
     dbe:	b0 e0       	ldi	r27, 0x00	; 0
     dc0:	e9 81       	ldd	r30, Y+1	; 0x01
     dc2:	fa 81       	ldd	r31, Y+2	; 0x02
     dc4:	84 81       	ldd	r24, Z+4	; 0x04
     dc6:	95 81       	ldd	r25, Z+5	; 0x05
     dc8:	8c 93       	st	X, r24
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate2X)>>8);
     dca:	a0 e4       	ldi	r26, 0x40	; 64
     dcc:	b0 e0       	ldi	r27, 0x00	; 0
     dce:	e9 81       	ldd	r30, Y+1	; 0x01
     dd0:	fa 81       	ldd	r31, Y+2	; 0x02
     dd2:	84 81       	ldd	r24, Z+4	; 0x04
     dd4:	95 81       	ldd	r25, Z+5	; 0x05
     dd6:	89 2f       	mov	r24, r25
     dd8:	99 27       	eor	r25, r25
     dda:	8c 93       	st	X, r24
     ddc:	1d c0       	rjmp	.+58     	; 0xe18 <UART_vInit+0x2d2>
	}
	else if(LOCAL_tcfgUART->GLOBAL_tcfgUartCommMode == UART_1X_SPEED){
     dde:	e9 81       	ldd	r30, Y+1	; 0x01
     de0:	fa 81       	ldd	r31, Y+2	; 0x02
     de2:	80 85       	ldd	r24, Z+8	; 0x08
     de4:	88 23       	and	r24, r24
     de6:	c1 f4       	brne	.+48     	; 0xe18 <UART_vInit+0x2d2>
		CLR_BIT(UCSRA_REG, U2X_BIT);
     de8:	ab e2       	ldi	r26, 0x2B	; 43
     dea:	b0 e0       	ldi	r27, 0x00	; 0
     dec:	eb e2       	ldi	r30, 0x2B	; 43
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8d 7f       	andi	r24, 0xFD	; 253
     df4:	8c 93       	st	X, r24
		UBRRL_REG = LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X;
     df6:	a9 e2       	ldi	r26, 0x29	; 41
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	e9 81       	ldd	r30, Y+1	; 0x01
     dfc:	fa 81       	ldd	r31, Y+2	; 0x02
     dfe:	86 81       	ldd	r24, Z+6	; 0x06
     e00:	8c 93       	st	X, r24
		UBRRH_REG = ((LOCAL_tcfgUART->GLOBAL_tcfgUartBaudRate1X)>>8);
     e02:	a0 e4       	ldi	r26, 0x40	; 64
     e04:	b0 e0       	ldi	r27, 0x00	; 0
     e06:	e9 81       	ldd	r30, Y+1	; 0x01
     e08:	fa 81       	ldd	r31, Y+2	; 0x02
     e0a:	86 81       	ldd	r24, Z+6	; 0x06
     e0c:	88 2f       	mov	r24, r24
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	89 2f       	mov	r24, r25
     e12:	99 0f       	add	r25, r25
     e14:	99 0b       	sbc	r25, r25
     e16:	8c 93       	st	X, r24
	}
	else { /* Do Nothing */ }
}
     e18:	0f 90       	pop	r0
     e1a:	0f 90       	pop	r0
     e1c:	cf 91       	pop	r28
     e1e:	df 91       	pop	r29
     e20:	08 95       	ret

00000e22 <UART_vEnable>:

void UART_vEnable(const UART_tcfgInitialize *LOCAL_tcfgUART){
     e22:	df 93       	push	r29
     e24:	cf 93       	push	r28
     e26:	00 d0       	rcall	.+0      	; 0xe28 <UART_vEnable+0x6>
     e28:	cd b7       	in	r28, 0x3d	; 61
     e2a:	de b7       	in	r29, 0x3e	; 62
     e2c:	9a 83       	std	Y+2, r25	; 0x02
     e2e:	89 83       	std	Y+1, r24	; 0x01
	SET_BIT(UCSRB_REG, RXEN_BIT);
     e30:	aa e2       	ldi	r26, 0x2A	; 42
     e32:	b0 e0       	ldi	r27, 0x00	; 0
     e34:	ea e2       	ldi	r30, 0x2A	; 42
     e36:	f0 e0       	ldi	r31, 0x00	; 0
     e38:	80 81       	ld	r24, Z
     e3a:	80 61       	ori	r24, 0x10	; 16
     e3c:	8c 93       	st	X, r24
	SET_BIT(UCSRB_REG, TXEN_BIT);
     e3e:	aa e2       	ldi	r26, 0x2A	; 42
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	ea e2       	ldi	r30, 0x2A	; 42
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	88 60       	ori	r24, 0x08	; 8
     e4a:	8c 93       	st	X, r24
}
     e4c:	0f 90       	pop	r0
     e4e:	0f 90       	pop	r0
     e50:	cf 91       	pop	r28
     e52:	df 91       	pop	r29
     e54:	08 95       	ret

00000e56 <UART_vDisable>:

void UART_vDisable(const UART_tcfgInitialize *LOCAL_tcfgUART){
     e56:	df 93       	push	r29
     e58:	cf 93       	push	r28
     e5a:	00 d0       	rcall	.+0      	; 0xe5c <UART_vDisable+0x6>
     e5c:	cd b7       	in	r28, 0x3d	; 61
     e5e:	de b7       	in	r29, 0x3e	; 62
     e60:	9a 83       	std	Y+2, r25	; 0x02
     e62:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRB_REG, RXEN_BIT);
     e64:	aa e2       	ldi	r26, 0x2A	; 42
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	ea e2       	ldi	r30, 0x2A	; 42
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	8f 7e       	andi	r24, 0xEF	; 239
     e70:	8c 93       	st	X, r24
	CLR_BIT(UCSRB_REG, TXEN_BIT);
     e72:	aa e2       	ldi	r26, 0x2A	; 42
     e74:	b0 e0       	ldi	r27, 0x00	; 0
     e76:	ea e2       	ldi	r30, 0x2A	; 42
     e78:	f0 e0       	ldi	r31, 0x00	; 0
     e7a:	80 81       	ld	r24, Z
     e7c:	87 7f       	andi	r24, 0xF7	; 247
     e7e:	8c 93       	st	X, r24
}
     e80:	0f 90       	pop	r0
     e82:	0f 90       	pop	r0
     e84:	cf 91       	pop	r28
     e86:	df 91       	pop	r29
     e88:	08 95       	ret

00000e8a <UART_vSendData>:

void UART_vSendData(u8 LOCAL_u8Data){
     e8a:	df 93       	push	r29
     e8c:	cf 93       	push	r28
     e8e:	0f 92       	push	r0
     e90:	cd b7       	in	r28, 0x3d	; 61
     e92:	de b7       	in	r29, 0x3e	; 62
     e94:	89 83       	std	Y+1, r24	; 0x01
	while( GET_BIT(UCSRA_REG, UDRE_BIT) != 1 );
     e96:	eb e2       	ldi	r30, 0x2B	; 43
     e98:	f0 e0       	ldi	r31, 0x00	; 0
     e9a:	80 81       	ld	r24, Z
     e9c:	82 95       	swap	r24
     e9e:	86 95       	lsr	r24
     ea0:	87 70       	andi	r24, 0x07	; 7
     ea2:	88 2f       	mov	r24, r24
     ea4:	90 e0       	ldi	r25, 0x00	; 0
     ea6:	81 70       	andi	r24, 0x01	; 1
     ea8:	90 70       	andi	r25, 0x00	; 0
     eaa:	00 97       	sbiw	r24, 0x00	; 0
     eac:	a1 f3       	breq	.-24     	; 0xe96 <UART_vSendData+0xc>
	UDR_REG = LOCAL_u8Data;
     eae:	ec e2       	ldi	r30, 0x2C	; 44
     eb0:	f0 e0       	ldi	r31, 0x00	; 0
     eb2:	89 81       	ldd	r24, Y+1	; 0x01
     eb4:	80 83       	st	Z, r24
}
     eb6:	0f 90       	pop	r0
     eb8:	cf 91       	pop	r28
     eba:	df 91       	pop	r29
     ebc:	08 95       	ret

00000ebe <UART_u8ReceiveData>:

u8 UART_u8ReceiveData(void){
     ebe:	df 93       	push	r29
     ec0:	cf 93       	push	r28
     ec2:	0f 92       	push	r0
     ec4:	cd b7       	in	r28, 0x3d	; 61
     ec6:	de b7       	in	r29, 0x3e	; 62
	u8 local_u8Data;
	while( GET_BIT(UCSRA_REG, RXC_BIT) != 1 );
     ec8:	eb e2       	ldi	r30, 0x2B	; 43
     eca:	f0 e0       	ldi	r31, 0x00	; 0
     ecc:	80 81       	ld	r24, Z
     ece:	88 1f       	adc	r24, r24
     ed0:	88 27       	eor	r24, r24
     ed2:	88 1f       	adc	r24, r24
     ed4:	81 30       	cpi	r24, 0x01	; 1
     ed6:	c1 f7       	brne	.-16     	; 0xec8 <UART_u8ReceiveData+0xa>
	local_u8Data = UDR_REG;
     ed8:	ec e2       	ldi	r30, 0x2C	; 44
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	89 83       	std	Y+1, r24	; 0x01
	CLR_BIT(UCSRA_REG, RXC_BIT);
     ee0:	ab e2       	ldi	r26, 0x2B	; 43
     ee2:	b0 e0       	ldi	r27, 0x00	; 0
     ee4:	eb e2       	ldi	r30, 0x2B	; 43
     ee6:	f0 e0       	ldi	r31, 0x00	; 0
     ee8:	80 81       	ld	r24, Z
     eea:	8f 77       	andi	r24, 0x7F	; 127
     eec:	8c 93       	st	X, r24
	return local_u8Data;
     eee:	89 81       	ldd	r24, Y+1	; 0x01
}
     ef0:	0f 90       	pop	r0
     ef2:	cf 91       	pop	r28
     ef4:	df 91       	pop	r29
     ef6:	08 95       	ret

00000ef8 <UART_vSendString>:

void UART_vSendString(u8 *Copy_u8Str){
     ef8:	df 93       	push	r29
     efa:	cf 93       	push	r28
     efc:	00 d0       	rcall	.+0      	; 0xefe <UART_vSendString+0x6>
     efe:	cd b7       	in	r28, 0x3d	; 61
     f00:	de b7       	in	r29, 0x3e	; 62
     f02:	9a 83       	std	Y+2, r25	; 0x02
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	0b c0       	rjmp	.+22     	; 0xf1e <UART_vSendString+0x26>
	while(*Copy_u8Str){
		UART_vSendData(*(Copy_u8Str++));
     f08:	e9 81       	ldd	r30, Y+1	; 0x01
     f0a:	fa 81       	ldd	r31, Y+2	; 0x02
     f0c:	20 81       	ld	r18, Z
     f0e:	89 81       	ldd	r24, Y+1	; 0x01
     f10:	9a 81       	ldd	r25, Y+2	; 0x02
     f12:	01 96       	adiw	r24, 0x01	; 1
     f14:	9a 83       	std	Y+2, r25	; 0x02
     f16:	89 83       	std	Y+1, r24	; 0x01
     f18:	82 2f       	mov	r24, r18
     f1a:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_vSendData>
	CLR_BIT(UCSRA_REG, RXC_BIT);
	return local_u8Data;
}

void UART_vSendString(u8 *Copy_u8Str){
	while(*Copy_u8Str){
     f1e:	e9 81       	ldd	r30, Y+1	; 0x01
     f20:	fa 81       	ldd	r31, Y+2	; 0x02
     f22:	80 81       	ld	r24, Z
     f24:	88 23       	and	r24, r24
     f26:	81 f7       	brne	.-32     	; 0xf08 <UART_vSendString+0x10>
		UART_vSendData(*(Copy_u8Str++));
	}
}
     f28:	0f 90       	pop	r0
     f2a:	0f 90       	pop	r0
     f2c:	cf 91       	pop	r28
     f2e:	df 91       	pop	r29
     f30:	08 95       	ret

00000f32 <TWI_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "TWI_interface.h"

void TWI_vInit(){
     f32:	df 93       	push	r29
     f34:	cf 93       	push	r28
     f36:	cd b7       	in	r28, 0x3d	; 61
     f38:	de b7       	in	r29, 0x3e	; 62
	DIO_vPinInit(PORTC, PIN0, INPUT, LOW);
     f3a:	82 e0       	ldi	r24, 0x02	; 2
     f3c:	60 e0       	ldi	r22, 0x00	; 0
     f3e:	40 e0       	ldi	r20, 0x00	; 0
     f40:	20 e0       	ldi	r18, 0x00	; 0
     f42:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_vPinInit>
	DIO_vPinInit(PORTC, PIN1, INPUT, LOW);
     f46:	82 e0       	ldi	r24, 0x02	; 2
     f48:	61 e0       	ldi	r22, 0x01	; 1
     f4a:	40 e0       	ldi	r20, 0x00	; 0
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_vPinInit>
	// TWBR Value
	TWBR_REG = ((F_CPU/SCL_CLOCK)-16)/2; // 8Mhz oscillator and 100Khz bus freq.
     f52:	e0 e2       	ldi	r30, 0x20	; 32
     f54:	f0 e0       	ldi	r31, 0x00	; 0
     f56:	80 e2       	ldi	r24, 0x20	; 32
     f58:	80 83       	st	Z, r24
	// Prescale value
	TWSR_REG = 0x00; // Set Prescaler to 1
     f5a:	e1 e2       	ldi	r30, 0x21	; 33
     f5c:	f0 e0       	ldi	r31, 0x00	; 0
     f5e:	10 82       	st	Z, r1
	// Set address (TWAR = 0x02)
	TWAR_REG = DEVICE_ADDR;
     f60:	e2 e2       	ldi	r30, 0x22	; 34
     f62:	f0 e0       	ldi	r31, 0x00	; 0
     f64:	80 e5       	ldi	r24, 0x50	; 80
     f66:	80 83       	st	Z, r24
	// Enable TWI
	TWCR_REG = (1<<TWEN);
     f68:	e6 e5       	ldi	r30, 0x56	; 86
     f6a:	f0 e0       	ldi	r31, 0x00	; 0
     f6c:	84 e0       	ldi	r24, 0x04	; 4
     f6e:	80 83       	st	Z, r24
}
     f70:	cf 91       	pop	r28
     f72:	df 91       	pop	r29
     f74:	08 95       	ret

00000f76 <TWI_vStart>:

void TWI_vStart(){
     f76:	df 93       	push	r29
     f78:	cf 93       	push	r28
     f7a:	cd b7       	in	r28, 0x3d	; 61
     f7c:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWINT);
	// Send Start Condition
	TWCR_REG |= (1<<TWSTA);
	// Enable TWI
	TWCR_REG |= (1<<TWEN);*/
	TWCR_REG = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
     f7e:	e6 e5       	ldi	r30, 0x56	; 86
     f80:	f0 e0       	ldi	r31, 0x00	; 0
     f82:	84 ea       	ldi	r24, 0xA4	; 164
     f84:	80 83       	st	Z, r24
	// Polling until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
     f86:	e6 e5       	ldi	r30, 0x56	; 86
     f88:	f0 e0       	ldi	r31, 0x00	; 0
     f8a:	80 81       	ld	r24, Z
     f8c:	88 23       	and	r24, r24
     f8e:	dc f7       	brge	.-10     	; 0xf86 <TWI_vStart+0x10>
}
     f90:	cf 91       	pop	r28
     f92:	df 91       	pop	r29
     f94:	08 95       	ret

00000f96 <TWI_vStop>:

void TWI_vStop(){
     f96:	df 93       	push	r29
     f98:	cf 93       	push	r28
     f9a:	cd b7       	in	r28, 0x3d	; 61
     f9c:	de b7       	in	r29, 0x3e	; 62
	TWCR_REG = (1<<TWINT);
	// Send stop condition
	TWCR_REG |= (1<<TWSTO);
	// Enable TWI
	TWCR_REG |= (1<<TWEN);*/
	TWCR_REG = (1<<TWINT) | (1<<TWSTO) | (1<<TWEN);
     f9e:	e6 e5       	ldi	r30, 0x56	; 86
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	84 e9       	ldi	r24, 0x94	; 148
     fa4:	80 83       	st	Z, r24
}
     fa6:	cf 91       	pop	r28
     fa8:	df 91       	pop	r29
     faa:	08 95       	ret

00000fac <TWI_vWriteData>:

void TWI_vWriteData(u8 Copy_u8Data){
     fac:	df 93       	push	r29
     fae:	cf 93       	push	r28
     fb0:	0f 92       	push	r0
     fb2:	cd b7       	in	r28, 0x3d	; 61
     fb4:	de b7       	in	r29, 0x3e	; 62
     fb6:	89 83       	std	Y+1, r24	; 0x01
	// Write data on TWI DR
	TWDR_REG = Copy_u8Data;
     fb8:	e3 e2       	ldi	r30, 0x23	; 35
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	89 81       	ldd	r24, Y+1	; 0x01
     fbe:	80 83       	st	Z, r24
	TWCR_REG = (1<<TWINT);
	// Enable Ack
	TWCR_REG |= (1<<TWEA);
	// Enable TWI
	TWCR_REG |= (1<<TWEN);*/
	TWCR_REG = (1<<TWINT) | (1<<TWEA) | (1<<TWEN);
     fc0:	e6 e5       	ldi	r30, 0x56	; 86
     fc2:	f0 e0       	ldi	r31, 0x00	; 0
     fc4:	84 ec       	ldi	r24, 0xC4	; 196
     fc6:	80 83       	st	Z, r24
	// Polling until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
     fc8:	e6 e5       	ldi	r30, 0x56	; 86
     fca:	f0 e0       	ldi	r31, 0x00	; 0
     fcc:	80 81       	ld	r24, Z
     fce:	88 23       	and	r24, r24
     fd0:	dc f7       	brge	.-10     	; 0xfc8 <TWI_vWriteData+0x1c>
}
     fd2:	0f 90       	pop	r0
     fd4:	cf 91       	pop	r28
     fd6:	df 91       	pop	r29
     fd8:	08 95       	ret

00000fda <TWI_u8ReadWithAck>:

u8 TWI_u8ReadWithAck(){
     fda:	df 93       	push	r29
     fdc:	cf 93       	push	r28
     fde:	0f 92       	push	r0
     fe0:	cd b7       	in	r28, 0x3d	; 61
     fe2:	de b7       	in	r29, 0x3e	; 62
	u8 Data;
	// Clear flag
	while(!(GET_BIT(TWCR_REG, TWINT)));
     fe4:	e6 e5       	ldi	r30, 0x56	; 86
     fe6:	f0 e0       	ldi	r31, 0x00	; 0
     fe8:	80 81       	ld	r24, Z
     fea:	88 23       	and	r24, r24
     fec:	dc f7       	brge	.-10     	; 0xfe4 <TWI_u8ReadWithAck+0xa>
	// Enable Ack
	TWCR_REG |= (1<<TWEA);
     fee:	a6 e5       	ldi	r26, 0x56	; 86
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	e6 e5       	ldi	r30, 0x56	; 86
     ff4:	f0 e0       	ldi	r31, 0x00	; 0
     ff6:	80 81       	ld	r24, Z
     ff8:	80 64       	ori	r24, 0x40	; 64
     ffa:	8c 93       	st	X, r24
	// Enable TWI
	TWCR_REG |= (1<<TWEN);
     ffc:	a6 e5       	ldi	r26, 0x56	; 86
     ffe:	b0 e0       	ldi	r27, 0x00	; 0
    1000:	e6 e5       	ldi	r30, 0x56	; 86
    1002:	f0 e0       	ldi	r31, 0x00	; 0
    1004:	80 81       	ld	r24, Z
    1006:	84 60       	ori	r24, 0x04	; 4
    1008:	8c 93       	st	X, r24
	// Poll until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
    100a:	e6 e5       	ldi	r30, 0x56	; 86
    100c:	f0 e0       	ldi	r31, 0x00	; 0
    100e:	80 81       	ld	r24, Z
    1010:	88 23       	and	r24, r24
    1012:	dc f7       	brge	.-10     	; 0x100a <TWI_u8ReadWithAck+0x30>
	// Read received data
	Data = TWDR_REG;
    1014:	e3 e2       	ldi	r30, 0x23	; 35
    1016:	f0 e0       	ldi	r31, 0x00	; 0
    1018:	80 81       	ld	r24, Z
    101a:	89 83       	std	Y+1, r24	; 0x01
	return Data;
    101c:	89 81       	ldd	r24, Y+1	; 0x01
}
    101e:	0f 90       	pop	r0
    1020:	cf 91       	pop	r28
    1022:	df 91       	pop	r29
    1024:	08 95       	ret

00001026 <TWI_u8ReadWithNoAck>:

u8 TWI_u8ReadWithNoAck(){
    1026:	df 93       	push	r29
    1028:	cf 93       	push	r28
    102a:	0f 92       	push	r0
    102c:	cd b7       	in	r28, 0x3d	; 61
    102e:	de b7       	in	r29, 0x3e	; 62
	u8 Data;
	// Clear flag
	while(!(GET_BIT(TWCR_REG, TWINT)));
    1030:	e6 e5       	ldi	r30, 0x56	; 86
    1032:	f0 e0       	ldi	r31, 0x00	; 0
    1034:	80 81       	ld	r24, Z
    1036:	88 23       	and	r24, r24
    1038:	dc f7       	brge	.-10     	; 0x1030 <TWI_u8ReadWithNoAck+0xa>
	// Enable TWI
	TWCR_REG |= (1<<TWEN);
    103a:	a6 e5       	ldi	r26, 0x56	; 86
    103c:	b0 e0       	ldi	r27, 0x00	; 0
    103e:	e6 e5       	ldi	r30, 0x56	; 86
    1040:	f0 e0       	ldi	r31, 0x00	; 0
    1042:	80 81       	ld	r24, Z
    1044:	84 60       	ori	r24, 0x04	; 4
    1046:	8c 93       	st	X, r24
	// Poll until flag is set
	while(!(GET_BIT(TWCR_REG, TWINT)));
    1048:	e6 e5       	ldi	r30, 0x56	; 86
    104a:	f0 e0       	ldi	r31, 0x00	; 0
    104c:	80 81       	ld	r24, Z
    104e:	88 23       	and	r24, r24
    1050:	dc f7       	brge	.-10     	; 0x1048 <TWI_u8ReadWithNoAck+0x22>
	// Read received data
	Data = TWDR_REG;
    1052:	e3 e2       	ldi	r30, 0x23	; 35
    1054:	f0 e0       	ldi	r31, 0x00	; 0
    1056:	80 81       	ld	r24, Z
    1058:	89 83       	std	Y+1, r24	; 0x01
	return Data;
    105a:	89 81       	ldd	r24, Y+1	; 0x01
}
    105c:	0f 90       	pop	r0
    105e:	cf 91       	pop	r28
    1060:	df 91       	pop	r29
    1062:	08 95       	ret

00001064 <TWI_u8GetStatus>:

u8 TWI_u8GetStatus(){
    1064:	df 93       	push	r29
    1066:	cf 93       	push	r28
    1068:	0f 92       	push	r0
    106a:	cd b7       	in	r28, 0x3d	; 61
    106c:	de b7       	in	r29, 0x3e	; 62
	u8 Status;
	// Read status register (&0xF8)
	Status = TWSR_REG & 0xF8;
    106e:	e1 e2       	ldi	r30, 0x21	; 33
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	88 7f       	andi	r24, 0xF8	; 248
    1076:	89 83       	std	Y+1, r24	; 0x01
	return Status;
    1078:	89 81       	ldd	r24, Y+1	; 0x01
}
    107a:	0f 90       	pop	r0
    107c:	cf 91       	pop	r28
    107e:	df 91       	pop	r29
    1080:	08 95       	ret

00001082 <TMR_vInit>:
/******************  ******************/

#include "TMR_interface.h"
#include "TMR_config.h"

void TMR_vInit(const TMR_cfg_t *TMR){
    1082:	df 93       	push	r29
    1084:	cf 93       	push	r28
    1086:	00 d0       	rcall	.+0      	; 0x1088 <TMR_vInit+0x6>
    1088:	00 d0       	rcall	.+0      	; 0x108a <TMR_vInit+0x8>
    108a:	cd b7       	in	r28, 0x3d	; 61
    108c:	de b7       	in	r29, 0x3e	; 62
    108e:	9a 83       	std	Y+2, r25	; 0x02
    1090:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    1092:	89 81       	ldd	r24, Y+1	; 0x01
    1094:	9a 81       	ldd	r25, Y+2	; 0x02
    1096:	00 97       	sbiw	r24, 0x00	; 0
    1098:	09 f4       	brne	.+2      	; 0x109c <TMR_vInit+0x1a>
    109a:	88 c2       	rjmp	.+1296   	; 0x15ac <TMR_vInit+0x52a>
		switch(TMR->TMR_TimerChannel){
    109c:	e9 81       	ldd	r30, Y+1	; 0x01
    109e:	fa 81       	ldd	r31, Y+2	; 0x02
    10a0:	80 81       	ld	r24, Z
    10a2:	28 2f       	mov	r18, r24
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	3c 83       	std	Y+4, r19	; 0x04
    10a8:	2b 83       	std	Y+3, r18	; 0x03
    10aa:	8b 81       	ldd	r24, Y+3	; 0x03
    10ac:	9c 81       	ldd	r25, Y+4	; 0x04
    10ae:	83 30       	cpi	r24, 0x03	; 3
    10b0:	91 05       	cpc	r25, r1
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <TMR_vInit+0x34>
    10b4:	27 c1       	rjmp	.+590    	; 0x1304 <TMR_vInit+0x282>
    10b6:	2b 81       	ldd	r18, Y+3	; 0x03
    10b8:	3c 81       	ldd	r19, Y+4	; 0x04
    10ba:	24 30       	cpi	r18, 0x04	; 4
    10bc:	31 05       	cpc	r19, r1
    10be:	8c f4       	brge	.+34     	; 0x10e2 <TMR_vInit+0x60>
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <TMR_vInit+0x4a>
    10ca:	70 c0       	rjmp	.+224    	; 0x11ac <TMR_vInit+0x12a>
    10cc:	2b 81       	ldd	r18, Y+3	; 0x03
    10ce:	3c 81       	ldd	r19, Y+4	; 0x04
    10d0:	22 30       	cpi	r18, 0x02	; 2
    10d2:	31 05       	cpc	r19, r1
    10d4:	0c f0       	brlt	.+2      	; 0x10d8 <TMR_vInit+0x56>
    10d6:	bd c0       	rjmp	.+378    	; 0x1252 <TMR_vInit+0x1d0>
    10d8:	8b 81       	ldd	r24, Y+3	; 0x03
    10da:	9c 81       	ldd	r25, Y+4	; 0x04
    10dc:	00 97       	sbiw	r24, 0x00	; 0
    10de:	a1 f0       	breq	.+40     	; 0x1108 <TMR_vInit+0x86>
    10e0:	65 c2       	rjmp	.+1226   	; 0x15ac <TMR_vInit+0x52a>
    10e2:	2b 81       	ldd	r18, Y+3	; 0x03
    10e4:	3c 81       	ldd	r19, Y+4	; 0x04
    10e6:	25 30       	cpi	r18, 0x05	; 5
    10e8:	31 05       	cpc	r19, r1
    10ea:	09 f4       	brne	.+2      	; 0x10ee <TMR_vInit+0x6c>
    10ec:	be c1       	rjmp	.+892    	; 0x146a <TMR_vInit+0x3e8>
    10ee:	8b 81       	ldd	r24, Y+3	; 0x03
    10f0:	9c 81       	ldd	r25, Y+4	; 0x04
    10f2:	85 30       	cpi	r24, 0x05	; 5
    10f4:	91 05       	cpc	r25, r1
    10f6:	0c f4       	brge	.+2      	; 0x10fa <TMR_vInit+0x78>
    10f8:	5f c1       	rjmp	.+702    	; 0x13b8 <TMR_vInit+0x336>
    10fa:	2b 81       	ldd	r18, Y+3	; 0x03
    10fc:	3c 81       	ldd	r19, Y+4	; 0x04
    10fe:	26 30       	cpi	r18, 0x06	; 6
    1100:	31 05       	cpc	r19, r1
    1102:	09 f4       	brne	.+2      	; 0x1106 <TMR_vInit+0x84>
    1104:	04 c2       	rjmp	.+1032   	; 0x150e <TMR_vInit+0x48c>
    1106:	52 c2       	rjmp	.+1188   	; 0x15ac <TMR_vInit+0x52a>
		case TIMER0_NORMAL:
			TCCR0_REG = (TCCR0_REG&0xB7);
    1108:	a3 e5       	ldi	r26, 0x53	; 83
    110a:	b0 e0       	ldi	r27, 0x00	; 0
    110c:	e3 e5       	ldi	r30, 0x53	; 83
    110e:	f0 e0       	ldi	r31, 0x00	; 0
    1110:	80 81       	ld	r24, Z
    1112:	87 7b       	andi	r24, 0xB7	; 183
    1114:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    1116:	e9 81       	ldd	r30, Y+1	; 0x01
    1118:	fa 81       	ldd	r31, Y+2	; 0x02
    111a:	82 81       	ldd	r24, Z+2	; 0x02
    111c:	81 30       	cpi	r24, 0x01	; 1
    111e:	49 f4       	brne	.+18     	; 0x1132 <TMR_vInit+0xb0>
				TIMSK_REG = (TIMSK_REG&0xFC) | 0x01;
    1120:	a9 e5       	ldi	r26, 0x59	; 89
    1122:	b0 e0       	ldi	r27, 0x00	; 0
    1124:	e9 e5       	ldi	r30, 0x59	; 89
    1126:	f0 e0       	ldi	r31, 0x00	; 0
    1128:	80 81       	ld	r24, Z
    112a:	8c 7f       	andi	r24, 0xFC	; 252
    112c:	81 60       	ori	r24, 0x01	; 1
    112e:	8c 93       	st	X, r24
    1130:	3d c2       	rjmp	.+1146   	; 0x15ac <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    1132:	e9 81       	ldd	r30, Y+1	; 0x01
    1134:	fa 81       	ldd	r31, Y+2	; 0x02
    1136:	82 81       	ldd	r24, Z+2	; 0x02
    1138:	88 23       	and	r24, r24
    113a:	09 f0       	breq	.+2      	; 0x113e <TMR_vInit+0xbc>
    113c:	37 c2       	rjmp	.+1134   	; 0x15ac <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    113e:	e9 81       	ldd	r30, Y+1	; 0x01
    1140:	fa 81       	ldd	r31, Y+2	; 0x02
    1142:	83 81       	ldd	r24, Z+3	; 0x03
    1144:	88 23       	and	r24, r24
    1146:	41 f4       	brne	.+16     	; 0x1158 <TMR_vInit+0xd6>
					TCCR0_REG = (TCCR0_REG & 0xCF);
    1148:	a3 e5       	ldi	r26, 0x53	; 83
    114a:	b0 e0       	ldi	r27, 0x00	; 0
    114c:	e3 e5       	ldi	r30, 0x53	; 83
    114e:	f0 e0       	ldi	r31, 0x00	; 0
    1150:	80 81       	ld	r24, Z
    1152:	8f 7c       	andi	r24, 0xCF	; 207
    1154:	8c 93       	st	X, r24
    1156:	2a c2       	rjmp	.+1108   	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    1158:	e9 81       	ldd	r30, Y+1	; 0x01
    115a:	fa 81       	ldd	r31, Y+2	; 0x02
    115c:	83 81       	ldd	r24, Z+3	; 0x03
    115e:	81 30       	cpi	r24, 0x01	; 1
    1160:	49 f4       	brne	.+18     	; 0x1174 <TMR_vInit+0xf2>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x10;
    1162:	a3 e5       	ldi	r26, 0x53	; 83
    1164:	b0 e0       	ldi	r27, 0x00	; 0
    1166:	e3 e5       	ldi	r30, 0x53	; 83
    1168:	f0 e0       	ldi	r31, 0x00	; 0
    116a:	80 81       	ld	r24, Z
    116c:	8f 7c       	andi	r24, 0xCF	; 207
    116e:	80 61       	ori	r24, 0x10	; 16
    1170:	8c 93       	st	X, r24
    1172:	1c c2       	rjmp	.+1080   	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    1174:	e9 81       	ldd	r30, Y+1	; 0x01
    1176:	fa 81       	ldd	r31, Y+2	; 0x02
    1178:	83 81       	ldd	r24, Z+3	; 0x03
    117a:	82 30       	cpi	r24, 0x02	; 2
    117c:	49 f4       	brne	.+18     	; 0x1190 <TMR_vInit+0x10e>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    117e:	a3 e5       	ldi	r26, 0x53	; 83
    1180:	b0 e0       	ldi	r27, 0x00	; 0
    1182:	e3 e5       	ldi	r30, 0x53	; 83
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	80 81       	ld	r24, Z
    1188:	8f 7c       	andi	r24, 0xCF	; 207
    118a:	80 62       	ori	r24, 0x20	; 32
    118c:	8c 93       	st	X, r24
    118e:	0e c2       	rjmp	.+1052   	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    1190:	e9 81       	ldd	r30, Y+1	; 0x01
    1192:	fa 81       	ldd	r31, Y+2	; 0x02
    1194:	83 81       	ldd	r24, Z+3	; 0x03
    1196:	83 30       	cpi	r24, 0x03	; 3
    1198:	09 f0       	breq	.+2      	; 0x119c <TMR_vInit+0x11a>
    119a:	08 c2       	rjmp	.+1040   	; 0x15ac <TMR_vInit+0x52a>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    119c:	a3 e5       	ldi	r26, 0x53	; 83
    119e:	b0 e0       	ldi	r27, 0x00	; 0
    11a0:	e3 e5       	ldi	r30, 0x53	; 83
    11a2:	f0 e0       	ldi	r31, 0x00	; 0
    11a4:	80 81       	ld	r24, Z
    11a6:	80 63       	ori	r24, 0x30	; 48
    11a8:	8c 93       	st	X, r24
    11aa:	00 c2       	rjmp	.+1024   	; 0x15ac <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER0_CTC:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x8;
    11ac:	a3 e5       	ldi	r26, 0x53	; 83
    11ae:	b0 e0       	ldi	r27, 0x00	; 0
    11b0:	e3 e5       	ldi	r30, 0x53	; 83
    11b2:	f0 e0       	ldi	r31, 0x00	; 0
    11b4:	80 81       	ld	r24, Z
    11b6:	87 7b       	andi	r24, 0xB7	; 183
    11b8:	88 60       	ori	r24, 0x08	; 8
    11ba:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    11bc:	e9 81       	ldd	r30, Y+1	; 0x01
    11be:	fa 81       	ldd	r31, Y+2	; 0x02
    11c0:	82 81       	ldd	r24, Z+2	; 0x02
    11c2:	81 30       	cpi	r24, 0x01	; 1
    11c4:	49 f4       	brne	.+18     	; 0x11d8 <TMR_vInit+0x156>
				TIMSK_REG = (TIMSK_REG&0xFC) | 0x02;
    11c6:	a9 e5       	ldi	r26, 0x59	; 89
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	e9 e5       	ldi	r30, 0x59	; 89
    11cc:	f0 e0       	ldi	r31, 0x00	; 0
    11ce:	80 81       	ld	r24, Z
    11d0:	8c 7f       	andi	r24, 0xFC	; 252
    11d2:	82 60       	ori	r24, 0x02	; 2
    11d4:	8c 93       	st	X, r24
    11d6:	ea c1       	rjmp	.+980    	; 0x15ac <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    11d8:	e9 81       	ldd	r30, Y+1	; 0x01
    11da:	fa 81       	ldd	r31, Y+2	; 0x02
    11dc:	82 81       	ldd	r24, Z+2	; 0x02
    11de:	88 23       	and	r24, r24
    11e0:	09 f0       	breq	.+2      	; 0x11e4 <TMR_vInit+0x162>
    11e2:	e4 c1       	rjmp	.+968    	; 0x15ac <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    11e4:	e9 81       	ldd	r30, Y+1	; 0x01
    11e6:	fa 81       	ldd	r31, Y+2	; 0x02
    11e8:	83 81       	ldd	r24, Z+3	; 0x03
    11ea:	88 23       	and	r24, r24
    11ec:	41 f4       	brne	.+16     	; 0x11fe <TMR_vInit+0x17c>
					TCCR0_REG = (TCCR0_REG & 0xCF);
    11ee:	a3 e5       	ldi	r26, 0x53	; 83
    11f0:	b0 e0       	ldi	r27, 0x00	; 0
    11f2:	e3 e5       	ldi	r30, 0x53	; 83
    11f4:	f0 e0       	ldi	r31, 0x00	; 0
    11f6:	80 81       	ld	r24, Z
    11f8:	8f 7c       	andi	r24, 0xCF	; 207
    11fa:	8c 93       	st	X, r24
    11fc:	d7 c1       	rjmp	.+942    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    11fe:	e9 81       	ldd	r30, Y+1	; 0x01
    1200:	fa 81       	ldd	r31, Y+2	; 0x02
    1202:	83 81       	ldd	r24, Z+3	; 0x03
    1204:	81 30       	cpi	r24, 0x01	; 1
    1206:	49 f4       	brne	.+18     	; 0x121a <TMR_vInit+0x198>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x10;
    1208:	a3 e5       	ldi	r26, 0x53	; 83
    120a:	b0 e0       	ldi	r27, 0x00	; 0
    120c:	e3 e5       	ldi	r30, 0x53	; 83
    120e:	f0 e0       	ldi	r31, 0x00	; 0
    1210:	80 81       	ld	r24, Z
    1212:	8f 7c       	andi	r24, 0xCF	; 207
    1214:	80 61       	ori	r24, 0x10	; 16
    1216:	8c 93       	st	X, r24
    1218:	c9 c1       	rjmp	.+914    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    121a:	e9 81       	ldd	r30, Y+1	; 0x01
    121c:	fa 81       	ldd	r31, Y+2	; 0x02
    121e:	83 81       	ldd	r24, Z+3	; 0x03
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	49 f4       	brne	.+18     	; 0x1236 <TMR_vInit+0x1b4>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    1224:	a3 e5       	ldi	r26, 0x53	; 83
    1226:	b0 e0       	ldi	r27, 0x00	; 0
    1228:	e3 e5       	ldi	r30, 0x53	; 83
    122a:	f0 e0       	ldi	r31, 0x00	; 0
    122c:	80 81       	ld	r24, Z
    122e:	8f 7c       	andi	r24, 0xCF	; 207
    1230:	80 62       	ori	r24, 0x20	; 32
    1232:	8c 93       	st	X, r24
    1234:	bb c1       	rjmp	.+886    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    1236:	e9 81       	ldd	r30, Y+1	; 0x01
    1238:	fa 81       	ldd	r31, Y+2	; 0x02
    123a:	83 81       	ldd	r24, Z+3	; 0x03
    123c:	83 30       	cpi	r24, 0x03	; 3
    123e:	09 f0       	breq	.+2      	; 0x1242 <TMR_vInit+0x1c0>
    1240:	b5 c1       	rjmp	.+874    	; 0x15ac <TMR_vInit+0x52a>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    1242:	a3 e5       	ldi	r26, 0x53	; 83
    1244:	b0 e0       	ldi	r27, 0x00	; 0
    1246:	e3 e5       	ldi	r30, 0x53	; 83
    1248:	f0 e0       	ldi	r31, 0x00	; 0
    124a:	80 81       	ld	r24, Z
    124c:	80 63       	ori	r24, 0x30	; 48
    124e:	8c 93       	st	X, r24
    1250:	ad c1       	rjmp	.+858    	; 0x15ac <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_NORMAL:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    1252:	af e4       	ldi	r26, 0x4F	; 79
    1254:	b0 e0       	ldi	r27, 0x00	; 0
    1256:	ef e4       	ldi	r30, 0x4F	; 79
    1258:	f0 e0       	ldi	r31, 0x00	; 0
    125a:	80 81       	ld	r24, Z
    125c:	8c 7f       	andi	r24, 0xFC	; 252
    125e:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    1260:	ae e4       	ldi	r26, 0x4E	; 78
    1262:	b0 e0       	ldi	r27, 0x00	; 0
    1264:	ee e4       	ldi	r30, 0x4E	; 78
    1266:	f0 e0       	ldi	r31, 0x00	; 0
    1268:	80 81       	ld	r24, Z
    126a:	87 7e       	andi	r24, 0xE7	; 231
    126c:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    126e:	e9 81       	ldd	r30, Y+1	; 0x01
    1270:	fa 81       	ldd	r31, Y+2	; 0x02
    1272:	82 81       	ldd	r24, Z+2	; 0x02
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	49 f4       	brne	.+18     	; 0x128a <TMR_vInit+0x208>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x04;
    1278:	a9 e5       	ldi	r26, 0x59	; 89
    127a:	b0 e0       	ldi	r27, 0x00	; 0
    127c:	e9 e5       	ldi	r30, 0x59	; 89
    127e:	f0 e0       	ldi	r31, 0x00	; 0
    1280:	80 81       	ld	r24, Z
    1282:	83 7c       	andi	r24, 0xC3	; 195
    1284:	84 60       	ori	r24, 0x04	; 4
    1286:	8c 93       	st	X, r24
    1288:	91 c1       	rjmp	.+802    	; 0x15ac <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    128a:	e9 81       	ldd	r30, Y+1	; 0x01
    128c:	fa 81       	ldd	r31, Y+2	; 0x02
    128e:	82 81       	ldd	r24, Z+2	; 0x02
    1290:	88 23       	and	r24, r24
    1292:	09 f0       	breq	.+2      	; 0x1296 <TMR_vInit+0x214>
    1294:	8b c1       	rjmp	.+790    	; 0x15ac <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    1296:	e9 81       	ldd	r30, Y+1	; 0x01
    1298:	fa 81       	ldd	r31, Y+2	; 0x02
    129a:	83 81       	ldd	r24, Z+3	; 0x03
    129c:	88 23       	and	r24, r24
    129e:	41 f4       	brne	.+16     	; 0x12b0 <TMR_vInit+0x22e>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    12a0:	af e4       	ldi	r26, 0x4F	; 79
    12a2:	b0 e0       	ldi	r27, 0x00	; 0
    12a4:	ef e4       	ldi	r30, 0x4F	; 79
    12a6:	f0 e0       	ldi	r31, 0x00	; 0
    12a8:	80 81       	ld	r24, Z
    12aa:	8f 7c       	andi	r24, 0xCF	; 207
    12ac:	8c 93       	st	X, r24
    12ae:	7e c1       	rjmp	.+764    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    12b0:	e9 81       	ldd	r30, Y+1	; 0x01
    12b2:	fa 81       	ldd	r31, Y+2	; 0x02
    12b4:	83 81       	ldd	r24, Z+3	; 0x03
    12b6:	81 30       	cpi	r24, 0x01	; 1
    12b8:	49 f4       	brne	.+18     	; 0x12cc <TMR_vInit+0x24a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    12ba:	af e4       	ldi	r26, 0x4F	; 79
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	ef e4       	ldi	r30, 0x4F	; 79
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	8f 7c       	andi	r24, 0xCF	; 207
    12c6:	80 61       	ori	r24, 0x10	; 16
    12c8:	8c 93       	st	X, r24
    12ca:	70 c1       	rjmp	.+736    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    12cc:	e9 81       	ldd	r30, Y+1	; 0x01
    12ce:	fa 81       	ldd	r31, Y+2	; 0x02
    12d0:	83 81       	ldd	r24, Z+3	; 0x03
    12d2:	82 30       	cpi	r24, 0x02	; 2
    12d4:	49 f4       	brne	.+18     	; 0x12e8 <TMR_vInit+0x266>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    12d6:	af e4       	ldi	r26, 0x4F	; 79
    12d8:	b0 e0       	ldi	r27, 0x00	; 0
    12da:	ef e4       	ldi	r30, 0x4F	; 79
    12dc:	f0 e0       	ldi	r31, 0x00	; 0
    12de:	80 81       	ld	r24, Z
    12e0:	8f 7c       	andi	r24, 0xCF	; 207
    12e2:	80 62       	ori	r24, 0x20	; 32
    12e4:	8c 93       	st	X, r24
    12e6:	62 c1       	rjmp	.+708    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    12e8:	e9 81       	ldd	r30, Y+1	; 0x01
    12ea:	fa 81       	ldd	r31, Y+2	; 0x02
    12ec:	83 81       	ldd	r24, Z+3	; 0x03
    12ee:	83 30       	cpi	r24, 0x03	; 3
    12f0:	09 f0       	breq	.+2      	; 0x12f4 <TMR_vInit+0x272>
    12f2:	5c c1       	rjmp	.+696    	; 0x15ac <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    12f4:	af e4       	ldi	r26, 0x4F	; 79
    12f6:	b0 e0       	ldi	r27, 0x00	; 0
    12f8:	ef e4       	ldi	r30, 0x4F	; 79
    12fa:	f0 e0       	ldi	r31, 0x00	; 0
    12fc:	80 81       	ld	r24, Z
    12fe:	80 63       	ori	r24, 0x30	; 48
    1300:	8c 93       	st	X, r24
    1302:	54 c1       	rjmp	.+680    	; 0x15ac <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_CTC_OCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    1304:	af e4       	ldi	r26, 0x4F	; 79
    1306:	b0 e0       	ldi	r27, 0x00	; 0
    1308:	ef e4       	ldi	r30, 0x4F	; 79
    130a:	f0 e0       	ldi	r31, 0x00	; 0
    130c:	80 81       	ld	r24, Z
    130e:	8c 7f       	andi	r24, 0xFC	; 252
    1310:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x08;
    1312:	ae e4       	ldi	r26, 0x4E	; 78
    1314:	b0 e0       	ldi	r27, 0x00	; 0
    1316:	ee e4       	ldi	r30, 0x4E	; 78
    1318:	f0 e0       	ldi	r31, 0x00	; 0
    131a:	80 81       	ld	r24, Z
    131c:	87 7e       	andi	r24, 0xE7	; 231
    131e:	88 60       	ori	r24, 0x08	; 8
    1320:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    1322:	e9 81       	ldd	r30, Y+1	; 0x01
    1324:	fa 81       	ldd	r31, Y+2	; 0x02
    1326:	82 81       	ldd	r24, Z+2	; 0x02
    1328:	81 30       	cpi	r24, 0x01	; 1
    132a:	49 f4       	brne	.+18     	; 0x133e <TMR_vInit+0x2bc>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x18;
    132c:	a9 e5       	ldi	r26, 0x59	; 89
    132e:	b0 e0       	ldi	r27, 0x00	; 0
    1330:	e9 e5       	ldi	r30, 0x59	; 89
    1332:	f0 e0       	ldi	r31, 0x00	; 0
    1334:	80 81       	ld	r24, Z
    1336:	83 7c       	andi	r24, 0xC3	; 195
    1338:	88 61       	ori	r24, 0x18	; 24
    133a:	8c 93       	st	X, r24
    133c:	37 c1       	rjmp	.+622    	; 0x15ac <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    133e:	e9 81       	ldd	r30, Y+1	; 0x01
    1340:	fa 81       	ldd	r31, Y+2	; 0x02
    1342:	82 81       	ldd	r24, Z+2	; 0x02
    1344:	88 23       	and	r24, r24
    1346:	09 f0       	breq	.+2      	; 0x134a <TMR_vInit+0x2c8>
    1348:	31 c1       	rjmp	.+610    	; 0x15ac <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    134a:	e9 81       	ldd	r30, Y+1	; 0x01
    134c:	fa 81       	ldd	r31, Y+2	; 0x02
    134e:	83 81       	ldd	r24, Z+3	; 0x03
    1350:	88 23       	and	r24, r24
    1352:	41 f4       	brne	.+16     	; 0x1364 <TMR_vInit+0x2e2>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    1354:	af e4       	ldi	r26, 0x4F	; 79
    1356:	b0 e0       	ldi	r27, 0x00	; 0
    1358:	ef e4       	ldi	r30, 0x4F	; 79
    135a:	f0 e0       	ldi	r31, 0x00	; 0
    135c:	80 81       	ld	r24, Z
    135e:	8f 7c       	andi	r24, 0xCF	; 207
    1360:	8c 93       	st	X, r24
    1362:	24 c1       	rjmp	.+584    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    1364:	e9 81       	ldd	r30, Y+1	; 0x01
    1366:	fa 81       	ldd	r31, Y+2	; 0x02
    1368:	83 81       	ldd	r24, Z+3	; 0x03
    136a:	81 30       	cpi	r24, 0x01	; 1
    136c:	49 f4       	brne	.+18     	; 0x1380 <TMR_vInit+0x2fe>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    136e:	af e4       	ldi	r26, 0x4F	; 79
    1370:	b0 e0       	ldi	r27, 0x00	; 0
    1372:	ef e4       	ldi	r30, 0x4F	; 79
    1374:	f0 e0       	ldi	r31, 0x00	; 0
    1376:	80 81       	ld	r24, Z
    1378:	8f 7c       	andi	r24, 0xCF	; 207
    137a:	80 61       	ori	r24, 0x10	; 16
    137c:	8c 93       	st	X, r24
    137e:	16 c1       	rjmp	.+556    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    1380:	e9 81       	ldd	r30, Y+1	; 0x01
    1382:	fa 81       	ldd	r31, Y+2	; 0x02
    1384:	83 81       	ldd	r24, Z+3	; 0x03
    1386:	82 30       	cpi	r24, 0x02	; 2
    1388:	49 f4       	brne	.+18     	; 0x139c <TMR_vInit+0x31a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    138a:	af e4       	ldi	r26, 0x4F	; 79
    138c:	b0 e0       	ldi	r27, 0x00	; 0
    138e:	ef e4       	ldi	r30, 0x4F	; 79
    1390:	f0 e0       	ldi	r31, 0x00	; 0
    1392:	80 81       	ld	r24, Z
    1394:	8f 7c       	andi	r24, 0xCF	; 207
    1396:	80 62       	ori	r24, 0x20	; 32
    1398:	8c 93       	st	X, r24
    139a:	08 c1       	rjmp	.+528    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    139c:	e9 81       	ldd	r30, Y+1	; 0x01
    139e:	fa 81       	ldd	r31, Y+2	; 0x02
    13a0:	83 81       	ldd	r24, Z+3	; 0x03
    13a2:	83 30       	cpi	r24, 0x03	; 3
    13a4:	09 f0       	breq	.+2      	; 0x13a8 <TMR_vInit+0x326>
    13a6:	02 c1       	rjmp	.+516    	; 0x15ac <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    13a8:	af e4       	ldi	r26, 0x4F	; 79
    13aa:	b0 e0       	ldi	r27, 0x00	; 0
    13ac:	ef e4       	ldi	r30, 0x4F	; 79
    13ae:	f0 e0       	ldi	r31, 0x00	; 0
    13b0:	80 81       	ld	r24, Z
    13b2:	80 63       	ori	r24, 0x30	; 48
    13b4:	8c 93       	st	X, r24
    13b6:	fa c0       	rjmp	.+500    	; 0x15ac <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_CTC_ICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    13b8:	af e4       	ldi	r26, 0x4F	; 79
    13ba:	b0 e0       	ldi	r27, 0x00	; 0
    13bc:	ef e4       	ldi	r30, 0x4F	; 79
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	80 81       	ld	r24, Z
    13c2:	8c 7f       	andi	r24, 0xFC	; 252
    13c4:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    13c6:	ae e4       	ldi	r26, 0x4E	; 78
    13c8:	b0 e0       	ldi	r27, 0x00	; 0
    13ca:	ee e4       	ldi	r30, 0x4E	; 78
    13cc:	f0 e0       	ldi	r31, 0x00	; 0
    13ce:	80 81       	ld	r24, Z
    13d0:	88 61       	ori	r24, 0x18	; 24
    13d2:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    13d4:	e9 81       	ldd	r30, Y+1	; 0x01
    13d6:	fa 81       	ldd	r31, Y+2	; 0x02
    13d8:	82 81       	ldd	r24, Z+2	; 0x02
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	49 f4       	brne	.+18     	; 0x13f0 <TMR_vInit+0x36e>
				TIMSK_REG = (TIMSK_REG&0xC3) | 0x18;
    13de:	a9 e5       	ldi	r26, 0x59	; 89
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e9 e5       	ldi	r30, 0x59	; 89
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	83 7c       	andi	r24, 0xC3	; 195
    13ea:	88 61       	ori	r24, 0x18	; 24
    13ec:	8c 93       	st	X, r24
    13ee:	de c0       	rjmp	.+444    	; 0x15ac <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    13f0:	e9 81       	ldd	r30, Y+1	; 0x01
    13f2:	fa 81       	ldd	r31, Y+2	; 0x02
    13f4:	82 81       	ldd	r24, Z+2	; 0x02
    13f6:	88 23       	and	r24, r24
    13f8:	09 f0       	breq	.+2      	; 0x13fc <TMR_vInit+0x37a>
    13fa:	d8 c0       	rjmp	.+432    	; 0x15ac <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    13fc:	e9 81       	ldd	r30, Y+1	; 0x01
    13fe:	fa 81       	ldd	r31, Y+2	; 0x02
    1400:	83 81       	ldd	r24, Z+3	; 0x03
    1402:	88 23       	and	r24, r24
    1404:	41 f4       	brne	.+16     	; 0x1416 <TMR_vInit+0x394>
					TCCR1A_REG = (TCCR1A_REG & 0xCF);
    1406:	af e4       	ldi	r26, 0x4F	; 79
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	ef e4       	ldi	r30, 0x4F	; 79
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	8f 7c       	andi	r24, 0xCF	; 207
    1412:	8c 93       	st	X, r24
    1414:	cb c0       	rjmp	.+406    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    1416:	e9 81       	ldd	r30, Y+1	; 0x01
    1418:	fa 81       	ldd	r31, Y+2	; 0x02
    141a:	83 81       	ldd	r24, Z+3	; 0x03
    141c:	81 30       	cpi	r24, 0x01	; 1
    141e:	49 f4       	brne	.+18     	; 0x1432 <TMR_vInit+0x3b0>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x10;
    1420:	af e4       	ldi	r26, 0x4F	; 79
    1422:	b0 e0       	ldi	r27, 0x00	; 0
    1424:	ef e4       	ldi	r30, 0x4F	; 79
    1426:	f0 e0       	ldi	r31, 0x00	; 0
    1428:	80 81       	ld	r24, Z
    142a:	8f 7c       	andi	r24, 0xCF	; 207
    142c:	80 61       	ori	r24, 0x10	; 16
    142e:	8c 93       	st	X, r24
    1430:	bd c0       	rjmp	.+378    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    1432:	e9 81       	ldd	r30, Y+1	; 0x01
    1434:	fa 81       	ldd	r31, Y+2	; 0x02
    1436:	83 81       	ldd	r24, Z+3	; 0x03
    1438:	82 30       	cpi	r24, 0x02	; 2
    143a:	49 f4       	brne	.+18     	; 0x144e <TMR_vInit+0x3cc>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    143c:	af e4       	ldi	r26, 0x4F	; 79
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ef e4       	ldi	r30, 0x4F	; 79
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	80 81       	ld	r24, Z
    1446:	8f 7c       	andi	r24, 0xCF	; 207
    1448:	80 62       	ori	r24, 0x20	; 32
    144a:	8c 93       	st	X, r24
    144c:	af c0       	rjmp	.+350    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    144e:	e9 81       	ldd	r30, Y+1	; 0x01
    1450:	fa 81       	ldd	r31, Y+2	; 0x02
    1452:	83 81       	ldd	r24, Z+3	; 0x03
    1454:	83 30       	cpi	r24, 0x03	; 3
    1456:	09 f0       	breq	.+2      	; 0x145a <TMR_vInit+0x3d8>
    1458:	a9 c0       	rjmp	.+338    	; 0x15ac <TMR_vInit+0x52a>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    145a:	af e4       	ldi	r26, 0x4F	; 79
    145c:	b0 e0       	ldi	r27, 0x00	; 0
    145e:	ef e4       	ldi	r30, 0x4F	; 79
    1460:	f0 e0       	ldi	r31, 0x00	; 0
    1462:	80 81       	ld	r24, Z
    1464:	80 63       	ori	r24, 0x30	; 48
    1466:	8c 93       	st	X, r24
    1468:	a1 c0       	rjmp	.+322    	; 0x15ac <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_NORMAL:
			TCCR2_REG = (TCCR2_REG&0xB7);
    146a:	a5 e4       	ldi	r26, 0x45	; 69
    146c:	b0 e0       	ldi	r27, 0x00	; 0
    146e:	e5 e4       	ldi	r30, 0x45	; 69
    1470:	f0 e0       	ldi	r31, 0x00	; 0
    1472:	80 81       	ld	r24, Z
    1474:	87 7b       	andi	r24, 0xB7	; 183
    1476:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    1478:	e9 81       	ldd	r30, Y+1	; 0x01
    147a:	fa 81       	ldd	r31, Y+2	; 0x02
    147c:	82 81       	ldd	r24, Z+2	; 0x02
    147e:	81 30       	cpi	r24, 0x01	; 1
    1480:	49 f4       	brne	.+18     	; 0x1494 <TMR_vInit+0x412>
				TIMSK_REG = (TIMSK_REG&0x3F) | 0x40;
    1482:	a9 e5       	ldi	r26, 0x59	; 89
    1484:	b0 e0       	ldi	r27, 0x00	; 0
    1486:	e9 e5       	ldi	r30, 0x59	; 89
    1488:	f0 e0       	ldi	r31, 0x00	; 0
    148a:	80 81       	ld	r24, Z
    148c:	8f 73       	andi	r24, 0x3F	; 63
    148e:	80 64       	ori	r24, 0x40	; 64
    1490:	8c 93       	st	X, r24
    1492:	8c c0       	rjmp	.+280    	; 0x15ac <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    1494:	e9 81       	ldd	r30, Y+1	; 0x01
    1496:	fa 81       	ldd	r31, Y+2	; 0x02
    1498:	82 81       	ldd	r24, Z+2	; 0x02
    149a:	88 23       	and	r24, r24
    149c:	09 f0       	breq	.+2      	; 0x14a0 <TMR_vInit+0x41e>
    149e:	86 c0       	rjmp	.+268    	; 0x15ac <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    14a0:	e9 81       	ldd	r30, Y+1	; 0x01
    14a2:	fa 81       	ldd	r31, Y+2	; 0x02
    14a4:	83 81       	ldd	r24, Z+3	; 0x03
    14a6:	88 23       	and	r24, r24
    14a8:	41 f4       	brne	.+16     	; 0x14ba <TMR_vInit+0x438>
					TCCR2_REG = (TCCR2_REG & 0xCF);
    14aa:	a5 e4       	ldi	r26, 0x45	; 69
    14ac:	b0 e0       	ldi	r27, 0x00	; 0
    14ae:	e5 e4       	ldi	r30, 0x45	; 69
    14b0:	f0 e0       	ldi	r31, 0x00	; 0
    14b2:	80 81       	ld	r24, Z
    14b4:	8f 7c       	andi	r24, 0xCF	; 207
    14b6:	8c 93       	st	X, r24
    14b8:	79 c0       	rjmp	.+242    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    14ba:	e9 81       	ldd	r30, Y+1	; 0x01
    14bc:	fa 81       	ldd	r31, Y+2	; 0x02
    14be:	83 81       	ldd	r24, Z+3	; 0x03
    14c0:	81 30       	cpi	r24, 0x01	; 1
    14c2:	49 f4       	brne	.+18     	; 0x14d6 <TMR_vInit+0x454>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x10;
    14c4:	a5 e4       	ldi	r26, 0x45	; 69
    14c6:	b0 e0       	ldi	r27, 0x00	; 0
    14c8:	e5 e4       	ldi	r30, 0x45	; 69
    14ca:	f0 e0       	ldi	r31, 0x00	; 0
    14cc:	80 81       	ld	r24, Z
    14ce:	8f 7c       	andi	r24, 0xCF	; 207
    14d0:	80 61       	ori	r24, 0x10	; 16
    14d2:	8c 93       	st	X, r24
    14d4:	6b c0       	rjmp	.+214    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    14d6:	e9 81       	ldd	r30, Y+1	; 0x01
    14d8:	fa 81       	ldd	r31, Y+2	; 0x02
    14da:	83 81       	ldd	r24, Z+3	; 0x03
    14dc:	82 30       	cpi	r24, 0x02	; 2
    14de:	49 f4       	brne	.+18     	; 0x14f2 <TMR_vInit+0x470>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x20;
    14e0:	a5 e4       	ldi	r26, 0x45	; 69
    14e2:	b0 e0       	ldi	r27, 0x00	; 0
    14e4:	e5 e4       	ldi	r30, 0x45	; 69
    14e6:	f0 e0       	ldi	r31, 0x00	; 0
    14e8:	80 81       	ld	r24, Z
    14ea:	8f 7c       	andi	r24, 0xCF	; 207
    14ec:	80 62       	ori	r24, 0x20	; 32
    14ee:	8c 93       	st	X, r24
    14f0:	5d c0       	rjmp	.+186    	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    14f2:	e9 81       	ldd	r30, Y+1	; 0x01
    14f4:	fa 81       	ldd	r31, Y+2	; 0x02
    14f6:	83 81       	ldd	r24, Z+3	; 0x03
    14f8:	83 30       	cpi	r24, 0x03	; 3
    14fa:	09 f0       	breq	.+2      	; 0x14fe <TMR_vInit+0x47c>
    14fc:	57 c0       	rjmp	.+174    	; 0x15ac <TMR_vInit+0x52a>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x30;
    14fe:	a5 e4       	ldi	r26, 0x45	; 69
    1500:	b0 e0       	ldi	r27, 0x00	; 0
    1502:	e5 e4       	ldi	r30, 0x45	; 69
    1504:	f0 e0       	ldi	r31, 0x00	; 0
    1506:	80 81       	ld	r24, Z
    1508:	80 63       	ori	r24, 0x30	; 48
    150a:	8c 93       	st	X, r24
    150c:	4f c0       	rjmp	.+158    	; 0x15ac <TMR_vInit+0x52a>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_CTC:
			TCCR2_REG = (TCCR2_REG&0xB7);
    150e:	a5 e4       	ldi	r26, 0x45	; 69
    1510:	b0 e0       	ldi	r27, 0x00	; 0
    1512:	e5 e4       	ldi	r30, 0x45	; 69
    1514:	f0 e0       	ldi	r31, 0x00	; 0
    1516:	80 81       	ld	r24, Z
    1518:	87 7b       	andi	r24, 0xB7	; 183
    151a:	8c 93       	st	X, r24
			if(TMR->TMR_ToggleMode == TMR_InterruptMode){
    151c:	e9 81       	ldd	r30, Y+1	; 0x01
    151e:	fa 81       	ldd	r31, Y+2	; 0x02
    1520:	82 81       	ldd	r24, Z+2	; 0x02
    1522:	81 30       	cpi	r24, 0x01	; 1
    1524:	49 f4       	brne	.+18     	; 0x1538 <TMR_vInit+0x4b6>
				TIMSK_REG = (TIMSK_REG&0x3F) | 0x80;
    1526:	a9 e5       	ldi	r26, 0x59	; 89
    1528:	b0 e0       	ldi	r27, 0x00	; 0
    152a:	e9 e5       	ldi	r30, 0x59	; 89
    152c:	f0 e0       	ldi	r31, 0x00	; 0
    152e:	80 81       	ld	r24, Z
    1530:	8f 73       	andi	r24, 0x3F	; 63
    1532:	80 68       	ori	r24, 0x80	; 128
    1534:	8c 93       	st	X, r24
    1536:	3a c0       	rjmp	.+116    	; 0x15ac <TMR_vInit+0x52a>
			}
			else if(TMR->TMR_ToggleMode == TMR_OCMode){
    1538:	e9 81       	ldd	r30, Y+1	; 0x01
    153a:	fa 81       	ldd	r31, Y+2	; 0x02
    153c:	82 81       	ldd	r24, Z+2	; 0x02
    153e:	88 23       	and	r24, r24
    1540:	a9 f5       	brne	.+106    	; 0x15ac <TMR_vInit+0x52a>
				if(TMR->TMR_OCMode == OC_Disconnected){
    1542:	e9 81       	ldd	r30, Y+1	; 0x01
    1544:	fa 81       	ldd	r31, Y+2	; 0x02
    1546:	83 81       	ldd	r24, Z+3	; 0x03
    1548:	88 23       	and	r24, r24
    154a:	41 f4       	brne	.+16     	; 0x155c <TMR_vInit+0x4da>
					TCCR2_REG = (TCCR2_REG & 0xCF);
    154c:	a5 e4       	ldi	r26, 0x45	; 69
    154e:	b0 e0       	ldi	r27, 0x00	; 0
    1550:	e5 e4       	ldi	r30, 0x45	; 69
    1552:	f0 e0       	ldi	r31, 0x00	; 0
    1554:	80 81       	ld	r24, Z
    1556:	8f 7c       	andi	r24, 0xCF	; 207
    1558:	8c 93       	st	X, r24
    155a:	28 c0       	rjmp	.+80     	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Toggle){
    155c:	e9 81       	ldd	r30, Y+1	; 0x01
    155e:	fa 81       	ldd	r31, Y+2	; 0x02
    1560:	83 81       	ldd	r24, Z+3	; 0x03
    1562:	81 30       	cpi	r24, 0x01	; 1
    1564:	49 f4       	brne	.+18     	; 0x1578 <TMR_vInit+0x4f6>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x10;
    1566:	a5 e4       	ldi	r26, 0x45	; 69
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e5 e4       	ldi	r30, 0x45	; 69
    156c:	f0 e0       	ldi	r31, 0x00	; 0
    156e:	80 81       	ld	r24, Z
    1570:	8f 7c       	andi	r24, 0xCF	; 207
    1572:	80 61       	ori	r24, 0x10	; 16
    1574:	8c 93       	st	X, r24
    1576:	1a c0       	rjmp	.+52     	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Clear){
    1578:	e9 81       	ldd	r30, Y+1	; 0x01
    157a:	fa 81       	ldd	r31, Y+2	; 0x02
    157c:	83 81       	ldd	r24, Z+3	; 0x03
    157e:	82 30       	cpi	r24, 0x02	; 2
    1580:	49 f4       	brne	.+18     	; 0x1594 <TMR_vInit+0x512>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x20;
    1582:	a5 e4       	ldi	r26, 0x45	; 69
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	e5 e4       	ldi	r30, 0x45	; 69
    1588:	f0 e0       	ldi	r31, 0x00	; 0
    158a:	80 81       	ld	r24, Z
    158c:	8f 7c       	andi	r24, 0xCF	; 207
    158e:	80 62       	ori	r24, 0x20	; 32
    1590:	8c 93       	st	X, r24
    1592:	0c c0       	rjmp	.+24     	; 0x15ac <TMR_vInit+0x52a>
				}
				else if(TMR->TMR_OCMode == OC_Set){
    1594:	e9 81       	ldd	r30, Y+1	; 0x01
    1596:	fa 81       	ldd	r31, Y+2	; 0x02
    1598:	83 81       	ldd	r24, Z+3	; 0x03
    159a:	83 30       	cpi	r24, 0x03	; 3
    159c:	39 f4       	brne	.+14     	; 0x15ac <TMR_vInit+0x52a>
					TCCR2_REG = (TCCR2_REG & 0xCF) | 0x30;
    159e:	a5 e4       	ldi	r26, 0x45	; 69
    15a0:	b0 e0       	ldi	r27, 0x00	; 0
    15a2:	e5 e4       	ldi	r30, 0x45	; 69
    15a4:	f0 e0       	ldi	r31, 0x00	; 0
    15a6:	80 81       	ld	r24, Z
    15a8:	80 63       	ori	r24, 0x30	; 48
    15aa:	8c 93       	st	X, r24
			else{ /* Do Nothing */ }
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	0f 90       	pop	r0
    15b2:	0f 90       	pop	r0
    15b4:	cf 91       	pop	r28
    15b6:	df 91       	pop	r29
    15b8:	08 95       	ret

000015ba <TMR_vStartTimer>:

void TMR_vStartTimer(const TMR_cfg_t *TMR){
    15ba:	df 93       	push	r29
    15bc:	cf 93       	push	r28
    15be:	cd b7       	in	r28, 0x3d	; 61
    15c0:	de b7       	in	r29, 0x3e	; 62
    15c2:	2a 97       	sbiw	r28, 0x0a	; 10
    15c4:	0f b6       	in	r0, 0x3f	; 63
    15c6:	f8 94       	cli
    15c8:	de bf       	out	0x3e, r29	; 62
    15ca:	0f be       	out	0x3f, r0	; 63
    15cc:	cd bf       	out	0x3d, r28	; 61
    15ce:	9a 83       	std	Y+2, r25	; 0x02
    15d0:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    15d2:	89 81       	ldd	r24, Y+1	; 0x01
    15d4:	9a 81       	ldd	r25, Y+2	; 0x02
    15d6:	00 97       	sbiw	r24, 0x00	; 0
    15d8:	09 f4       	brne	.+2      	; 0x15dc <TMR_vStartTimer+0x22>
    15da:	98 c1       	rjmp	.+816    	; 0x190c <TMR_vStartTimer+0x352>
		switch(TMR->TMR_TimerChannel){
    15dc:	e9 81       	ldd	r30, Y+1	; 0x01
    15de:	fa 81       	ldd	r31, Y+2	; 0x02
    15e0:	80 81       	ld	r24, Z
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	3a 87       	std	Y+10, r19	; 0x0a
    15e8:	29 87       	std	Y+9, r18	; 0x09
    15ea:	89 85       	ldd	r24, Y+9	; 0x09
    15ec:	9a 85       	ldd	r25, Y+10	; 0x0a
    15ee:	85 30       	cpi	r24, 0x05	; 5
    15f0:	91 05       	cpc	r25, r1
    15f2:	64 f4       	brge	.+24     	; 0x160c <TMR_vStartTimer+0x52>
    15f4:	29 85       	ldd	r18, Y+9	; 0x09
    15f6:	3a 85       	ldd	r19, Y+10	; 0x0a
    15f8:	22 30       	cpi	r18, 0x02	; 2
    15fa:	31 05       	cpc	r19, r1
    15fc:	0c f0       	brlt	.+2      	; 0x1600 <TMR_vStartTimer+0x46>
    15fe:	8b c0       	rjmp	.+278    	; 0x1716 <TMR_vStartTimer+0x15c>
    1600:	89 85       	ldd	r24, Y+9	; 0x09
    1602:	9a 85       	ldd	r25, Y+10	; 0x0a
    1604:	99 23       	and	r25, r25
    1606:	0c f4       	brge	.+2      	; 0x160a <TMR_vStartTimer+0x50>
    1608:	81 c1       	rjmp	.+770    	; 0x190c <TMR_vStartTimer+0x352>
    160a:	07 c0       	rjmp	.+14     	; 0x161a <TMR_vStartTimer+0x60>
    160c:	29 85       	ldd	r18, Y+9	; 0x09
    160e:	3a 85       	ldd	r19, Y+10	; 0x0a
    1610:	27 30       	cpi	r18, 0x07	; 7
    1612:	31 05       	cpc	r19, r1
    1614:	0c f0       	brlt	.+2      	; 0x1618 <TMR_vStartTimer+0x5e>
    1616:	7a c1       	rjmp	.+756    	; 0x190c <TMR_vStartTimer+0x352>
    1618:	fc c0       	rjmp	.+504    	; 0x1812 <TMR_vStartTimer+0x258>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			switch(TMR->TMR_Prescale){
    161a:	e9 81       	ldd	r30, Y+1	; 0x01
    161c:	fa 81       	ldd	r31, Y+2	; 0x02
    161e:	81 81       	ldd	r24, Z+1	; 0x01
    1620:	28 2f       	mov	r18, r24
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	38 87       	std	Y+8, r19	; 0x08
    1626:	2f 83       	std	Y+7, r18	; 0x07
    1628:	8f 81       	ldd	r24, Y+7	; 0x07
    162a:	98 85       	ldd	r25, Y+8	; 0x08
    162c:	83 30       	cpi	r24, 0x03	; 3
    162e:	91 05       	cpc	r25, r1
    1630:	09 f4       	brne	.+2      	; 0x1634 <TMR_vStartTimer+0x7a>
    1632:	45 c0       	rjmp	.+138    	; 0x16be <TMR_vStartTimer+0x104>
    1634:	2f 81       	ldd	r18, Y+7	; 0x07
    1636:	38 85       	ldd	r19, Y+8	; 0x08
    1638:	24 30       	cpi	r18, 0x04	; 4
    163a:	31 05       	cpc	r19, r1
    163c:	7c f4       	brge	.+30     	; 0x165c <TMR_vStartTimer+0xa2>
    163e:	8f 81       	ldd	r24, Y+7	; 0x07
    1640:	98 85       	ldd	r25, Y+8	; 0x08
    1642:	81 30       	cpi	r24, 0x01	; 1
    1644:	91 05       	cpc	r25, r1
    1646:	49 f1       	breq	.+82     	; 0x169a <TMR_vStartTimer+0xe0>
    1648:	2f 81       	ldd	r18, Y+7	; 0x07
    164a:	38 85       	ldd	r19, Y+8	; 0x08
    164c:	22 30       	cpi	r18, 0x02	; 2
    164e:	31 05       	cpc	r19, r1
    1650:	6c f5       	brge	.+90     	; 0x16ac <TMR_vStartTimer+0xf2>
    1652:	8f 81       	ldd	r24, Y+7	; 0x07
    1654:	98 85       	ldd	r25, Y+8	; 0x08
    1656:	00 97       	sbiw	r24, 0x00	; 0
    1658:	c1 f0       	breq	.+48     	; 0x168a <TMR_vStartTimer+0xd0>
    165a:	58 c1       	rjmp	.+688    	; 0x190c <TMR_vStartTimer+0x352>
    165c:	2f 81       	ldd	r18, Y+7	; 0x07
    165e:	38 85       	ldd	r19, Y+8	; 0x08
    1660:	25 30       	cpi	r18, 0x05	; 5
    1662:	31 05       	cpc	r19, r1
    1664:	09 f4       	brne	.+2      	; 0x1668 <TMR_vStartTimer+0xae>
    1666:	3d c0       	rjmp	.+122    	; 0x16e2 <TMR_vStartTimer+0x128>
    1668:	8f 81       	ldd	r24, Y+7	; 0x07
    166a:	98 85       	ldd	r25, Y+8	; 0x08
    166c:	85 30       	cpi	r24, 0x05	; 5
    166e:	91 05       	cpc	r25, r1
    1670:	7c f1       	brlt	.+94     	; 0x16d0 <TMR_vStartTimer+0x116>
    1672:	2f 81       	ldd	r18, Y+7	; 0x07
    1674:	38 85       	ldd	r19, Y+8	; 0x08
    1676:	26 30       	cpi	r18, 0x06	; 6
    1678:	31 05       	cpc	r19, r1
    167a:	e1 f1       	breq	.+120    	; 0x16f4 <TMR_vStartTimer+0x13a>
    167c:	8f 81       	ldd	r24, Y+7	; 0x07
    167e:	98 85       	ldd	r25, Y+8	; 0x08
    1680:	87 30       	cpi	r24, 0x07	; 7
    1682:	91 05       	cpc	r25, r1
    1684:	09 f4       	brne	.+2      	; 0x1688 <TMR_vStartTimer+0xce>
    1686:	3f c0       	rjmp	.+126    	; 0x1706 <TMR_vStartTimer+0x14c>
    1688:	41 c1       	rjmp	.+642    	; 0x190c <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR0_REG = (TCCR0_REG&0xF8);
    168a:	a3 e5       	ldi	r26, 0x53	; 83
    168c:	b0 e0       	ldi	r27, 0x00	; 0
    168e:	e3 e5       	ldi	r30, 0x53	; 83
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
    1694:	88 7f       	andi	r24, 0xF8	; 248
    1696:	8c 93       	st	X, r24
    1698:	39 c1       	rjmp	.+626    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR0_REG = (TCCR0_REG&0xF8) | 1;
    169a:	a3 e5       	ldi	r26, 0x53	; 83
    169c:	b0 e0       	ldi	r27, 0x00	; 0
    169e:	e3 e5       	ldi	r30, 0x53	; 83
    16a0:	f0 e0       	ldi	r31, 0x00	; 0
    16a2:	80 81       	ld	r24, Z
    16a4:	88 7f       	andi	r24, 0xF8	; 248
    16a6:	81 60       	ori	r24, 0x01	; 1
    16a8:	8c 93       	st	X, r24
    16aa:	30 c1       	rjmp	.+608    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR0_REG = (TCCR0_REG&0xF8) | 2;
    16ac:	a3 e5       	ldi	r26, 0x53	; 83
    16ae:	b0 e0       	ldi	r27, 0x00	; 0
    16b0:	e3 e5       	ldi	r30, 0x53	; 83
    16b2:	f0 e0       	ldi	r31, 0x00	; 0
    16b4:	80 81       	ld	r24, Z
    16b6:	88 7f       	andi	r24, 0xF8	; 248
    16b8:	82 60       	ori	r24, 0x02	; 2
    16ba:	8c 93       	st	X, r24
    16bc:	27 c1       	rjmp	.+590    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR0_REG = (TCCR0_REG&0xF8) | 3;
    16be:	a3 e5       	ldi	r26, 0x53	; 83
    16c0:	b0 e0       	ldi	r27, 0x00	; 0
    16c2:	e3 e5       	ldi	r30, 0x53	; 83
    16c4:	f0 e0       	ldi	r31, 0x00	; 0
    16c6:	80 81       	ld	r24, Z
    16c8:	88 7f       	andi	r24, 0xF8	; 248
    16ca:	83 60       	ori	r24, 0x03	; 3
    16cc:	8c 93       	st	X, r24
    16ce:	1e c1       	rjmp	.+572    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR0_REG = (TCCR0_REG&0xF8) | 4;
    16d0:	a3 e5       	ldi	r26, 0x53	; 83
    16d2:	b0 e0       	ldi	r27, 0x00	; 0
    16d4:	e3 e5       	ldi	r30, 0x53	; 83
    16d6:	f0 e0       	ldi	r31, 0x00	; 0
    16d8:	80 81       	ld	r24, Z
    16da:	88 7f       	andi	r24, 0xF8	; 248
    16dc:	84 60       	ori	r24, 0x04	; 4
    16de:	8c 93       	st	X, r24
    16e0:	15 c1       	rjmp	.+554    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR0_REG = (TCCR0_REG&0xF8) | 5;
    16e2:	a3 e5       	ldi	r26, 0x53	; 83
    16e4:	b0 e0       	ldi	r27, 0x00	; 0
    16e6:	e3 e5       	ldi	r30, 0x53	; 83
    16e8:	f0 e0       	ldi	r31, 0x00	; 0
    16ea:	80 81       	ld	r24, Z
    16ec:	88 7f       	andi	r24, 0xF8	; 248
    16ee:	85 60       	ori	r24, 0x05	; 5
    16f0:	8c 93       	st	X, r24
    16f2:	0c c1       	rjmp	.+536    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_FALLING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 6;
    16f4:	a3 e5       	ldi	r26, 0x53	; 83
    16f6:	b0 e0       	ldi	r27, 0x00	; 0
    16f8:	e3 e5       	ldi	r30, 0x53	; 83
    16fa:	f0 e0       	ldi	r31, 0x00	; 0
    16fc:	80 81       	ld	r24, Z
    16fe:	88 7f       	andi	r24, 0xF8	; 248
    1700:	86 60       	ori	r24, 0x06	; 6
    1702:	8c 93       	st	X, r24
    1704:	03 c1       	rjmp	.+518    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_RISING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 7;
    1706:	a3 e5       	ldi	r26, 0x53	; 83
    1708:	b0 e0       	ldi	r27, 0x00	; 0
    170a:	e3 e5       	ldi	r30, 0x53	; 83
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 81       	ld	r24, Z
    1710:	87 60       	ori	r24, 0x07	; 7
    1712:	8c 93       	st	X, r24
    1714:	fb c0       	rjmp	.+502    	; 0x190c <TMR_vStartTimer+0x352>
			}
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			switch(TMR->TMR_Prescale){
    1716:	e9 81       	ldd	r30, Y+1	; 0x01
    1718:	fa 81       	ldd	r31, Y+2	; 0x02
    171a:	81 81       	ldd	r24, Z+1	; 0x01
    171c:	28 2f       	mov	r18, r24
    171e:	30 e0       	ldi	r19, 0x00	; 0
    1720:	3e 83       	std	Y+6, r19	; 0x06
    1722:	2d 83       	std	Y+5, r18	; 0x05
    1724:	8d 81       	ldd	r24, Y+5	; 0x05
    1726:	9e 81       	ldd	r25, Y+6	; 0x06
    1728:	83 30       	cpi	r24, 0x03	; 3
    172a:	91 05       	cpc	r25, r1
    172c:	09 f4       	brne	.+2      	; 0x1730 <TMR_vStartTimer+0x176>
    172e:	45 c0       	rjmp	.+138    	; 0x17ba <TMR_vStartTimer+0x200>
    1730:	2d 81       	ldd	r18, Y+5	; 0x05
    1732:	3e 81       	ldd	r19, Y+6	; 0x06
    1734:	24 30       	cpi	r18, 0x04	; 4
    1736:	31 05       	cpc	r19, r1
    1738:	7c f4       	brge	.+30     	; 0x1758 <TMR_vStartTimer+0x19e>
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	81 30       	cpi	r24, 0x01	; 1
    1740:	91 05       	cpc	r25, r1
    1742:	49 f1       	breq	.+82     	; 0x1796 <TMR_vStartTimer+0x1dc>
    1744:	2d 81       	ldd	r18, Y+5	; 0x05
    1746:	3e 81       	ldd	r19, Y+6	; 0x06
    1748:	22 30       	cpi	r18, 0x02	; 2
    174a:	31 05       	cpc	r19, r1
    174c:	6c f5       	brge	.+90     	; 0x17a8 <TMR_vStartTimer+0x1ee>
    174e:	8d 81       	ldd	r24, Y+5	; 0x05
    1750:	9e 81       	ldd	r25, Y+6	; 0x06
    1752:	00 97       	sbiw	r24, 0x00	; 0
    1754:	c1 f0       	breq	.+48     	; 0x1786 <TMR_vStartTimer+0x1cc>
    1756:	da c0       	rjmp	.+436    	; 0x190c <TMR_vStartTimer+0x352>
    1758:	2d 81       	ldd	r18, Y+5	; 0x05
    175a:	3e 81       	ldd	r19, Y+6	; 0x06
    175c:	25 30       	cpi	r18, 0x05	; 5
    175e:	31 05       	cpc	r19, r1
    1760:	09 f4       	brne	.+2      	; 0x1764 <TMR_vStartTimer+0x1aa>
    1762:	3d c0       	rjmp	.+122    	; 0x17de <TMR_vStartTimer+0x224>
    1764:	8d 81       	ldd	r24, Y+5	; 0x05
    1766:	9e 81       	ldd	r25, Y+6	; 0x06
    1768:	85 30       	cpi	r24, 0x05	; 5
    176a:	91 05       	cpc	r25, r1
    176c:	7c f1       	brlt	.+94     	; 0x17cc <TMR_vStartTimer+0x212>
    176e:	2d 81       	ldd	r18, Y+5	; 0x05
    1770:	3e 81       	ldd	r19, Y+6	; 0x06
    1772:	26 30       	cpi	r18, 0x06	; 6
    1774:	31 05       	cpc	r19, r1
    1776:	e1 f1       	breq	.+120    	; 0x17f0 <TMR_vStartTimer+0x236>
    1778:	8d 81       	ldd	r24, Y+5	; 0x05
    177a:	9e 81       	ldd	r25, Y+6	; 0x06
    177c:	87 30       	cpi	r24, 0x07	; 7
    177e:	91 05       	cpc	r25, r1
    1780:	09 f4       	brne	.+2      	; 0x1784 <TMR_vStartTimer+0x1ca>
    1782:	3f c0       	rjmp	.+126    	; 0x1802 <TMR_vStartTimer+0x248>
    1784:	c3 c0       	rjmp	.+390    	; 0x190c <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR1B_REG = (TCCR1B_REG&0xF8);
    1786:	ae e4       	ldi	r26, 0x4E	; 78
    1788:	b0 e0       	ldi	r27, 0x00	; 0
    178a:	ee e4       	ldi	r30, 0x4E	; 78
    178c:	f0 e0       	ldi	r31, 0x00	; 0
    178e:	80 81       	ld	r24, Z
    1790:	88 7f       	andi	r24, 0xF8	; 248
    1792:	8c 93       	st	X, r24
    1794:	bb c0       	rjmp	.+374    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
    1796:	ae e4       	ldi	r26, 0x4E	; 78
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	ee e4       	ldi	r30, 0x4E	; 78
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	88 7f       	andi	r24, 0xF8	; 248
    17a2:	81 60       	ori	r24, 0x01	; 1
    17a4:	8c 93       	st	X, r24
    17a6:	b2 c0       	rjmp	.+356    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 2;
    17a8:	ae e4       	ldi	r26, 0x4E	; 78
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	ee e4       	ldi	r30, 0x4E	; 78
    17ae:	f0 e0       	ldi	r31, 0x00	; 0
    17b0:	80 81       	ld	r24, Z
    17b2:	88 7f       	andi	r24, 0xF8	; 248
    17b4:	82 60       	ori	r24, 0x02	; 2
    17b6:	8c 93       	st	X, r24
    17b8:	a9 c0       	rjmp	.+338    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 3;
    17ba:	ae e4       	ldi	r26, 0x4E	; 78
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	ee e4       	ldi	r30, 0x4E	; 78
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	88 7f       	andi	r24, 0xF8	; 248
    17c6:	83 60       	ori	r24, 0x03	; 3
    17c8:	8c 93       	st	X, r24
    17ca:	a0 c0       	rjmp	.+320    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 4;
    17cc:	ae e4       	ldi	r26, 0x4E	; 78
    17ce:	b0 e0       	ldi	r27, 0x00	; 0
    17d0:	ee e4       	ldi	r30, 0x4E	; 78
    17d2:	f0 e0       	ldi	r31, 0x00	; 0
    17d4:	80 81       	ld	r24, Z
    17d6:	88 7f       	andi	r24, 0xF8	; 248
    17d8:	84 60       	ori	r24, 0x04	; 4
    17da:	8c 93       	st	X, r24
    17dc:	97 c0       	rjmp	.+302    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 5;
    17de:	ae e4       	ldi	r26, 0x4E	; 78
    17e0:	b0 e0       	ldi	r27, 0x00	; 0
    17e2:	ee e4       	ldi	r30, 0x4E	; 78
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	80 81       	ld	r24, Z
    17e8:	88 7f       	andi	r24, 0xF8	; 248
    17ea:	85 60       	ori	r24, 0x05	; 5
    17ec:	8c 93       	st	X, r24
    17ee:	8e c0       	rjmp	.+284    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_FALLING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 6;
    17f0:	ae e4       	ldi	r26, 0x4E	; 78
    17f2:	b0 e0       	ldi	r27, 0x00	; 0
    17f4:	ee e4       	ldi	r30, 0x4E	; 78
    17f6:	f0 e0       	ldi	r31, 0x00	; 0
    17f8:	80 81       	ld	r24, Z
    17fa:	88 7f       	andi	r24, 0xF8	; 248
    17fc:	86 60       	ori	r24, 0x06	; 6
    17fe:	8c 93       	st	X, r24
    1800:	85 c0       	rjmp	.+266    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_EXT_RISING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 7;
    1802:	ae e4       	ldi	r26, 0x4E	; 78
    1804:	b0 e0       	ldi	r27, 0x00	; 0
    1806:	ee e4       	ldi	r30, 0x4E	; 78
    1808:	f0 e0       	ldi	r31, 0x00	; 0
    180a:	80 81       	ld	r24, Z
    180c:	87 60       	ori	r24, 0x07	; 7
    180e:	8c 93       	st	X, r24
    1810:	7d c0       	rjmp	.+250    	; 0x190c <TMR_vStartTimer+0x352>
			default: /* Do Nothing */ break;
			}
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			switch(TMR->TMR_Prescale){
    1812:	e9 81       	ldd	r30, Y+1	; 0x01
    1814:	fa 81       	ldd	r31, Y+2	; 0x02
    1816:	81 81       	ldd	r24, Z+1	; 0x01
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	3c 83       	std	Y+4, r19	; 0x04
    181e:	2b 83       	std	Y+3, r18	; 0x03
    1820:	8b 81       	ldd	r24, Y+3	; 0x03
    1822:	9c 81       	ldd	r25, Y+4	; 0x04
    1824:	83 30       	cpi	r24, 0x03	; 3
    1826:	91 05       	cpc	r25, r1
    1828:	09 f4       	brne	.+2      	; 0x182c <TMR_vStartTimer+0x272>
    182a:	4e c0       	rjmp	.+156    	; 0x18c8 <TMR_vStartTimer+0x30e>
    182c:	2b 81       	ldd	r18, Y+3	; 0x03
    182e:	3c 81       	ldd	r19, Y+4	; 0x04
    1830:	24 30       	cpi	r18, 0x04	; 4
    1832:	31 05       	cpc	r19, r1
    1834:	7c f4       	brge	.+30     	; 0x1854 <TMR_vStartTimer+0x29a>
    1836:	8b 81       	ldd	r24, Y+3	; 0x03
    1838:	9c 81       	ldd	r25, Y+4	; 0x04
    183a:	81 30       	cpi	r24, 0x01	; 1
    183c:	91 05       	cpc	r25, r1
    183e:	49 f1       	breq	.+82     	; 0x1892 <TMR_vStartTimer+0x2d8>
    1840:	2b 81       	ldd	r18, Y+3	; 0x03
    1842:	3c 81       	ldd	r19, Y+4	; 0x04
    1844:	22 30       	cpi	r18, 0x02	; 2
    1846:	31 05       	cpc	r19, r1
    1848:	6c f5       	brge	.+90     	; 0x18a4 <TMR_vStartTimer+0x2ea>
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	00 97       	sbiw	r24, 0x00	; 0
    1850:	c1 f0       	breq	.+48     	; 0x1882 <TMR_vStartTimer+0x2c8>
    1852:	5c c0       	rjmp	.+184    	; 0x190c <TMR_vStartTimer+0x352>
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	25 30       	cpi	r18, 0x05	; 5
    185a:	31 05       	cpc	r19, r1
    185c:	09 f4       	brne	.+2      	; 0x1860 <TMR_vStartTimer+0x2a6>
    185e:	4f c0       	rjmp	.+158    	; 0x18fe <TMR_vStartTimer+0x344>
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	9c 81       	ldd	r25, Y+4	; 0x04
    1864:	85 30       	cpi	r24, 0x05	; 5
    1866:	91 05       	cpc	r25, r1
    1868:	0c f4       	brge	.+2      	; 0x186c <TMR_vStartTimer+0x2b2>
    186a:	40 c0       	rjmp	.+128    	; 0x18ec <TMR_vStartTimer+0x332>
    186c:	2b 81       	ldd	r18, Y+3	; 0x03
    186e:	3c 81       	ldd	r19, Y+4	; 0x04
    1870:	28 30       	cpi	r18, 0x08	; 8
    1872:	31 05       	cpc	r19, r1
    1874:	01 f1       	breq	.+64     	; 0x18b6 <TMR_vStartTimer+0x2fc>
    1876:	8b 81       	ldd	r24, Y+3	; 0x03
    1878:	9c 81       	ldd	r25, Y+4	; 0x04
    187a:	89 30       	cpi	r24, 0x09	; 9
    187c:	91 05       	cpc	r25, r1
    187e:	69 f1       	breq	.+90     	; 0x18da <TMR_vStartTimer+0x320>
    1880:	45 c0       	rjmp	.+138    	; 0x190c <TMR_vStartTimer+0x352>
			case TMR_PRE_NO_CLK:
				TCCR2_REG = (TCCR2_REG&0xF8);
    1882:	a5 e4       	ldi	r26, 0x45	; 69
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	e5 e4       	ldi	r30, 0x45	; 69
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	88 7f       	andi	r24, 0xF8	; 248
    188e:	8c 93       	st	X, r24
    1890:	3d c0       	rjmp	.+122    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_0:
				TCCR2_REG = (TCCR2_REG&0xF8) | 1;
    1892:	a5 e4       	ldi	r26, 0x45	; 69
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e5 e4       	ldi	r30, 0x45	; 69
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	88 7f       	andi	r24, 0xF8	; 248
    189e:	81 60       	ori	r24, 0x01	; 1
    18a0:	8c 93       	st	X, r24
    18a2:	34 c0       	rjmp	.+104    	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_8:
				TCCR2_REG = (TCCR2_REG&0xF8) | 2;
    18a4:	a5 e4       	ldi	r26, 0x45	; 69
    18a6:	b0 e0       	ldi	r27, 0x00	; 0
    18a8:	e5 e4       	ldi	r30, 0x45	; 69
    18aa:	f0 e0       	ldi	r31, 0x00	; 0
    18ac:	80 81       	ld	r24, Z
    18ae:	88 7f       	andi	r24, 0xF8	; 248
    18b0:	82 60       	ori	r24, 0x02	; 2
    18b2:	8c 93       	st	X, r24
    18b4:	2b c0       	rjmp	.+86     	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_32:
				TCCR2_REG = (TCCR2_REG&0xF8) | 3;
    18b6:	a5 e4       	ldi	r26, 0x45	; 69
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e5 e4       	ldi	r30, 0x45	; 69
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	88 7f       	andi	r24, 0xF8	; 248
    18c2:	83 60       	ori	r24, 0x03	; 3
    18c4:	8c 93       	st	X, r24
    18c6:	22 c0       	rjmp	.+68     	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_64:
				TCCR2_REG = (TCCR2_REG&0xF8) | 4;
    18c8:	a5 e4       	ldi	r26, 0x45	; 69
    18ca:	b0 e0       	ldi	r27, 0x00	; 0
    18cc:	e5 e4       	ldi	r30, 0x45	; 69
    18ce:	f0 e0       	ldi	r31, 0x00	; 0
    18d0:	80 81       	ld	r24, Z
    18d2:	88 7f       	andi	r24, 0xF8	; 248
    18d4:	84 60       	ori	r24, 0x04	; 4
    18d6:	8c 93       	st	X, r24
    18d8:	19 c0       	rjmp	.+50     	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_128:
				TCCR2_REG = (TCCR2_REG&0xF8) | 5;
    18da:	a5 e4       	ldi	r26, 0x45	; 69
    18dc:	b0 e0       	ldi	r27, 0x00	; 0
    18de:	e5 e4       	ldi	r30, 0x45	; 69
    18e0:	f0 e0       	ldi	r31, 0x00	; 0
    18e2:	80 81       	ld	r24, Z
    18e4:	88 7f       	andi	r24, 0xF8	; 248
    18e6:	85 60       	ori	r24, 0x05	; 5
    18e8:	8c 93       	st	X, r24
    18ea:	10 c0       	rjmp	.+32     	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_256:
				TCCR2_REG = (TCCR2_REG&0xF8) | 6;
    18ec:	a5 e4       	ldi	r26, 0x45	; 69
    18ee:	b0 e0       	ldi	r27, 0x00	; 0
    18f0:	e5 e4       	ldi	r30, 0x45	; 69
    18f2:	f0 e0       	ldi	r31, 0x00	; 0
    18f4:	80 81       	ld	r24, Z
    18f6:	88 7f       	andi	r24, 0xF8	; 248
    18f8:	86 60       	ori	r24, 0x06	; 6
    18fa:	8c 93       	st	X, r24
    18fc:	07 c0       	rjmp	.+14     	; 0x190c <TMR_vStartTimer+0x352>
				break;
			case TMR_PRE_1024:
				TCCR2_REG = (TCCR2_REG&0xF8) | 7;
    18fe:	a5 e4       	ldi	r26, 0x45	; 69
    1900:	b0 e0       	ldi	r27, 0x00	; 0
    1902:	e5 e4       	ldi	r30, 0x45	; 69
    1904:	f0 e0       	ldi	r31, 0x00	; 0
    1906:	80 81       	ld	r24, Z
    1908:	87 60       	ori	r24, 0x07	; 7
    190a:	8c 93       	st	X, r24
			}
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    190c:	2a 96       	adiw	r28, 0x0a	; 10
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <TMR_vStop>:

void TMR_vStop(const TMR_cfg_t *TMR){
    191e:	df 93       	push	r29
    1920:	cf 93       	push	r28
    1922:	00 d0       	rcall	.+0      	; 0x1924 <TMR_vStop+0x6>
    1924:	00 d0       	rcall	.+0      	; 0x1926 <TMR_vStop+0x8>
    1926:	cd b7       	in	r28, 0x3d	; 61
    1928:	de b7       	in	r29, 0x3e	; 62
    192a:	9a 83       	std	Y+2, r25	; 0x02
    192c:	89 83       	std	Y+1, r24	; 0x01
	if(TMR != NULL){
    192e:	89 81       	ldd	r24, Y+1	; 0x01
    1930:	9a 81       	ldd	r25, Y+2	; 0x02
    1932:	00 97       	sbiw	r24, 0x00	; 0
    1934:	99 f1       	breq	.+102    	; 0x199c <TMR_vStop+0x7e>
		switch(TMR->TMR_TimerChannel){
    1936:	e9 81       	ldd	r30, Y+1	; 0x01
    1938:	fa 81       	ldd	r31, Y+2	; 0x02
    193a:	80 81       	ld	r24, Z
    193c:	28 2f       	mov	r18, r24
    193e:	30 e0       	ldi	r19, 0x00	; 0
    1940:	3c 83       	std	Y+4, r19	; 0x04
    1942:	2b 83       	std	Y+3, r18	; 0x03
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	9c 81       	ldd	r25, Y+4	; 0x04
    1948:	85 30       	cpi	r24, 0x05	; 5
    194a:	91 05       	cpc	r25, r1
    194c:	54 f4       	brge	.+20     	; 0x1962 <TMR_vStop+0x44>
    194e:	2b 81       	ldd	r18, Y+3	; 0x03
    1950:	3c 81       	ldd	r19, Y+4	; 0x04
    1952:	22 30       	cpi	r18, 0x02	; 2
    1954:	31 05       	cpc	r19, r1
    1956:	9c f4       	brge	.+38     	; 0x197e <TMR_vStop+0x60>
    1958:	8b 81       	ldd	r24, Y+3	; 0x03
    195a:	9c 81       	ldd	r25, Y+4	; 0x04
    195c:	99 23       	and	r25, r25
    195e:	f4 f0       	brlt	.+60     	; 0x199c <TMR_vStop+0x7e>
    1960:	06 c0       	rjmp	.+12     	; 0x196e <TMR_vStop+0x50>
    1962:	2b 81       	ldd	r18, Y+3	; 0x03
    1964:	3c 81       	ldd	r19, Y+4	; 0x04
    1966:	27 30       	cpi	r18, 0x07	; 7
    1968:	31 05       	cpc	r19, r1
    196a:	c4 f4       	brge	.+48     	; 0x199c <TMR_vStop+0x7e>
    196c:	10 c0       	rjmp	.+32     	; 0x198e <TMR_vStop+0x70>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			TCCR0_REG &= 0xF8;
    196e:	a3 e5       	ldi	r26, 0x53	; 83
    1970:	b0 e0       	ldi	r27, 0x00	; 0
    1972:	e3 e5       	ldi	r30, 0x53	; 83
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	88 7f       	andi	r24, 0xF8	; 248
    197a:	8c 93       	st	X, r24
    197c:	0f c0       	rjmp	.+30     	; 0x199c <TMR_vStop+0x7e>
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			TCCR1B_REG &= 0xF8;
    197e:	ae e4       	ldi	r26, 0x4E	; 78
    1980:	b0 e0       	ldi	r27, 0x00	; 0
    1982:	ee e4       	ldi	r30, 0x4E	; 78
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 81       	ld	r24, Z
    1988:	88 7f       	andi	r24, 0xF8	; 248
    198a:	8c 93       	st	X, r24
    198c:	07 c0       	rjmp	.+14     	; 0x199c <TMR_vStop+0x7e>
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			TCCR2_REG &= 0xF8;
    198e:	a5 e4       	ldi	r26, 0x45	; 69
    1990:	b0 e0       	ldi	r27, 0x00	; 0
    1992:	e5 e4       	ldi	r30, 0x45	; 69
    1994:	f0 e0       	ldi	r31, 0x00	; 0
    1996:	80 81       	ld	r24, Z
    1998:	88 7f       	andi	r24, 0xF8	; 248
    199a:	8c 93       	st	X, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    199c:	0f 90       	pop	r0
    199e:	0f 90       	pop	r0
    19a0:	0f 90       	pop	r0
    19a2:	0f 90       	pop	r0
    19a4:	cf 91       	pop	r28
    19a6:	df 91       	pop	r29
    19a8:	08 95       	ret

000019aa <TMR_vSetICRValue>:

void TMR_vSetICRValue(const TMR_cfg_t *TMR, u16 Copy_u16ICRValue){
    19aa:	df 93       	push	r29
    19ac:	cf 93       	push	r28
    19ae:	00 d0       	rcall	.+0      	; 0x19b0 <TMR_vSetICRValue+0x6>
    19b0:	00 d0       	rcall	.+0      	; 0x19b2 <TMR_vSetICRValue+0x8>
    19b2:	cd b7       	in	r28, 0x3d	; 61
    19b4:	de b7       	in	r29, 0x3e	; 62
    19b6:	9a 83       	std	Y+2, r25	; 0x02
    19b8:	89 83       	std	Y+1, r24	; 0x01
    19ba:	7c 83       	std	Y+4, r23	; 0x04
    19bc:	6b 83       	std	Y+3, r22	; 0x03
	if(TMR != NULL){
    19be:	89 81       	ldd	r24, Y+1	; 0x01
    19c0:	9a 81       	ldd	r25, Y+2	; 0x02
    19c2:	00 97       	sbiw	r24, 0x00	; 0
    19c4:	79 f0       	breq	.+30     	; 0x19e4 <TMR_vSetICRValue+0x3a>
		switch(TMR->TMR_TimerChannel){
    19c6:	e9 81       	ldd	r30, Y+1	; 0x01
    19c8:	fa 81       	ldd	r31, Y+2	; 0x02
    19ca:	80 81       	ld	r24, Z
    19cc:	88 2f       	mov	r24, r24
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	02 97       	sbiw	r24, 0x02	; 2
    19d2:	83 30       	cpi	r24, 0x03	; 3
    19d4:	91 05       	cpc	r25, r1
    19d6:	30 f4       	brcc	.+12     	; 0x19e4 <TMR_vSetICRValue+0x3a>

		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			ICR1_REG = Copy_u16ICRValue;
    19d8:	e6 e4       	ldi	r30, 0x46	; 70
    19da:	f0 e0       	ldi	r31, 0x00	; 0
    19dc:	8b 81       	ldd	r24, Y+3	; 0x03
    19de:	9c 81       	ldd	r25, Y+4	; 0x04
    19e0:	91 83       	std	Z+1, r25	; 0x01
    19e2:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    19e4:	0f 90       	pop	r0
    19e6:	0f 90       	pop	r0
    19e8:	0f 90       	pop	r0
    19ea:	0f 90       	pop	r0
    19ec:	cf 91       	pop	r28
    19ee:	df 91       	pop	r29
    19f0:	08 95       	ret

000019f2 <TMR_vSetOCRValue>:

void TMR_vSetOCRValue(const TMR_cfg_t *TMR, u16 Copy_u16OCRValue){
    19f2:	df 93       	push	r29
    19f4:	cf 93       	push	r28
    19f6:	00 d0       	rcall	.+0      	; 0x19f8 <TMR_vSetOCRValue+0x6>
    19f8:	00 d0       	rcall	.+0      	; 0x19fa <TMR_vSetOCRValue+0x8>
    19fa:	00 d0       	rcall	.+0      	; 0x19fc <TMR_vSetOCRValue+0xa>
    19fc:	cd b7       	in	r28, 0x3d	; 61
    19fe:	de b7       	in	r29, 0x3e	; 62
    1a00:	9a 83       	std	Y+2, r25	; 0x02
    1a02:	89 83       	std	Y+1, r24	; 0x01
    1a04:	7c 83       	std	Y+4, r23	; 0x04
    1a06:	6b 83       	std	Y+3, r22	; 0x03
	if(TMR != NULL){
    1a08:	89 81       	ldd	r24, Y+1	; 0x01
    1a0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1a0c:	00 97       	sbiw	r24, 0x00	; 0
    1a0e:	61 f1       	breq	.+88     	; 0x1a68 <TMR_vSetOCRValue+0x76>
		switch(TMR->TMR_TimerChannel){
    1a10:	e9 81       	ldd	r30, Y+1	; 0x01
    1a12:	fa 81       	ldd	r31, Y+2	; 0x02
    1a14:	80 81       	ld	r24, Z
    1a16:	28 2f       	mov	r18, r24
    1a18:	30 e0       	ldi	r19, 0x00	; 0
    1a1a:	3e 83       	std	Y+6, r19	; 0x06
    1a1c:	2d 83       	std	Y+5, r18	; 0x05
    1a1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1a20:	9e 81       	ldd	r25, Y+6	; 0x06
    1a22:	85 30       	cpi	r24, 0x05	; 5
    1a24:	91 05       	cpc	r25, r1
    1a26:	54 f4       	brge	.+20     	; 0x1a3c <TMR_vSetOCRValue+0x4a>
    1a28:	2d 81       	ldd	r18, Y+5	; 0x05
    1a2a:	3e 81       	ldd	r19, Y+6	; 0x06
    1a2c:	22 30       	cpi	r18, 0x02	; 2
    1a2e:	31 05       	cpc	r19, r1
    1a30:	84 f4       	brge	.+32     	; 0x1a52 <TMR_vSetOCRValue+0x60>
    1a32:	8d 81       	ldd	r24, Y+5	; 0x05
    1a34:	9e 81       	ldd	r25, Y+6	; 0x06
    1a36:	99 23       	and	r25, r25
    1a38:	bc f0       	brlt	.+46     	; 0x1a68 <TMR_vSetOCRValue+0x76>
    1a3a:	06 c0       	rjmp	.+12     	; 0x1a48 <TMR_vSetOCRValue+0x56>
    1a3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1a3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1a40:	27 30       	cpi	r18, 0x07	; 7
    1a42:	31 05       	cpc	r19, r1
    1a44:	8c f4       	brge	.+34     	; 0x1a68 <TMR_vSetOCRValue+0x76>
    1a46:	0c c0       	rjmp	.+24     	; 0x1a60 <TMR_vSetOCRValue+0x6e>
		case TIMER0_NORMAL:
		case TIMER0_CTC:
			OCR0_REG = (u8)Copy_u16OCRValue;
    1a48:	ec e5       	ldi	r30, 0x5C	; 92
    1a4a:	f0 e0       	ldi	r31, 0x00	; 0
    1a4c:	8b 81       	ldd	r24, Y+3	; 0x03
    1a4e:	80 83       	st	Z, r24
    1a50:	0b c0       	rjmp	.+22     	; 0x1a68 <TMR_vSetOCRValue+0x76>
			break;
		case TIMER1_NORMAL:
		case TIMER1_CTC_OCR:
		case TIMER1_CTC_ICR:
			OCR1A_REG = Copy_u16OCRValue;
    1a52:	ea e4       	ldi	r30, 0x4A	; 74
    1a54:	f0 e0       	ldi	r31, 0x00	; 0
    1a56:	8b 81       	ldd	r24, Y+3	; 0x03
    1a58:	9c 81       	ldd	r25, Y+4	; 0x04
    1a5a:	91 83       	std	Z+1, r25	; 0x01
    1a5c:	80 83       	st	Z, r24
    1a5e:	04 c0       	rjmp	.+8      	; 0x1a68 <TMR_vSetOCRValue+0x76>
			break;
		case TIMER2_NORMAL:
		case TIMER2_CTC:
			OCR2_REG = (u8)Copy_u16OCRValue;
    1a60:	e3 e4       	ldi	r30, 0x43	; 67
    1a62:	f0 e0       	ldi	r31, 0x00	; 0
    1a64:	8b 81       	ldd	r24, Y+3	; 0x03
    1a66:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    1a68:	26 96       	adiw	r28, 0x06	; 6
    1a6a:	0f b6       	in	r0, 0x3f	; 63
    1a6c:	f8 94       	cli
    1a6e:	de bf       	out	0x3e, r29	; 62
    1a70:	0f be       	out	0x3f, r0	; 63
    1a72:	cd bf       	out	0x3d, r28	; 61
    1a74:	cf 91       	pop	r28
    1a76:	df 91       	pop	r29
    1a78:	08 95       	ret

00001a7a <PWM_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "PWM_interface.h"

void PWM_vInit(const PWM_cfg_t *PWM){
    1a7a:	df 93       	push	r29
    1a7c:	cf 93       	push	r28
    1a7e:	00 d0       	rcall	.+0      	; 0x1a80 <PWM_vInit+0x6>
    1a80:	00 d0       	rcall	.+0      	; 0x1a82 <PWM_vInit+0x8>
    1a82:	cd b7       	in	r28, 0x3d	; 61
    1a84:	de b7       	in	r29, 0x3e	; 62
    1a86:	9a 83       	std	Y+2, r25	; 0x02
    1a88:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    1a8a:	89 81       	ldd	r24, Y+1	; 0x01
    1a8c:	9a 81       	ldd	r25, Y+2	; 0x02
    1a8e:	00 97       	sbiw	r24, 0x00	; 0
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <PWM_vInit+0x1a>
    1a92:	2d c4       	rjmp	.+2138   	; 0x22ee <PWM_vInit+0x874>
		/* Set PWM Mode */
		switch(PWM->PWM_TimerChannel){
    1a94:	e9 81       	ldd	r30, Y+1	; 0x01
    1a96:	fa 81       	ldd	r31, Y+2	; 0x02
    1a98:	80 81       	ld	r24, Z
    1a9a:	28 2f       	mov	r18, r24
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	3c 83       	std	Y+4, r19	; 0x04
    1aa0:	2b 83       	std	Y+3, r18	; 0x03
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	9c 81       	ldd	r25, Y+4	; 0x04
    1aa6:	87 30       	cpi	r24, 0x07	; 7
    1aa8:	91 05       	cpc	r25, r1
    1aaa:	09 f4       	brne	.+2      	; 0x1aae <PWM_vInit+0x34>
    1aac:	04 c2       	rjmp	.+1032   	; 0x1eb6 <PWM_vInit+0x43c>
    1aae:	2b 81       	ldd	r18, Y+3	; 0x03
    1ab0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ab2:	28 30       	cpi	r18, 0x08	; 8
    1ab4:	31 05       	cpc	r19, r1
    1ab6:	54 f5       	brge	.+84     	; 0x1b0c <PWM_vInit+0x92>
    1ab8:	8b 81       	ldd	r24, Y+3	; 0x03
    1aba:	9c 81       	ldd	r25, Y+4	; 0x04
    1abc:	83 30       	cpi	r24, 0x03	; 3
    1abe:	91 05       	cpc	r25, r1
    1ac0:	09 f4       	brne	.+2      	; 0x1ac4 <PWM_vInit+0x4a>
    1ac2:	00 c1       	rjmp	.+512    	; 0x1cc4 <PWM_vInit+0x24a>
    1ac4:	2b 81       	ldd	r18, Y+3	; 0x03
    1ac6:	3c 81       	ldd	r19, Y+4	; 0x04
    1ac8:	24 30       	cpi	r18, 0x04	; 4
    1aca:	31 05       	cpc	r19, r1
    1acc:	94 f4       	brge	.+36     	; 0x1af2 <PWM_vInit+0x78>
    1ace:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ad2:	81 30       	cpi	r24, 0x01	; 1
    1ad4:	91 05       	cpc	r25, r1
    1ad6:	09 f4       	brne	.+2      	; 0x1ada <PWM_vInit+0x60>
    1ad8:	81 c0       	rjmp	.+258    	; 0x1bdc <PWM_vInit+0x162>
    1ada:	2b 81       	ldd	r18, Y+3	; 0x03
    1adc:	3c 81       	ldd	r19, Y+4	; 0x04
    1ade:	22 30       	cpi	r18, 0x02	; 2
    1ae0:	31 05       	cpc	r19, r1
    1ae2:	0c f0       	brlt	.+2      	; 0x1ae6 <PWM_vInit+0x6c>
    1ae4:	b1 c0       	rjmp	.+354    	; 0x1c48 <PWM_vInit+0x1ce>
    1ae6:	8b 81       	ldd	r24, Y+3	; 0x03
    1ae8:	9c 81       	ldd	r25, Y+4	; 0x04
    1aea:	00 97       	sbiw	r24, 0x00	; 0
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <PWM_vInit+0x76>
    1aee:	3f c0       	rjmp	.+126    	; 0x1b6e <PWM_vInit+0xf4>
    1af0:	fe c3       	rjmp	.+2044   	; 0x22ee <PWM_vInit+0x874>
    1af2:	2b 81       	ldd	r18, Y+3	; 0x03
    1af4:	3c 81       	ldd	r19, Y+4	; 0x04
    1af6:	25 30       	cpi	r18, 0x05	; 5
    1af8:	31 05       	cpc	r19, r1
    1afa:	09 f4       	brne	.+2      	; 0x1afe <PWM_vInit+0x84>
    1afc:	5e c1       	rjmp	.+700    	; 0x1dba <PWM_vInit+0x340>
    1afe:	8b 81       	ldd	r24, Y+3	; 0x03
    1b00:	9c 81       	ldd	r25, Y+4	; 0x04
    1b02:	86 30       	cpi	r24, 0x06	; 6
    1b04:	91 05       	cpc	r25, r1
    1b06:	0c f0       	brlt	.+2      	; 0x1b0a <PWM_vInit+0x90>
    1b08:	97 c1       	rjmp	.+814    	; 0x1e38 <PWM_vInit+0x3be>
    1b0a:	1a c1       	rjmp	.+564    	; 0x1d40 <PWM_vInit+0x2c6>
    1b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b10:	2b 30       	cpi	r18, 0x0B	; 11
    1b12:	31 05       	cpc	r19, r1
    1b14:	09 f4       	brne	.+2      	; 0x1b18 <PWM_vInit+0x9e>
    1b16:	c9 c2       	rjmp	.+1426   	; 0x20aa <PWM_vInit+0x630>
    1b18:	8b 81       	ldd	r24, Y+3	; 0x03
    1b1a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1c:	8c 30       	cpi	r24, 0x0C	; 12
    1b1e:	91 05       	cpc	r25, r1
    1b20:	6c f4       	brge	.+26     	; 0x1b3c <PWM_vInit+0xc2>
    1b22:	2b 81       	ldd	r18, Y+3	; 0x03
    1b24:	3c 81       	ldd	r19, Y+4	; 0x04
    1b26:	29 30       	cpi	r18, 0x09	; 9
    1b28:	31 05       	cpc	r19, r1
    1b2a:	09 f4       	brne	.+2      	; 0x1b2e <PWM_vInit+0xb4>
    1b2c:	40 c2       	rjmp	.+1152   	; 0x1fae <PWM_vInit+0x534>
    1b2e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b30:	9c 81       	ldd	r25, Y+4	; 0x04
    1b32:	8a 30       	cpi	r24, 0x0A	; 10
    1b34:	91 05       	cpc	r25, r1
    1b36:	0c f0       	brlt	.+2      	; 0x1b3a <PWM_vInit+0xc0>
    1b38:	79 c2       	rjmp	.+1266   	; 0x202c <PWM_vInit+0x5b2>
    1b3a:	fb c1       	rjmp	.+1014   	; 0x1f32 <PWM_vInit+0x4b8>
    1b3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b40:	2d 30       	cpi	r18, 0x0D	; 13
    1b42:	31 05       	cpc	r19, r1
    1b44:	09 f4       	brne	.+2      	; 0x1b48 <PWM_vInit+0xce>
    1b46:	2d c3       	rjmp	.+1626   	; 0x21a2 <PWM_vInit+0x728>
    1b48:	8b 81       	ldd	r24, Y+3	; 0x03
    1b4a:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4c:	8d 30       	cpi	r24, 0x0D	; 13
    1b4e:	91 05       	cpc	r25, r1
    1b50:	0c f4       	brge	.+2      	; 0x1b54 <PWM_vInit+0xda>
    1b52:	e9 c2       	rjmp	.+1490   	; 0x2126 <PWM_vInit+0x6ac>
    1b54:	2b 81       	ldd	r18, Y+3	; 0x03
    1b56:	3c 81       	ldd	r19, Y+4	; 0x04
    1b58:	2e 30       	cpi	r18, 0x0E	; 14
    1b5a:	31 05       	cpc	r19, r1
    1b5c:	09 f4       	brne	.+2      	; 0x1b60 <PWM_vInit+0xe6>
    1b5e:	5e c3       	rjmp	.+1724   	; 0x221c <PWM_vInit+0x7a2>
    1b60:	8b 81       	ldd	r24, Y+3	; 0x03
    1b62:	9c 81       	ldd	r25, Y+4	; 0x04
    1b64:	8f 30       	cpi	r24, 0x0F	; 15
    1b66:	91 05       	cpc	r25, r1
    1b68:	09 f4       	brne	.+2      	; 0x1b6c <PWM_vInit+0xf2>
    1b6a:	8e c3       	rjmp	.+1820   	; 0x2288 <PWM_vInit+0x80e>
    1b6c:	c0 c3       	rjmp	.+1920   	; 0x22ee <PWM_vInit+0x874>
		case TIMER0_PhaseCorrect:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x40;
    1b6e:	a3 e5       	ldi	r26, 0x53	; 83
    1b70:	b0 e0       	ldi	r27, 0x00	; 0
    1b72:	e3 e5       	ldi	r30, 0x53	; 83
    1b74:	f0 e0       	ldi	r31, 0x00	; 0
    1b76:	80 81       	ld	r24, Z
    1b78:	87 7b       	andi	r24, 0xB7	; 183
    1b7a:	80 64       	ori	r24, 0x40	; 64
    1b7c:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1b7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1b80:	fa 81       	ldd	r31, Y+2	; 0x02
    1b82:	82 81       	ldd	r24, Z+2	; 0x02
    1b84:	81 30       	cpi	r24, 0x01	; 1
    1b86:	41 f4       	brne	.+16     	; 0x1b98 <PWM_vInit+0x11e>
				TIMSK_REG |= 0x03;
    1b88:	a9 e5       	ldi	r26, 0x59	; 89
    1b8a:	b0 e0       	ldi	r27, 0x00	; 0
    1b8c:	e9 e5       	ldi	r30, 0x59	; 89
    1b8e:	f0 e0       	ldi	r31, 0x00	; 0
    1b90:	80 81       	ld	r24, Z
    1b92:	83 60       	ori	r24, 0x03	; 3
    1b94:	8c 93       	st	X, r24
    1b96:	ab c3       	rjmp	.+1878   	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1b98:	e9 81       	ldd	r30, Y+1	; 0x01
    1b9a:	fa 81       	ldd	r31, Y+2	; 0x02
    1b9c:	82 81       	ldd	r24, Z+2	; 0x02
    1b9e:	88 23       	and	r24, r24
    1ba0:	09 f0       	breq	.+2      	; 0x1ba4 <PWM_vInit+0x12a>
    1ba2:	a5 c3       	rjmp	.+1866   	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1ba4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ba6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ba8:	83 81       	ldd	r24, Z+3	; 0x03
    1baa:	81 30       	cpi	r24, 0x01	; 1
    1bac:	49 f4       	brne	.+18     	; 0x1bc0 <PWM_vInit+0x146>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    1bae:	a3 e5       	ldi	r26, 0x53	; 83
    1bb0:	b0 e0       	ldi	r27, 0x00	; 0
    1bb2:	e3 e5       	ldi	r30, 0x53	; 83
    1bb4:	f0 e0       	ldi	r31, 0x00	; 0
    1bb6:	80 81       	ld	r24, Z
    1bb8:	8f 7c       	andi	r24, 0xCF	; 207
    1bba:	80 62       	ori	r24, 0x20	; 32
    1bbc:	8c 93       	st	X, r24
    1bbe:	97 c3       	rjmp	.+1838   	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1bc0:	e9 81       	ldd	r30, Y+1	; 0x01
    1bc2:	fa 81       	ldd	r31, Y+2	; 0x02
    1bc4:	83 81       	ldd	r24, Z+3	; 0x03
    1bc6:	88 23       	and	r24, r24
    1bc8:	09 f0       	breq	.+2      	; 0x1bcc <PWM_vInit+0x152>
    1bca:	91 c3       	rjmp	.+1826   	; 0x22ee <PWM_vInit+0x874>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    1bcc:	a3 e5       	ldi	r26, 0x53	; 83
    1bce:	b0 e0       	ldi	r27, 0x00	; 0
    1bd0:	e3 e5       	ldi	r30, 0x53	; 83
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	80 63       	ori	r24, 0x30	; 48
    1bd8:	8c 93       	st	X, r24
    1bda:	89 c3       	rjmp	.+1810   	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER0_FastPWM:
			TCCR0_REG = (TCCR0_REG&0xB7) | 0x48;
    1bdc:	a3 e5       	ldi	r26, 0x53	; 83
    1bde:	b0 e0       	ldi	r27, 0x00	; 0
    1be0:	e3 e5       	ldi	r30, 0x53	; 83
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	80 81       	ld	r24, Z
    1be6:	88 64       	ori	r24, 0x48	; 72
    1be8:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1bea:	e9 81       	ldd	r30, Y+1	; 0x01
    1bec:	fa 81       	ldd	r31, Y+2	; 0x02
    1bee:	82 81       	ldd	r24, Z+2	; 0x02
    1bf0:	81 30       	cpi	r24, 0x01	; 1
    1bf2:	41 f4       	brne	.+16     	; 0x1c04 <PWM_vInit+0x18a>
				TIMSK_REG |= 0x03;
    1bf4:	a9 e5       	ldi	r26, 0x59	; 89
    1bf6:	b0 e0       	ldi	r27, 0x00	; 0
    1bf8:	e9 e5       	ldi	r30, 0x59	; 89
    1bfa:	f0 e0       	ldi	r31, 0x00	; 0
    1bfc:	80 81       	ld	r24, Z
    1bfe:	83 60       	ori	r24, 0x03	; 3
    1c00:	8c 93       	st	X, r24
    1c02:	75 c3       	rjmp	.+1770   	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1c04:	e9 81       	ldd	r30, Y+1	; 0x01
    1c06:	fa 81       	ldd	r31, Y+2	; 0x02
    1c08:	82 81       	ldd	r24, Z+2	; 0x02
    1c0a:	88 23       	and	r24, r24
    1c0c:	09 f0       	breq	.+2      	; 0x1c10 <PWM_vInit+0x196>
    1c0e:	6f c3       	rjmp	.+1758   	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1c10:	e9 81       	ldd	r30, Y+1	; 0x01
    1c12:	fa 81       	ldd	r31, Y+2	; 0x02
    1c14:	83 81       	ldd	r24, Z+3	; 0x03
    1c16:	81 30       	cpi	r24, 0x01	; 1
    1c18:	49 f4       	brne	.+18     	; 0x1c2c <PWM_vInit+0x1b2>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x20;
    1c1a:	a3 e5       	ldi	r26, 0x53	; 83
    1c1c:	b0 e0       	ldi	r27, 0x00	; 0
    1c1e:	e3 e5       	ldi	r30, 0x53	; 83
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	80 81       	ld	r24, Z
    1c24:	8f 7c       	andi	r24, 0xCF	; 207
    1c26:	80 62       	ori	r24, 0x20	; 32
    1c28:	8c 93       	st	X, r24
    1c2a:	61 c3       	rjmp	.+1730   	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1c2c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c2e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c30:	83 81       	ldd	r24, Z+3	; 0x03
    1c32:	88 23       	and	r24, r24
    1c34:	09 f0       	breq	.+2      	; 0x1c38 <PWM_vInit+0x1be>
    1c36:	5b c3       	rjmp	.+1718   	; 0x22ee <PWM_vInit+0x874>
					TCCR0_REG = (TCCR0_REG & 0xCF) | 0x30;
    1c38:	a3 e5       	ldi	r26, 0x53	; 83
    1c3a:	b0 e0       	ldi	r27, 0x00	; 0
    1c3c:	e3 e5       	ldi	r30, 0x53	; 83
    1c3e:	f0 e0       	ldi	r31, 0x00	; 0
    1c40:	80 81       	ld	r24, Z
    1c42:	80 63       	ori	r24, 0x30	; 48
    1c44:	8c 93       	st	X, r24
    1c46:	53 c3       	rjmp	.+1702   	; 0x22ee <PWM_vInit+0x874>
			/*
			 * WGM10 WGM11 bit 0,1 in TCCR1A
			 * WGM12 WGM13 bit 3,4 in TCCR1B
			 */
		case TIMER1_Phase8:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    1c48:	af e4       	ldi	r26, 0x4F	; 79
    1c4a:	b0 e0       	ldi	r27, 0x00	; 0
    1c4c:	ef e4       	ldi	r30, 0x4F	; 79
    1c4e:	f0 e0       	ldi	r31, 0x00	; 0
    1c50:	80 81       	ld	r24, Z
    1c52:	8c 7f       	andi	r24, 0xFC	; 252
    1c54:	81 60       	ori	r24, 0x01	; 1
    1c56:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    1c58:	ae e4       	ldi	r26, 0x4E	; 78
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	ee e4       	ldi	r30, 0x4E	; 78
    1c5e:	f0 e0       	ldi	r31, 0x00	; 0
    1c60:	80 81       	ld	r24, Z
    1c62:	87 7e       	andi	r24, 0xE7	; 231
    1c64:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1c66:	e9 81       	ldd	r30, Y+1	; 0x01
    1c68:	fa 81       	ldd	r31, Y+2	; 0x02
    1c6a:	82 81       	ldd	r24, Z+2	; 0x02
    1c6c:	81 30       	cpi	r24, 0x01	; 1
    1c6e:	41 f4       	brne	.+16     	; 0x1c80 <PWM_vInit+0x206>
				TIMSK_REG |= 0x3C;
    1c70:	a9 e5       	ldi	r26, 0x59	; 89
    1c72:	b0 e0       	ldi	r27, 0x00	; 0
    1c74:	e9 e5       	ldi	r30, 0x59	; 89
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	8c 63       	ori	r24, 0x3C	; 60
    1c7c:	8c 93       	st	X, r24
    1c7e:	37 c3       	rjmp	.+1646   	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1c80:	e9 81       	ldd	r30, Y+1	; 0x01
    1c82:	fa 81       	ldd	r31, Y+2	; 0x02
    1c84:	82 81       	ldd	r24, Z+2	; 0x02
    1c86:	88 23       	and	r24, r24
    1c88:	09 f0       	breq	.+2      	; 0x1c8c <PWM_vInit+0x212>
    1c8a:	31 c3       	rjmp	.+1634   	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1c8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1c8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1c90:	83 81       	ldd	r24, Z+3	; 0x03
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	49 f4       	brne	.+18     	; 0x1ca8 <PWM_vInit+0x22e>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1c96:	af e4       	ldi	r26, 0x4F	; 79
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	ef e4       	ldi	r30, 0x4F	; 79
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	8f 7c       	andi	r24, 0xCF	; 207
    1ca2:	80 62       	ori	r24, 0x20	; 32
    1ca4:	8c 93       	st	X, r24
    1ca6:	23 c3       	rjmp	.+1606   	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1ca8:	e9 81       	ldd	r30, Y+1	; 0x01
    1caa:	fa 81       	ldd	r31, Y+2	; 0x02
    1cac:	83 81       	ldd	r24, Z+3	; 0x03
    1cae:	88 23       	and	r24, r24
    1cb0:	09 f0       	breq	.+2      	; 0x1cb4 <PWM_vInit+0x23a>
    1cb2:	1d c3       	rjmp	.+1594   	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1cb4:	af e4       	ldi	r26, 0x4F	; 79
    1cb6:	b0 e0       	ldi	r27, 0x00	; 0
    1cb8:	ef e4       	ldi	r30, 0x4F	; 79
    1cba:	f0 e0       	ldi	r31, 0x00	; 0
    1cbc:	80 81       	ld	r24, Z
    1cbe:	80 63       	ori	r24, 0x30	; 48
    1cc0:	8c 93       	st	X, r24
    1cc2:	15 c3       	rjmp	.+1578   	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Phase9:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    1cc4:	af e4       	ldi	r26, 0x4F	; 79
    1cc6:	b0 e0       	ldi	r27, 0x00	; 0
    1cc8:	ef e4       	ldi	r30, 0x4F	; 79
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	80 81       	ld	r24, Z
    1cce:	8c 7f       	andi	r24, 0xFC	; 252
    1cd0:	82 60       	ori	r24, 0x02	; 2
    1cd2:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    1cd4:	ae e4       	ldi	r26, 0x4E	; 78
    1cd6:	b0 e0       	ldi	r27, 0x00	; 0
    1cd8:	ee e4       	ldi	r30, 0x4E	; 78
    1cda:	f0 e0       	ldi	r31, 0x00	; 0
    1cdc:	80 81       	ld	r24, Z
    1cde:	87 7e       	andi	r24, 0xE7	; 231
    1ce0:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1ce2:	e9 81       	ldd	r30, Y+1	; 0x01
    1ce4:	fa 81       	ldd	r31, Y+2	; 0x02
    1ce6:	82 81       	ldd	r24, Z+2	; 0x02
    1ce8:	81 30       	cpi	r24, 0x01	; 1
    1cea:	41 f4       	brne	.+16     	; 0x1cfc <PWM_vInit+0x282>
				TIMSK_REG |= 0x3C;
    1cec:	a9 e5       	ldi	r26, 0x59	; 89
    1cee:	b0 e0       	ldi	r27, 0x00	; 0
    1cf0:	e9 e5       	ldi	r30, 0x59	; 89
    1cf2:	f0 e0       	ldi	r31, 0x00	; 0
    1cf4:	80 81       	ld	r24, Z
    1cf6:	8c 63       	ori	r24, 0x3C	; 60
    1cf8:	8c 93       	st	X, r24
    1cfa:	f9 c2       	rjmp	.+1522   	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1cfc:	e9 81       	ldd	r30, Y+1	; 0x01
    1cfe:	fa 81       	ldd	r31, Y+2	; 0x02
    1d00:	82 81       	ldd	r24, Z+2	; 0x02
    1d02:	88 23       	and	r24, r24
    1d04:	09 f0       	breq	.+2      	; 0x1d08 <PWM_vInit+0x28e>
    1d06:	f3 c2       	rjmp	.+1510   	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1d08:	e9 81       	ldd	r30, Y+1	; 0x01
    1d0a:	fa 81       	ldd	r31, Y+2	; 0x02
    1d0c:	83 81       	ldd	r24, Z+3	; 0x03
    1d0e:	81 30       	cpi	r24, 0x01	; 1
    1d10:	49 f4       	brne	.+18     	; 0x1d24 <PWM_vInit+0x2aa>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1d12:	af e4       	ldi	r26, 0x4F	; 79
    1d14:	b0 e0       	ldi	r27, 0x00	; 0
    1d16:	ef e4       	ldi	r30, 0x4F	; 79
    1d18:	f0 e0       	ldi	r31, 0x00	; 0
    1d1a:	80 81       	ld	r24, Z
    1d1c:	8f 7c       	andi	r24, 0xCF	; 207
    1d1e:	80 62       	ori	r24, 0x20	; 32
    1d20:	8c 93       	st	X, r24
    1d22:	e5 c2       	rjmp	.+1482   	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1d24:	e9 81       	ldd	r30, Y+1	; 0x01
    1d26:	fa 81       	ldd	r31, Y+2	; 0x02
    1d28:	83 81       	ldd	r24, Z+3	; 0x03
    1d2a:	88 23       	and	r24, r24
    1d2c:	09 f0       	breq	.+2      	; 0x1d30 <PWM_vInit+0x2b6>
    1d2e:	df c2       	rjmp	.+1470   	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1d30:	af e4       	ldi	r26, 0x4F	; 79
    1d32:	b0 e0       	ldi	r27, 0x00	; 0
    1d34:	ef e4       	ldi	r30, 0x4F	; 79
    1d36:	f0 e0       	ldi	r31, 0x00	; 0
    1d38:	80 81       	ld	r24, Z
    1d3a:	80 63       	ori	r24, 0x30	; 48
    1d3c:	8c 93       	st	X, r24
    1d3e:	d7 c2       	rjmp	.+1454   	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Phase10:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    1d40:	af e4       	ldi	r26, 0x4F	; 79
    1d42:	b0 e0       	ldi	r27, 0x00	; 0
    1d44:	ef e4       	ldi	r30, 0x4F	; 79
    1d46:	f0 e0       	ldi	r31, 0x00	; 0
    1d48:	80 81       	ld	r24, Z
    1d4a:	83 60       	ori	r24, 0x03	; 3
    1d4c:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7);
    1d4e:	ae e4       	ldi	r26, 0x4E	; 78
    1d50:	b0 e0       	ldi	r27, 0x00	; 0
    1d52:	ee e4       	ldi	r30, 0x4E	; 78
    1d54:	f0 e0       	ldi	r31, 0x00	; 0
    1d56:	80 81       	ld	r24, Z
    1d58:	87 7e       	andi	r24, 0xE7	; 231
    1d5a:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1d5c:	e9 81       	ldd	r30, Y+1	; 0x01
    1d5e:	fa 81       	ldd	r31, Y+2	; 0x02
    1d60:	82 81       	ldd	r24, Z+2	; 0x02
    1d62:	81 30       	cpi	r24, 0x01	; 1
    1d64:	41 f4       	brne	.+16     	; 0x1d76 <PWM_vInit+0x2fc>
				TIMSK_REG |= 0x3C;
    1d66:	a9 e5       	ldi	r26, 0x59	; 89
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e9 e5       	ldi	r30, 0x59	; 89
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8c 63       	ori	r24, 0x3C	; 60
    1d72:	8c 93       	st	X, r24
    1d74:	bc c2       	rjmp	.+1400   	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1d76:	e9 81       	ldd	r30, Y+1	; 0x01
    1d78:	fa 81       	ldd	r31, Y+2	; 0x02
    1d7a:	82 81       	ldd	r24, Z+2	; 0x02
    1d7c:	88 23       	and	r24, r24
    1d7e:	09 f0       	breq	.+2      	; 0x1d82 <PWM_vInit+0x308>
    1d80:	b6 c2       	rjmp	.+1388   	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1d82:	e9 81       	ldd	r30, Y+1	; 0x01
    1d84:	fa 81       	ldd	r31, Y+2	; 0x02
    1d86:	83 81       	ldd	r24, Z+3	; 0x03
    1d88:	81 30       	cpi	r24, 0x01	; 1
    1d8a:	49 f4       	brne	.+18     	; 0x1d9e <PWM_vInit+0x324>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1d8c:	af e4       	ldi	r26, 0x4F	; 79
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	ef e4       	ldi	r30, 0x4F	; 79
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	8f 7c       	andi	r24, 0xCF	; 207
    1d98:	80 62       	ori	r24, 0x20	; 32
    1d9a:	8c 93       	st	X, r24
    1d9c:	a8 c2       	rjmp	.+1360   	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1d9e:	e9 81       	ldd	r30, Y+1	; 0x01
    1da0:	fa 81       	ldd	r31, Y+2	; 0x02
    1da2:	83 81       	ldd	r24, Z+3	; 0x03
    1da4:	88 23       	and	r24, r24
    1da6:	09 f0       	breq	.+2      	; 0x1daa <PWM_vInit+0x330>
    1da8:	a2 c2       	rjmp	.+1348   	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1daa:	af e4       	ldi	r26, 0x4F	; 79
    1dac:	b0 e0       	ldi	r27, 0x00	; 0
    1dae:	ef e4       	ldi	r30, 0x4F	; 79
    1db0:	f0 e0       	ldi	r31, 0x00	; 0
    1db2:	80 81       	ld	r24, Z
    1db4:	80 63       	ori	r24, 0x30	; 48
    1db6:	8c 93       	st	X, r24
    1db8:	9a c2       	rjmp	.+1332   	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast8:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    1dba:	af e4       	ldi	r26, 0x4F	; 79
    1dbc:	b0 e0       	ldi	r27, 0x00	; 0
    1dbe:	ef e4       	ldi	r30, 0x4F	; 79
    1dc0:	f0 e0       	ldi	r31, 0x00	; 0
    1dc2:	80 81       	ld	r24, Z
    1dc4:	8c 7f       	andi	r24, 0xFC	; 252
    1dc6:	81 60       	ori	r24, 0x01	; 1
    1dc8:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    1dca:	ae e4       	ldi	r26, 0x4E	; 78
    1dcc:	b0 e0       	ldi	r27, 0x00	; 0
    1dce:	ee e4       	ldi	r30, 0x4E	; 78
    1dd0:	f0 e0       	ldi	r31, 0x00	; 0
    1dd2:	80 81       	ld	r24, Z
    1dd4:	87 7e       	andi	r24, 0xE7	; 231
    1dd6:	88 60       	ori	r24, 0x08	; 8
    1dd8:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1dda:	e9 81       	ldd	r30, Y+1	; 0x01
    1ddc:	fa 81       	ldd	r31, Y+2	; 0x02
    1dde:	82 81       	ldd	r24, Z+2	; 0x02
    1de0:	81 30       	cpi	r24, 0x01	; 1
    1de2:	41 f4       	brne	.+16     	; 0x1df4 <PWM_vInit+0x37a>
				TIMSK_REG |= 0x3C;
    1de4:	a9 e5       	ldi	r26, 0x59	; 89
    1de6:	b0 e0       	ldi	r27, 0x00	; 0
    1de8:	e9 e5       	ldi	r30, 0x59	; 89
    1dea:	f0 e0       	ldi	r31, 0x00	; 0
    1dec:	80 81       	ld	r24, Z
    1dee:	8c 63       	ori	r24, 0x3C	; 60
    1df0:	8c 93       	st	X, r24
    1df2:	7d c2       	rjmp	.+1274   	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1df4:	e9 81       	ldd	r30, Y+1	; 0x01
    1df6:	fa 81       	ldd	r31, Y+2	; 0x02
    1df8:	82 81       	ldd	r24, Z+2	; 0x02
    1dfa:	88 23       	and	r24, r24
    1dfc:	09 f0       	breq	.+2      	; 0x1e00 <PWM_vInit+0x386>
    1dfe:	77 c2       	rjmp	.+1262   	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1e00:	e9 81       	ldd	r30, Y+1	; 0x01
    1e02:	fa 81       	ldd	r31, Y+2	; 0x02
    1e04:	83 81       	ldd	r24, Z+3	; 0x03
    1e06:	81 30       	cpi	r24, 0x01	; 1
    1e08:	49 f4       	brne	.+18     	; 0x1e1c <PWM_vInit+0x3a2>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1e0a:	af e4       	ldi	r26, 0x4F	; 79
    1e0c:	b0 e0       	ldi	r27, 0x00	; 0
    1e0e:	ef e4       	ldi	r30, 0x4F	; 79
    1e10:	f0 e0       	ldi	r31, 0x00	; 0
    1e12:	80 81       	ld	r24, Z
    1e14:	8f 7c       	andi	r24, 0xCF	; 207
    1e16:	80 62       	ori	r24, 0x20	; 32
    1e18:	8c 93       	st	X, r24
    1e1a:	69 c2       	rjmp	.+1234   	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1e1c:	e9 81       	ldd	r30, Y+1	; 0x01
    1e1e:	fa 81       	ldd	r31, Y+2	; 0x02
    1e20:	83 81       	ldd	r24, Z+3	; 0x03
    1e22:	88 23       	and	r24, r24
    1e24:	09 f0       	breq	.+2      	; 0x1e28 <PWM_vInit+0x3ae>
    1e26:	63 c2       	rjmp	.+1222   	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1e28:	af e4       	ldi	r26, 0x4F	; 79
    1e2a:	b0 e0       	ldi	r27, 0x00	; 0
    1e2c:	ef e4       	ldi	r30, 0x4F	; 79
    1e2e:	f0 e0       	ldi	r31, 0x00	; 0
    1e30:	80 81       	ld	r24, Z
    1e32:	80 63       	ori	r24, 0x30	; 48
    1e34:	8c 93       	st	X, r24
    1e36:	5b c2       	rjmp	.+1206   	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast9:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    1e38:	af e4       	ldi	r26, 0x4F	; 79
    1e3a:	b0 e0       	ldi	r27, 0x00	; 0
    1e3c:	ef e4       	ldi	r30, 0x4F	; 79
    1e3e:	f0 e0       	ldi	r31, 0x00	; 0
    1e40:	80 81       	ld	r24, Z
    1e42:	8c 7f       	andi	r24, 0xFC	; 252
    1e44:	82 60       	ori	r24, 0x02	; 2
    1e46:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    1e48:	ae e4       	ldi	r26, 0x4E	; 78
    1e4a:	b0 e0       	ldi	r27, 0x00	; 0
    1e4c:	ee e4       	ldi	r30, 0x4E	; 78
    1e4e:	f0 e0       	ldi	r31, 0x00	; 0
    1e50:	80 81       	ld	r24, Z
    1e52:	87 7e       	andi	r24, 0xE7	; 231
    1e54:	88 60       	ori	r24, 0x08	; 8
    1e56:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1e58:	e9 81       	ldd	r30, Y+1	; 0x01
    1e5a:	fa 81       	ldd	r31, Y+2	; 0x02
    1e5c:	82 81       	ldd	r24, Z+2	; 0x02
    1e5e:	81 30       	cpi	r24, 0x01	; 1
    1e60:	41 f4       	brne	.+16     	; 0x1e72 <PWM_vInit+0x3f8>
				TIMSK_REG |= 0x3C;
    1e62:	a9 e5       	ldi	r26, 0x59	; 89
    1e64:	b0 e0       	ldi	r27, 0x00	; 0
    1e66:	e9 e5       	ldi	r30, 0x59	; 89
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	8c 63       	ori	r24, 0x3C	; 60
    1e6e:	8c 93       	st	X, r24
    1e70:	3e c2       	rjmp	.+1148   	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1e72:	e9 81       	ldd	r30, Y+1	; 0x01
    1e74:	fa 81       	ldd	r31, Y+2	; 0x02
    1e76:	82 81       	ldd	r24, Z+2	; 0x02
    1e78:	88 23       	and	r24, r24
    1e7a:	09 f0       	breq	.+2      	; 0x1e7e <PWM_vInit+0x404>
    1e7c:	38 c2       	rjmp	.+1136   	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1e7e:	e9 81       	ldd	r30, Y+1	; 0x01
    1e80:	fa 81       	ldd	r31, Y+2	; 0x02
    1e82:	83 81       	ldd	r24, Z+3	; 0x03
    1e84:	81 30       	cpi	r24, 0x01	; 1
    1e86:	49 f4       	brne	.+18     	; 0x1e9a <PWM_vInit+0x420>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1e88:	af e4       	ldi	r26, 0x4F	; 79
    1e8a:	b0 e0       	ldi	r27, 0x00	; 0
    1e8c:	ef e4       	ldi	r30, 0x4F	; 79
    1e8e:	f0 e0       	ldi	r31, 0x00	; 0
    1e90:	80 81       	ld	r24, Z
    1e92:	8f 7c       	andi	r24, 0xCF	; 207
    1e94:	80 62       	ori	r24, 0x20	; 32
    1e96:	8c 93       	st	X, r24
    1e98:	2a c2       	rjmp	.+1108   	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1e9a:	e9 81       	ldd	r30, Y+1	; 0x01
    1e9c:	fa 81       	ldd	r31, Y+2	; 0x02
    1e9e:	83 81       	ldd	r24, Z+3	; 0x03
    1ea0:	88 23       	and	r24, r24
    1ea2:	09 f0       	breq	.+2      	; 0x1ea6 <PWM_vInit+0x42c>
    1ea4:	24 c2       	rjmp	.+1096   	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1ea6:	af e4       	ldi	r26, 0x4F	; 79
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	ef e4       	ldi	r30, 0x4F	; 79
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	80 63       	ori	r24, 0x30	; 48
    1eb2:	8c 93       	st	X, r24
    1eb4:	1c c2       	rjmp	.+1080   	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_Fast10:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    1eb6:	af e4       	ldi	r26, 0x4F	; 79
    1eb8:	b0 e0       	ldi	r27, 0x00	; 0
    1eba:	ef e4       	ldi	r30, 0x4F	; 79
    1ebc:	f0 e0       	ldi	r31, 0x00	; 0
    1ebe:	80 81       	ld	r24, Z
    1ec0:	83 60       	ori	r24, 0x03	; 3
    1ec2:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x8;
    1ec4:	ae e4       	ldi	r26, 0x4E	; 78
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	ee e4       	ldi	r30, 0x4E	; 78
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	87 7e       	andi	r24, 0xE7	; 231
    1ed0:	88 60       	ori	r24, 0x08	; 8
    1ed2:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1ed4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ed6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ed8:	82 81       	ldd	r24, Z+2	; 0x02
    1eda:	81 30       	cpi	r24, 0x01	; 1
    1edc:	41 f4       	brne	.+16     	; 0x1eee <PWM_vInit+0x474>
				TIMSK_REG |= 0x3C;
    1ede:	a9 e5       	ldi	r26, 0x59	; 89
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	e9 e5       	ldi	r30, 0x59	; 89
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	8c 63       	ori	r24, 0x3C	; 60
    1eea:	8c 93       	st	X, r24
    1eec:	00 c2       	rjmp	.+1024   	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1eee:	e9 81       	ldd	r30, Y+1	; 0x01
    1ef0:	fa 81       	ldd	r31, Y+2	; 0x02
    1ef2:	82 81       	ldd	r24, Z+2	; 0x02
    1ef4:	88 23       	and	r24, r24
    1ef6:	09 f0       	breq	.+2      	; 0x1efa <PWM_vInit+0x480>
    1ef8:	fa c1       	rjmp	.+1012   	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1efa:	e9 81       	ldd	r30, Y+1	; 0x01
    1efc:	fa 81       	ldd	r31, Y+2	; 0x02
    1efe:	83 81       	ldd	r24, Z+3	; 0x03
    1f00:	81 30       	cpi	r24, 0x01	; 1
    1f02:	49 f4       	brne	.+18     	; 0x1f16 <PWM_vInit+0x49c>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1f04:	af e4       	ldi	r26, 0x4F	; 79
    1f06:	b0 e0       	ldi	r27, 0x00	; 0
    1f08:	ef e4       	ldi	r30, 0x4F	; 79
    1f0a:	f0 e0       	ldi	r31, 0x00	; 0
    1f0c:	80 81       	ld	r24, Z
    1f0e:	8f 7c       	andi	r24, 0xCF	; 207
    1f10:	80 62       	ori	r24, 0x20	; 32
    1f12:	8c 93       	st	X, r24
    1f14:	ec c1       	rjmp	.+984    	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1f16:	e9 81       	ldd	r30, Y+1	; 0x01
    1f18:	fa 81       	ldd	r31, Y+2	; 0x02
    1f1a:	83 81       	ldd	r24, Z+3	; 0x03
    1f1c:	88 23       	and	r24, r24
    1f1e:	09 f0       	breq	.+2      	; 0x1f22 <PWM_vInit+0x4a8>
    1f20:	e6 c1       	rjmp	.+972    	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1f22:	af e4       	ldi	r26, 0x4F	; 79
    1f24:	b0 e0       	ldi	r27, 0x00	; 0
    1f26:	ef e4       	ldi	r30, 0x4F	; 79
    1f28:	f0 e0       	ldi	r31, 0x00	; 0
    1f2a:	80 81       	ld	r24, Z
    1f2c:	80 63       	ori	r24, 0x30	; 48
    1f2e:	8c 93       	st	X, r24
    1f30:	de c1       	rjmp	.+956    	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseFreqICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC);
    1f32:	af e4       	ldi	r26, 0x4F	; 79
    1f34:	b0 e0       	ldi	r27, 0x00	; 0
    1f36:	ef e4       	ldi	r30, 0x4F	; 79
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	80 81       	ld	r24, Z
    1f3c:	8c 7f       	andi	r24, 0xFC	; 252
    1f3e:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    1f40:	ae e4       	ldi	r26, 0x4E	; 78
    1f42:	b0 e0       	ldi	r27, 0x00	; 0
    1f44:	ee e4       	ldi	r30, 0x4E	; 78
    1f46:	f0 e0       	ldi	r31, 0x00	; 0
    1f48:	80 81       	ld	r24, Z
    1f4a:	87 7e       	andi	r24, 0xE7	; 231
    1f4c:	80 61       	ori	r24, 0x10	; 16
    1f4e:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1f50:	e9 81       	ldd	r30, Y+1	; 0x01
    1f52:	fa 81       	ldd	r31, Y+2	; 0x02
    1f54:	82 81       	ldd	r24, Z+2	; 0x02
    1f56:	81 30       	cpi	r24, 0x01	; 1
    1f58:	41 f4       	brne	.+16     	; 0x1f6a <PWM_vInit+0x4f0>
				TIMSK_REG |= 0x3C;
    1f5a:	a9 e5       	ldi	r26, 0x59	; 89
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	e9 e5       	ldi	r30, 0x59	; 89
    1f60:	f0 e0       	ldi	r31, 0x00	; 0
    1f62:	80 81       	ld	r24, Z
    1f64:	8c 63       	ori	r24, 0x3C	; 60
    1f66:	8c 93       	st	X, r24
    1f68:	c2 c1       	rjmp	.+900    	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1f6a:	e9 81       	ldd	r30, Y+1	; 0x01
    1f6c:	fa 81       	ldd	r31, Y+2	; 0x02
    1f6e:	82 81       	ldd	r24, Z+2	; 0x02
    1f70:	88 23       	and	r24, r24
    1f72:	09 f0       	breq	.+2      	; 0x1f76 <PWM_vInit+0x4fc>
    1f74:	bc c1       	rjmp	.+888    	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1f76:	e9 81       	ldd	r30, Y+1	; 0x01
    1f78:	fa 81       	ldd	r31, Y+2	; 0x02
    1f7a:	83 81       	ldd	r24, Z+3	; 0x03
    1f7c:	81 30       	cpi	r24, 0x01	; 1
    1f7e:	49 f4       	brne	.+18     	; 0x1f92 <PWM_vInit+0x518>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1f80:	af e4       	ldi	r26, 0x4F	; 79
    1f82:	b0 e0       	ldi	r27, 0x00	; 0
    1f84:	ef e4       	ldi	r30, 0x4F	; 79
    1f86:	f0 e0       	ldi	r31, 0x00	; 0
    1f88:	80 81       	ld	r24, Z
    1f8a:	8f 7c       	andi	r24, 0xCF	; 207
    1f8c:	80 62       	ori	r24, 0x20	; 32
    1f8e:	8c 93       	st	X, r24
    1f90:	ae c1       	rjmp	.+860    	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    1f92:	e9 81       	ldd	r30, Y+1	; 0x01
    1f94:	fa 81       	ldd	r31, Y+2	; 0x02
    1f96:	83 81       	ldd	r24, Z+3	; 0x03
    1f98:	88 23       	and	r24, r24
    1f9a:	09 f0       	breq	.+2      	; 0x1f9e <PWM_vInit+0x524>
    1f9c:	a8 c1       	rjmp	.+848    	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    1f9e:	af e4       	ldi	r26, 0x4F	; 79
    1fa0:	b0 e0       	ldi	r27, 0x00	; 0
    1fa2:	ef e4       	ldi	r30, 0x4F	; 79
    1fa4:	f0 e0       	ldi	r31, 0x00	; 0
    1fa6:	80 81       	ld	r24, Z
    1fa8:	80 63       	ori	r24, 0x30	; 48
    1faa:	8c 93       	st	X, r24
    1fac:	a0 c1       	rjmp	.+832    	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseFreqOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 1;
    1fae:	af e4       	ldi	r26, 0x4F	; 79
    1fb0:	b0 e0       	ldi	r27, 0x00	; 0
    1fb2:	ef e4       	ldi	r30, 0x4F	; 79
    1fb4:	f0 e0       	ldi	r31, 0x00	; 0
    1fb6:	80 81       	ld	r24, Z
    1fb8:	8c 7f       	andi	r24, 0xFC	; 252
    1fba:	81 60       	ori	r24, 0x01	; 1
    1fbc:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    1fbe:	ae e4       	ldi	r26, 0x4E	; 78
    1fc0:	b0 e0       	ldi	r27, 0x00	; 0
    1fc2:	ee e4       	ldi	r30, 0x4E	; 78
    1fc4:	f0 e0       	ldi	r31, 0x00	; 0
    1fc6:	80 81       	ld	r24, Z
    1fc8:	87 7e       	andi	r24, 0xE7	; 231
    1fca:	80 61       	ori	r24, 0x10	; 16
    1fcc:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    1fce:	e9 81       	ldd	r30, Y+1	; 0x01
    1fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    1fd2:	82 81       	ldd	r24, Z+2	; 0x02
    1fd4:	81 30       	cpi	r24, 0x01	; 1
    1fd6:	41 f4       	brne	.+16     	; 0x1fe8 <PWM_vInit+0x56e>
				TIMSK_REG |= 0x3C;
    1fd8:	a9 e5       	ldi	r26, 0x59	; 89
    1fda:	b0 e0       	ldi	r27, 0x00	; 0
    1fdc:	e9 e5       	ldi	r30, 0x59	; 89
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	80 81       	ld	r24, Z
    1fe2:	8c 63       	ori	r24, 0x3C	; 60
    1fe4:	8c 93       	st	X, r24
    1fe6:	83 c1       	rjmp	.+774    	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    1fe8:	e9 81       	ldd	r30, Y+1	; 0x01
    1fea:	fa 81       	ldd	r31, Y+2	; 0x02
    1fec:	82 81       	ldd	r24, Z+2	; 0x02
    1fee:	88 23       	and	r24, r24
    1ff0:	09 f0       	breq	.+2      	; 0x1ff4 <PWM_vInit+0x57a>
    1ff2:	7d c1       	rjmp	.+762    	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    1ff4:	e9 81       	ldd	r30, Y+1	; 0x01
    1ff6:	fa 81       	ldd	r31, Y+2	; 0x02
    1ff8:	83 81       	ldd	r24, Z+3	; 0x03
    1ffa:	81 30       	cpi	r24, 0x01	; 1
    1ffc:	49 f4       	brne	.+18     	; 0x2010 <PWM_vInit+0x596>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    1ffe:	af e4       	ldi	r26, 0x4F	; 79
    2000:	b0 e0       	ldi	r27, 0x00	; 0
    2002:	ef e4       	ldi	r30, 0x4F	; 79
    2004:	f0 e0       	ldi	r31, 0x00	; 0
    2006:	80 81       	ld	r24, Z
    2008:	8f 7c       	andi	r24, 0xCF	; 207
    200a:	80 62       	ori	r24, 0x20	; 32
    200c:	8c 93       	st	X, r24
    200e:	6f c1       	rjmp	.+734    	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2010:	e9 81       	ldd	r30, Y+1	; 0x01
    2012:	fa 81       	ldd	r31, Y+2	; 0x02
    2014:	83 81       	ldd	r24, Z+3	; 0x03
    2016:	88 23       	and	r24, r24
    2018:	09 f0       	breq	.+2      	; 0x201c <PWM_vInit+0x5a2>
    201a:	69 c1       	rjmp	.+722    	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    201c:	af e4       	ldi	r26, 0x4F	; 79
    201e:	b0 e0       	ldi	r27, 0x00	; 0
    2020:	ef e4       	ldi	r30, 0x4F	; 79
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	80 81       	ld	r24, Z
    2026:	80 63       	ori	r24, 0x30	; 48
    2028:	8c 93       	st	X, r24
    202a:	61 c1       	rjmp	.+706    	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    202c:	af e4       	ldi	r26, 0x4F	; 79
    202e:	b0 e0       	ldi	r27, 0x00	; 0
    2030:	ef e4       	ldi	r30, 0x4F	; 79
    2032:	f0 e0       	ldi	r31, 0x00	; 0
    2034:	80 81       	ld	r24, Z
    2036:	8c 7f       	andi	r24, 0xFC	; 252
    2038:	82 60       	ori	r24, 0x02	; 2
    203a:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    203c:	ae e4       	ldi	r26, 0x4E	; 78
    203e:	b0 e0       	ldi	r27, 0x00	; 0
    2040:	ee e4       	ldi	r30, 0x4E	; 78
    2042:	f0 e0       	ldi	r31, 0x00	; 0
    2044:	80 81       	ld	r24, Z
    2046:	87 7e       	andi	r24, 0xE7	; 231
    2048:	80 61       	ori	r24, 0x10	; 16
    204a:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    204c:	e9 81       	ldd	r30, Y+1	; 0x01
    204e:	fa 81       	ldd	r31, Y+2	; 0x02
    2050:	82 81       	ldd	r24, Z+2	; 0x02
    2052:	81 30       	cpi	r24, 0x01	; 1
    2054:	41 f4       	brne	.+16     	; 0x2066 <PWM_vInit+0x5ec>
				TIMSK_REG |= 0x3C;
    2056:	a9 e5       	ldi	r26, 0x59	; 89
    2058:	b0 e0       	ldi	r27, 0x00	; 0
    205a:	e9 e5       	ldi	r30, 0x59	; 89
    205c:	f0 e0       	ldi	r31, 0x00	; 0
    205e:	80 81       	ld	r24, Z
    2060:	8c 63       	ori	r24, 0x3C	; 60
    2062:	8c 93       	st	X, r24
    2064:	44 c1       	rjmp	.+648    	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2066:	e9 81       	ldd	r30, Y+1	; 0x01
    2068:	fa 81       	ldd	r31, Y+2	; 0x02
    206a:	82 81       	ldd	r24, Z+2	; 0x02
    206c:	88 23       	and	r24, r24
    206e:	09 f0       	breq	.+2      	; 0x2072 <PWM_vInit+0x5f8>
    2070:	3e c1       	rjmp	.+636    	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2072:	e9 81       	ldd	r30, Y+1	; 0x01
    2074:	fa 81       	ldd	r31, Y+2	; 0x02
    2076:	83 81       	ldd	r24, Z+3	; 0x03
    2078:	81 30       	cpi	r24, 0x01	; 1
    207a:	49 f4       	brne	.+18     	; 0x208e <PWM_vInit+0x614>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    207c:	af e4       	ldi	r26, 0x4F	; 79
    207e:	b0 e0       	ldi	r27, 0x00	; 0
    2080:	ef e4       	ldi	r30, 0x4F	; 79
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	80 81       	ld	r24, Z
    2086:	8f 7c       	andi	r24, 0xCF	; 207
    2088:	80 62       	ori	r24, 0x20	; 32
    208a:	8c 93       	st	X, r24
    208c:	30 c1       	rjmp	.+608    	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    208e:	e9 81       	ldd	r30, Y+1	; 0x01
    2090:	fa 81       	ldd	r31, Y+2	; 0x02
    2092:	83 81       	ldd	r24, Z+3	; 0x03
    2094:	88 23       	and	r24, r24
    2096:	09 f0       	breq	.+2      	; 0x209a <PWM_vInit+0x620>
    2098:	2a c1       	rjmp	.+596    	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    209a:	af e4       	ldi	r26, 0x4F	; 79
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	ef e4       	ldi	r30, 0x4F	; 79
    20a0:	f0 e0       	ldi	r31, 0x00	; 0
    20a2:	80 81       	ld	r24, Z
    20a4:	80 63       	ori	r24, 0x30	; 48
    20a6:	8c 93       	st	X, r24
    20a8:	22 c1       	rjmp	.+580    	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_PhaseOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    20aa:	af e4       	ldi	r26, 0x4F	; 79
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	ef e4       	ldi	r30, 0x4F	; 79
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	83 60       	ori	r24, 0x03	; 3
    20b6:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x10;
    20b8:	ae e4       	ldi	r26, 0x4E	; 78
    20ba:	b0 e0       	ldi	r27, 0x00	; 0
    20bc:	ee e4       	ldi	r30, 0x4E	; 78
    20be:	f0 e0       	ldi	r31, 0x00	; 0
    20c0:	80 81       	ld	r24, Z
    20c2:	87 7e       	andi	r24, 0xE7	; 231
    20c4:	80 61       	ori	r24, 0x10	; 16
    20c6:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    20c8:	e9 81       	ldd	r30, Y+1	; 0x01
    20ca:	fa 81       	ldd	r31, Y+2	; 0x02
    20cc:	82 81       	ldd	r24, Z+2	; 0x02
    20ce:	81 30       	cpi	r24, 0x01	; 1
    20d0:	41 f4       	brne	.+16     	; 0x20e2 <PWM_vInit+0x668>
				TIMSK_REG |= 0x3C;
    20d2:	a9 e5       	ldi	r26, 0x59	; 89
    20d4:	b0 e0       	ldi	r27, 0x00	; 0
    20d6:	e9 e5       	ldi	r30, 0x59	; 89
    20d8:	f0 e0       	ldi	r31, 0x00	; 0
    20da:	80 81       	ld	r24, Z
    20dc:	8c 63       	ori	r24, 0x3C	; 60
    20de:	8c 93       	st	X, r24
    20e0:	06 c1       	rjmp	.+524    	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    20e2:	e9 81       	ldd	r30, Y+1	; 0x01
    20e4:	fa 81       	ldd	r31, Y+2	; 0x02
    20e6:	82 81       	ldd	r24, Z+2	; 0x02
    20e8:	88 23       	and	r24, r24
    20ea:	09 f0       	breq	.+2      	; 0x20ee <PWM_vInit+0x674>
    20ec:	00 c1       	rjmp	.+512    	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    20ee:	e9 81       	ldd	r30, Y+1	; 0x01
    20f0:	fa 81       	ldd	r31, Y+2	; 0x02
    20f2:	83 81       	ldd	r24, Z+3	; 0x03
    20f4:	81 30       	cpi	r24, 0x01	; 1
    20f6:	49 f4       	brne	.+18     	; 0x210a <PWM_vInit+0x690>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    20f8:	af e4       	ldi	r26, 0x4F	; 79
    20fa:	b0 e0       	ldi	r27, 0x00	; 0
    20fc:	ef e4       	ldi	r30, 0x4F	; 79
    20fe:	f0 e0       	ldi	r31, 0x00	; 0
    2100:	80 81       	ld	r24, Z
    2102:	8f 7c       	andi	r24, 0xCF	; 207
    2104:	80 62       	ori	r24, 0x20	; 32
    2106:	8c 93       	st	X, r24
    2108:	f2 c0       	rjmp	.+484    	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    210a:	e9 81       	ldd	r30, Y+1	; 0x01
    210c:	fa 81       	ldd	r31, Y+2	; 0x02
    210e:	83 81       	ldd	r24, Z+3	; 0x03
    2110:	88 23       	and	r24, r24
    2112:	09 f0       	breq	.+2      	; 0x2116 <PWM_vInit+0x69c>
    2114:	ec c0       	rjmp	.+472    	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2116:	af e4       	ldi	r26, 0x4F	; 79
    2118:	b0 e0       	ldi	r27, 0x00	; 0
    211a:	ef e4       	ldi	r30, 0x4F	; 79
    211c:	f0 e0       	ldi	r31, 0x00	; 0
    211e:	80 81       	ld	r24, Z
    2120:	80 63       	ori	r24, 0x30	; 48
    2122:	8c 93       	st	X, r24
    2124:	e4 c0       	rjmp	.+456    	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_FastICR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 2;
    2126:	af e4       	ldi	r26, 0x4F	; 79
    2128:	b0 e0       	ldi	r27, 0x00	; 0
    212a:	ef e4       	ldi	r30, 0x4F	; 79
    212c:	f0 e0       	ldi	r31, 0x00	; 0
    212e:	80 81       	ld	r24, Z
    2130:	8c 7f       	andi	r24, 0xFC	; 252
    2132:	82 60       	ori	r24, 0x02	; 2
    2134:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    2136:	ae e4       	ldi	r26, 0x4E	; 78
    2138:	b0 e0       	ldi	r27, 0x00	; 0
    213a:	ee e4       	ldi	r30, 0x4E	; 78
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	80 81       	ld	r24, Z
    2140:	88 61       	ori	r24, 0x18	; 24
    2142:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2144:	e9 81       	ldd	r30, Y+1	; 0x01
    2146:	fa 81       	ldd	r31, Y+2	; 0x02
    2148:	82 81       	ldd	r24, Z+2	; 0x02
    214a:	81 30       	cpi	r24, 0x01	; 1
    214c:	41 f4       	brne	.+16     	; 0x215e <PWM_vInit+0x6e4>
				TIMSK_REG |= 0x3C;
    214e:	a9 e5       	ldi	r26, 0x59	; 89
    2150:	b0 e0       	ldi	r27, 0x00	; 0
    2152:	e9 e5       	ldi	r30, 0x59	; 89
    2154:	f0 e0       	ldi	r31, 0x00	; 0
    2156:	80 81       	ld	r24, Z
    2158:	8c 63       	ori	r24, 0x3C	; 60
    215a:	8c 93       	st	X, r24
    215c:	c8 c0       	rjmp	.+400    	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    215e:	e9 81       	ldd	r30, Y+1	; 0x01
    2160:	fa 81       	ldd	r31, Y+2	; 0x02
    2162:	82 81       	ldd	r24, Z+2	; 0x02
    2164:	88 23       	and	r24, r24
    2166:	09 f0       	breq	.+2      	; 0x216a <PWM_vInit+0x6f0>
    2168:	c2 c0       	rjmp	.+388    	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    216a:	e9 81       	ldd	r30, Y+1	; 0x01
    216c:	fa 81       	ldd	r31, Y+2	; 0x02
    216e:	83 81       	ldd	r24, Z+3	; 0x03
    2170:	81 30       	cpi	r24, 0x01	; 1
    2172:	49 f4       	brne	.+18     	; 0x2186 <PWM_vInit+0x70c>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    2174:	af e4       	ldi	r26, 0x4F	; 79
    2176:	b0 e0       	ldi	r27, 0x00	; 0
    2178:	ef e4       	ldi	r30, 0x4F	; 79
    217a:	f0 e0       	ldi	r31, 0x00	; 0
    217c:	80 81       	ld	r24, Z
    217e:	8f 7c       	andi	r24, 0xCF	; 207
    2180:	80 62       	ori	r24, 0x20	; 32
    2182:	8c 93       	st	X, r24
    2184:	b4 c0       	rjmp	.+360    	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2186:	e9 81       	ldd	r30, Y+1	; 0x01
    2188:	fa 81       	ldd	r31, Y+2	; 0x02
    218a:	83 81       	ldd	r24, Z+3	; 0x03
    218c:	88 23       	and	r24, r24
    218e:	09 f0       	breq	.+2      	; 0x2192 <PWM_vInit+0x718>
    2190:	ae c0       	rjmp	.+348    	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2192:	af e4       	ldi	r26, 0x4F	; 79
    2194:	b0 e0       	ldi	r27, 0x00	; 0
    2196:	ef e4       	ldi	r30, 0x4F	; 79
    2198:	f0 e0       	ldi	r31, 0x00	; 0
    219a:	80 81       	ld	r24, Z
    219c:	80 63       	ori	r24, 0x30	; 48
    219e:	8c 93       	st	X, r24
    21a0:	a6 c0       	rjmp	.+332    	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER1_FastOCR:
			TCCR1A_REG = (TCCR1A_REG & 0xFC) | 3;
    21a2:	af e4       	ldi	r26, 0x4F	; 79
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	ef e4       	ldi	r30, 0x4F	; 79
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	83 60       	ori	r24, 0x03	; 3
    21ae:	8c 93       	st	X, r24
			TCCR1B_REG = (TCCR1B_REG & 0xE7) | 0x18;
    21b0:	ae e4       	ldi	r26, 0x4E	; 78
    21b2:	b0 e0       	ldi	r27, 0x00	; 0
    21b4:	ee e4       	ldi	r30, 0x4E	; 78
    21b6:	f0 e0       	ldi	r31, 0x00	; 0
    21b8:	80 81       	ld	r24, Z
    21ba:	88 61       	ori	r24, 0x18	; 24
    21bc:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    21be:	e9 81       	ldd	r30, Y+1	; 0x01
    21c0:	fa 81       	ldd	r31, Y+2	; 0x02
    21c2:	82 81       	ldd	r24, Z+2	; 0x02
    21c4:	81 30       	cpi	r24, 0x01	; 1
    21c6:	41 f4       	brne	.+16     	; 0x21d8 <PWM_vInit+0x75e>
				TIMSK_REG |= 0x3C;
    21c8:	a9 e5       	ldi	r26, 0x59	; 89
    21ca:	b0 e0       	ldi	r27, 0x00	; 0
    21cc:	e9 e5       	ldi	r30, 0x59	; 89
    21ce:	f0 e0       	ldi	r31, 0x00	; 0
    21d0:	80 81       	ld	r24, Z
    21d2:	8c 63       	ori	r24, 0x3C	; 60
    21d4:	8c 93       	st	X, r24
    21d6:	8b c0       	rjmp	.+278    	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    21d8:	e9 81       	ldd	r30, Y+1	; 0x01
    21da:	fa 81       	ldd	r31, Y+2	; 0x02
    21dc:	82 81       	ldd	r24, Z+2	; 0x02
    21de:	88 23       	and	r24, r24
    21e0:	09 f0       	breq	.+2      	; 0x21e4 <PWM_vInit+0x76a>
    21e2:	85 c0       	rjmp	.+266    	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    21e4:	e9 81       	ldd	r30, Y+1	; 0x01
    21e6:	fa 81       	ldd	r31, Y+2	; 0x02
    21e8:	83 81       	ldd	r24, Z+3	; 0x03
    21ea:	81 30       	cpi	r24, 0x01	; 1
    21ec:	49 f4       	brne	.+18     	; 0x2200 <PWM_vInit+0x786>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x20;
    21ee:	af e4       	ldi	r26, 0x4F	; 79
    21f0:	b0 e0       	ldi	r27, 0x00	; 0
    21f2:	ef e4       	ldi	r30, 0x4F	; 79
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	8f 7c       	andi	r24, 0xCF	; 207
    21fa:	80 62       	ori	r24, 0x20	; 32
    21fc:	8c 93       	st	X, r24
    21fe:	77 c0       	rjmp	.+238    	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    2200:	e9 81       	ldd	r30, Y+1	; 0x01
    2202:	fa 81       	ldd	r31, Y+2	; 0x02
    2204:	83 81       	ldd	r24, Z+3	; 0x03
    2206:	88 23       	and	r24, r24
    2208:	09 f0       	breq	.+2      	; 0x220c <PWM_vInit+0x792>
    220a:	71 c0       	rjmp	.+226    	; 0x22ee <PWM_vInit+0x874>
					TCCR1A_REG = (TCCR1A_REG & 0xCF) | 0x30;
    220c:	af e4       	ldi	r26, 0x4F	; 79
    220e:	b0 e0       	ldi	r27, 0x00	; 0
    2210:	ef e4       	ldi	r30, 0x4F	; 79
    2212:	f0 e0       	ldi	r31, 0x00	; 0
    2214:	80 81       	ld	r24, Z
    2216:	80 63       	ori	r24, 0x30	; 48
    2218:	8c 93       	st	X, r24
    221a:	69 c0       	rjmp	.+210    	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_PhaseCorrect:
			TCCR2_REG = (TCCR2_REG & 0xB7) | 0x40;
    221c:	a5 e4       	ldi	r26, 0x45	; 69
    221e:	b0 e0       	ldi	r27, 0x00	; 0
    2220:	e5 e4       	ldi	r30, 0x45	; 69
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	80 81       	ld	r24, Z
    2226:	87 7b       	andi	r24, 0xB7	; 183
    2228:	80 64       	ori	r24, 0x40	; 64
    222a:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    222c:	e9 81       	ldd	r30, Y+1	; 0x01
    222e:	fa 81       	ldd	r31, Y+2	; 0x02
    2230:	82 81       	ldd	r24, Z+2	; 0x02
    2232:	81 30       	cpi	r24, 0x01	; 1
    2234:	41 f4       	brne	.+16     	; 0x2246 <PWM_vInit+0x7cc>
				TIMSK_REG |= 0xC0;
    2236:	a9 e5       	ldi	r26, 0x59	; 89
    2238:	b0 e0       	ldi	r27, 0x00	; 0
    223a:	e9 e5       	ldi	r30, 0x59	; 89
    223c:	f0 e0       	ldi	r31, 0x00	; 0
    223e:	80 81       	ld	r24, Z
    2240:	80 6c       	ori	r24, 0xC0	; 192
    2242:	8c 93       	st	X, r24
    2244:	54 c0       	rjmp	.+168    	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    2246:	e9 81       	ldd	r30, Y+1	; 0x01
    2248:	fa 81       	ldd	r31, Y+2	; 0x02
    224a:	82 81       	ldd	r24, Z+2	; 0x02
    224c:	88 23       	and	r24, r24
    224e:	09 f0       	breq	.+2      	; 0x2252 <PWM_vInit+0x7d8>
    2250:	4e c0       	rjmp	.+156    	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    2252:	e9 81       	ldd	r30, Y+1	; 0x01
    2254:	fa 81       	ldd	r31, Y+2	; 0x02
    2256:	83 81       	ldd	r24, Z+3	; 0x03
    2258:	81 30       	cpi	r24, 0x01	; 1
    225a:	49 f4       	brne	.+18     	; 0x226e <PWM_vInit+0x7f4>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x20;
    225c:	a5 e4       	ldi	r26, 0x45	; 69
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	ef e4       	ldi	r30, 0x4F	; 79
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	8f 7c       	andi	r24, 0xCF	; 207
    2268:	80 62       	ori	r24, 0x20	; 32
    226a:	8c 93       	st	X, r24
    226c:	40 c0       	rjmp	.+128    	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    226e:	e9 81       	ldd	r30, Y+1	; 0x01
    2270:	fa 81       	ldd	r31, Y+2	; 0x02
    2272:	83 81       	ldd	r24, Z+3	; 0x03
    2274:	88 23       	and	r24, r24
    2276:	d9 f5       	brne	.+118    	; 0x22ee <PWM_vInit+0x874>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x30;
    2278:	a5 e4       	ldi	r26, 0x45	; 69
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	ef e4       	ldi	r30, 0x4F	; 79
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	80 63       	ori	r24, 0x30	; 48
    2284:	8c 93       	st	X, r24
    2286:	33 c0       	rjmp	.+102    	; 0x22ee <PWM_vInit+0x874>
				else { /* Do Nothing */ }
			}
			else{ /* Do Nothing */ }
			break;
		case TIMER2_FastPWM:
			TCCR2_REG = (TCCR2_REG & 0xB7) | 0x48;
    2288:	a5 e4       	ldi	r26, 0x45	; 69
    228a:	b0 e0       	ldi	r27, 0x00	; 0
    228c:	e5 e4       	ldi	r30, 0x45	; 69
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	88 64       	ori	r24, 0x48	; 72
    2294:	8c 93       	st	X, r24
			if(PWM->PWM_ToggleMode == PWM_InterruptMode){
    2296:	e9 81       	ldd	r30, Y+1	; 0x01
    2298:	fa 81       	ldd	r31, Y+2	; 0x02
    229a:	82 81       	ldd	r24, Z+2	; 0x02
    229c:	81 30       	cpi	r24, 0x01	; 1
    229e:	41 f4       	brne	.+16     	; 0x22b0 <PWM_vInit+0x836>
				TIMSK_REG |= 0xC0;
    22a0:	a9 e5       	ldi	r26, 0x59	; 89
    22a2:	b0 e0       	ldi	r27, 0x00	; 0
    22a4:	e9 e5       	ldi	r30, 0x59	; 89
    22a6:	f0 e0       	ldi	r31, 0x00	; 0
    22a8:	80 81       	ld	r24, Z
    22aa:	80 6c       	ori	r24, 0xC0	; 192
    22ac:	8c 93       	st	X, r24
    22ae:	1f c0       	rjmp	.+62     	; 0x22ee <PWM_vInit+0x874>
			}
			else if(PWM->PWM_ToggleMode == PWM_OCmode){
    22b0:	e9 81       	ldd	r30, Y+1	; 0x01
    22b2:	fa 81       	ldd	r31, Y+2	; 0x02
    22b4:	82 81       	ldd	r24, Z+2	; 0x02
    22b6:	88 23       	and	r24, r24
    22b8:	d1 f4       	brne	.+52     	; 0x22ee <PWM_vInit+0x874>
				if(PWM->PWM_InvertOrNot == PWM_NonInvertingMode){
    22ba:	e9 81       	ldd	r30, Y+1	; 0x01
    22bc:	fa 81       	ldd	r31, Y+2	; 0x02
    22be:	83 81       	ldd	r24, Z+3	; 0x03
    22c0:	81 30       	cpi	r24, 0x01	; 1
    22c2:	49 f4       	brne	.+18     	; 0x22d6 <PWM_vInit+0x85c>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x20;
    22c4:	a5 e4       	ldi	r26, 0x45	; 69
    22c6:	b0 e0       	ldi	r27, 0x00	; 0
    22c8:	ef e4       	ldi	r30, 0x4F	; 79
    22ca:	f0 e0       	ldi	r31, 0x00	; 0
    22cc:	80 81       	ld	r24, Z
    22ce:	8f 7c       	andi	r24, 0xCF	; 207
    22d0:	80 62       	ori	r24, 0x20	; 32
    22d2:	8c 93       	st	X, r24
    22d4:	0c c0       	rjmp	.+24     	; 0x22ee <PWM_vInit+0x874>
				}
				else if(PWM->PWM_InvertOrNot == PWM_InvertingMode){
    22d6:	e9 81       	ldd	r30, Y+1	; 0x01
    22d8:	fa 81       	ldd	r31, Y+2	; 0x02
    22da:	83 81       	ldd	r24, Z+3	; 0x03
    22dc:	88 23       	and	r24, r24
    22de:	39 f4       	brne	.+14     	; 0x22ee <PWM_vInit+0x874>
					TCCR2_REG = (TCCR1A_REG & 0xCF) | 0x30;
    22e0:	a5 e4       	ldi	r26, 0x45	; 69
    22e2:	b0 e0       	ldi	r27, 0x00	; 0
    22e4:	ef e4       	ldi	r30, 0x4F	; 79
    22e6:	f0 e0       	ldi	r31, 0x00	; 0
    22e8:	80 81       	ld	r24, Z
    22ea:	80 63       	ori	r24, 0x30	; 48
    22ec:	8c 93       	st	X, r24
			else{ /* Do Nothing */ }
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    22ee:	0f 90       	pop	r0
    22f0:	0f 90       	pop	r0
    22f2:	0f 90       	pop	r0
    22f4:	0f 90       	pop	r0
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <PWM_vSetICR>:

void PWM_vSetICR(const PWM_cfg_t *PWM, u16 Copy_u16ICRValue){
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <PWM_vSetICR+0x6>
    2302:	00 d0       	rcall	.+0      	; 0x2304 <PWM_vSetICR+0x8>
    2304:	cd b7       	in	r28, 0x3d	; 61
    2306:	de b7       	in	r29, 0x3e	; 62
    2308:	9a 83       	std	Y+2, r25	; 0x02
    230a:	89 83       	std	Y+1, r24	; 0x01
    230c:	7c 83       	std	Y+4, r23	; 0x04
    230e:	6b 83       	std	Y+3, r22	; 0x03
	if(PWM != NULL){
    2310:	89 81       	ldd	r24, Y+1	; 0x01
    2312:	9a 81       	ldd	r25, Y+2	; 0x02
    2314:	00 97       	sbiw	r24, 0x00	; 0
    2316:	79 f0       	breq	.+30     	; 0x2336 <PWM_vSetICR+0x3a>
		switch(PWM->PWM_TimerChannel){
    2318:	e9 81       	ldd	r30, Y+1	; 0x01
    231a:	fa 81       	ldd	r31, Y+2	; 0x02
    231c:	80 81       	ld	r24, Z
    231e:	88 2f       	mov	r24, r24
    2320:	90 e0       	ldi	r25, 0x00	; 0
    2322:	02 97       	sbiw	r24, 0x02	; 2
    2324:	8c 30       	cpi	r24, 0x0C	; 12
    2326:	91 05       	cpc	r25, r1
    2328:	30 f4       	brcc	.+12     	; 0x2336 <PWM_vSetICR+0x3a>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			ICR1_REG = Copy_u16ICRValue;
    232a:	e6 e4       	ldi	r30, 0x46	; 70
    232c:	f0 e0       	ldi	r31, 0x00	; 0
    232e:	8b 81       	ldd	r24, Y+3	; 0x03
    2330:	9c 81       	ldd	r25, Y+4	; 0x04
    2332:	91 83       	std	Z+1, r25	; 0x01
    2334:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    2336:	0f 90       	pop	r0
    2338:	0f 90       	pop	r0
    233a:	0f 90       	pop	r0
    233c:	0f 90       	pop	r0
    233e:	cf 91       	pop	r28
    2340:	df 91       	pop	r29
    2342:	08 95       	ret

00002344 <PWM_vSetOCR>:

void PWM_vSetOCR(const PWM_cfg_t *PWM, u16 Copy_u16OCRValue){
    2344:	df 93       	push	r29
    2346:	cf 93       	push	r28
    2348:	00 d0       	rcall	.+0      	; 0x234a <PWM_vSetOCR+0x6>
    234a:	00 d0       	rcall	.+0      	; 0x234c <PWM_vSetOCR+0x8>
    234c:	00 d0       	rcall	.+0      	; 0x234e <PWM_vSetOCR+0xa>
    234e:	cd b7       	in	r28, 0x3d	; 61
    2350:	de b7       	in	r29, 0x3e	; 62
    2352:	9a 83       	std	Y+2, r25	; 0x02
    2354:	89 83       	std	Y+1, r24	; 0x01
    2356:	7c 83       	std	Y+4, r23	; 0x04
    2358:	6b 83       	std	Y+3, r22	; 0x03
	if(PWM != NULL){
    235a:	89 81       	ldd	r24, Y+1	; 0x01
    235c:	9a 81       	ldd	r25, Y+2	; 0x02
    235e:	00 97       	sbiw	r24, 0x00	; 0
    2360:	61 f1       	breq	.+88     	; 0x23ba <PWM_vSetOCR+0x76>
		switch(PWM->PWM_TimerChannel){
    2362:	e9 81       	ldd	r30, Y+1	; 0x01
    2364:	fa 81       	ldd	r31, Y+2	; 0x02
    2366:	80 81       	ld	r24, Z
    2368:	28 2f       	mov	r18, r24
    236a:	30 e0       	ldi	r19, 0x00	; 0
    236c:	3e 83       	std	Y+6, r19	; 0x06
    236e:	2d 83       	std	Y+5, r18	; 0x05
    2370:	8d 81       	ldd	r24, Y+5	; 0x05
    2372:	9e 81       	ldd	r25, Y+6	; 0x06
    2374:	8e 30       	cpi	r24, 0x0E	; 14
    2376:	91 05       	cpc	r25, r1
    2378:	54 f4       	brge	.+20     	; 0x238e <PWM_vSetOCR+0x4a>
    237a:	2d 81       	ldd	r18, Y+5	; 0x05
    237c:	3e 81       	ldd	r19, Y+6	; 0x06
    237e:	22 30       	cpi	r18, 0x02	; 2
    2380:	31 05       	cpc	r19, r1
    2382:	84 f4       	brge	.+32     	; 0x23a4 <PWM_vSetOCR+0x60>
    2384:	8d 81       	ldd	r24, Y+5	; 0x05
    2386:	9e 81       	ldd	r25, Y+6	; 0x06
    2388:	99 23       	and	r25, r25
    238a:	bc f0       	brlt	.+46     	; 0x23ba <PWM_vSetOCR+0x76>
    238c:	06 c0       	rjmp	.+12     	; 0x239a <PWM_vSetOCR+0x56>
    238e:	2d 81       	ldd	r18, Y+5	; 0x05
    2390:	3e 81       	ldd	r19, Y+6	; 0x06
    2392:	20 31       	cpi	r18, 0x10	; 16
    2394:	31 05       	cpc	r19, r1
    2396:	8c f4       	brge	.+34     	; 0x23ba <PWM_vSetOCR+0x76>
    2398:	0c c0       	rjmp	.+24     	; 0x23b2 <PWM_vSetOCR+0x6e>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			OCR0_REG = (u8)Copy_u16OCRValue;
    239a:	ec e5       	ldi	r30, 0x5C	; 92
    239c:	f0 e0       	ldi	r31, 0x00	; 0
    239e:	8b 81       	ldd	r24, Y+3	; 0x03
    23a0:	80 83       	st	Z, r24
    23a2:	0b c0       	rjmp	.+22     	; 0x23ba <PWM_vSetOCR+0x76>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			OCR1A_REG = Copy_u16OCRValue;
    23a4:	ea e4       	ldi	r30, 0x4A	; 74
    23a6:	f0 e0       	ldi	r31, 0x00	; 0
    23a8:	8b 81       	ldd	r24, Y+3	; 0x03
    23aa:	9c 81       	ldd	r25, Y+4	; 0x04
    23ac:	91 83       	std	Z+1, r25	; 0x01
    23ae:	80 83       	st	Z, r24
    23b0:	04 c0       	rjmp	.+8      	; 0x23ba <PWM_vSetOCR+0x76>
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			OCR2_REG = (u8)Copy_u16OCRValue;
    23b2:	e3 e4       	ldi	r30, 0x43	; 67
    23b4:	f0 e0       	ldi	r31, 0x00	; 0
    23b6:	8b 81       	ldd	r24, Y+3	; 0x03
    23b8:	80 83       	st	Z, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    23ba:	26 96       	adiw	r28, 0x06	; 6
    23bc:	0f b6       	in	r0, 0x3f	; 63
    23be:	f8 94       	cli
    23c0:	de bf       	out	0x3e, r29	; 62
    23c2:	0f be       	out	0x3f, r0	; 63
    23c4:	cd bf       	out	0x3d, r28	; 61
    23c6:	cf 91       	pop	r28
    23c8:	df 91       	pop	r29
    23ca:	08 95       	ret

000023cc <PWM_vStart>:

void PWM_vStart(const PWM_cfg_t *PWM){
    23cc:	df 93       	push	r29
    23ce:	cf 93       	push	r28
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
    23d4:	2a 97       	sbiw	r28, 0x0a	; 10
    23d6:	0f b6       	in	r0, 0x3f	; 63
    23d8:	f8 94       	cli
    23da:	de bf       	out	0x3e, r29	; 62
    23dc:	0f be       	out	0x3f, r0	; 63
    23de:	cd bf       	out	0x3d, r28	; 61
    23e0:	9a 83       	std	Y+2, r25	; 0x02
    23e2:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    23e4:	89 81       	ldd	r24, Y+1	; 0x01
    23e6:	9a 81       	ldd	r25, Y+2	; 0x02
    23e8:	00 97       	sbiw	r24, 0x00	; 0
    23ea:	09 f4       	brne	.+2      	; 0x23ee <PWM_vStart+0x22>
    23ec:	98 c1       	rjmp	.+816    	; 0x271e <PWM_vStart+0x352>
		switch(PWM->PWM_TimerChannel){
    23ee:	e9 81       	ldd	r30, Y+1	; 0x01
    23f0:	fa 81       	ldd	r31, Y+2	; 0x02
    23f2:	80 81       	ld	r24, Z
    23f4:	28 2f       	mov	r18, r24
    23f6:	30 e0       	ldi	r19, 0x00	; 0
    23f8:	3a 87       	std	Y+10, r19	; 0x0a
    23fa:	29 87       	std	Y+9, r18	; 0x09
    23fc:	89 85       	ldd	r24, Y+9	; 0x09
    23fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2400:	8e 30       	cpi	r24, 0x0E	; 14
    2402:	91 05       	cpc	r25, r1
    2404:	64 f4       	brge	.+24     	; 0x241e <PWM_vStart+0x52>
    2406:	29 85       	ldd	r18, Y+9	; 0x09
    2408:	3a 85       	ldd	r19, Y+10	; 0x0a
    240a:	22 30       	cpi	r18, 0x02	; 2
    240c:	31 05       	cpc	r19, r1
    240e:	0c f0       	brlt	.+2      	; 0x2412 <PWM_vStart+0x46>
    2410:	8b c0       	rjmp	.+278    	; 0x2528 <PWM_vStart+0x15c>
    2412:	89 85       	ldd	r24, Y+9	; 0x09
    2414:	9a 85       	ldd	r25, Y+10	; 0x0a
    2416:	99 23       	and	r25, r25
    2418:	0c f4       	brge	.+2      	; 0x241c <PWM_vStart+0x50>
    241a:	81 c1       	rjmp	.+770    	; 0x271e <PWM_vStart+0x352>
    241c:	07 c0       	rjmp	.+14     	; 0x242c <PWM_vStart+0x60>
    241e:	29 85       	ldd	r18, Y+9	; 0x09
    2420:	3a 85       	ldd	r19, Y+10	; 0x0a
    2422:	20 31       	cpi	r18, 0x10	; 16
    2424:	31 05       	cpc	r19, r1
    2426:	0c f0       	brlt	.+2      	; 0x242a <PWM_vStart+0x5e>
    2428:	7a c1       	rjmp	.+756    	; 0x271e <PWM_vStart+0x352>
    242a:	fc c0       	rjmp	.+504    	; 0x2624 <PWM_vStart+0x258>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			switch(PWM->PWM_TimerPrescale){
    242c:	e9 81       	ldd	r30, Y+1	; 0x01
    242e:	fa 81       	ldd	r31, Y+2	; 0x02
    2430:	81 81       	ldd	r24, Z+1	; 0x01
    2432:	28 2f       	mov	r18, r24
    2434:	30 e0       	ldi	r19, 0x00	; 0
    2436:	38 87       	std	Y+8, r19	; 0x08
    2438:	2f 83       	std	Y+7, r18	; 0x07
    243a:	8f 81       	ldd	r24, Y+7	; 0x07
    243c:	98 85       	ldd	r25, Y+8	; 0x08
    243e:	83 30       	cpi	r24, 0x03	; 3
    2440:	91 05       	cpc	r25, r1
    2442:	09 f4       	brne	.+2      	; 0x2446 <PWM_vStart+0x7a>
    2444:	45 c0       	rjmp	.+138    	; 0x24d0 <PWM_vStart+0x104>
    2446:	2f 81       	ldd	r18, Y+7	; 0x07
    2448:	38 85       	ldd	r19, Y+8	; 0x08
    244a:	24 30       	cpi	r18, 0x04	; 4
    244c:	31 05       	cpc	r19, r1
    244e:	7c f4       	brge	.+30     	; 0x246e <PWM_vStart+0xa2>
    2450:	8f 81       	ldd	r24, Y+7	; 0x07
    2452:	98 85       	ldd	r25, Y+8	; 0x08
    2454:	81 30       	cpi	r24, 0x01	; 1
    2456:	91 05       	cpc	r25, r1
    2458:	49 f1       	breq	.+82     	; 0x24ac <PWM_vStart+0xe0>
    245a:	2f 81       	ldd	r18, Y+7	; 0x07
    245c:	38 85       	ldd	r19, Y+8	; 0x08
    245e:	22 30       	cpi	r18, 0x02	; 2
    2460:	31 05       	cpc	r19, r1
    2462:	6c f5       	brge	.+90     	; 0x24be <PWM_vStart+0xf2>
    2464:	8f 81       	ldd	r24, Y+7	; 0x07
    2466:	98 85       	ldd	r25, Y+8	; 0x08
    2468:	00 97       	sbiw	r24, 0x00	; 0
    246a:	c1 f0       	breq	.+48     	; 0x249c <PWM_vStart+0xd0>
    246c:	58 c1       	rjmp	.+688    	; 0x271e <PWM_vStart+0x352>
    246e:	2f 81       	ldd	r18, Y+7	; 0x07
    2470:	38 85       	ldd	r19, Y+8	; 0x08
    2472:	25 30       	cpi	r18, 0x05	; 5
    2474:	31 05       	cpc	r19, r1
    2476:	09 f4       	brne	.+2      	; 0x247a <PWM_vStart+0xae>
    2478:	3d c0       	rjmp	.+122    	; 0x24f4 <PWM_vStart+0x128>
    247a:	8f 81       	ldd	r24, Y+7	; 0x07
    247c:	98 85       	ldd	r25, Y+8	; 0x08
    247e:	85 30       	cpi	r24, 0x05	; 5
    2480:	91 05       	cpc	r25, r1
    2482:	7c f1       	brlt	.+94     	; 0x24e2 <PWM_vStart+0x116>
    2484:	2f 81       	ldd	r18, Y+7	; 0x07
    2486:	38 85       	ldd	r19, Y+8	; 0x08
    2488:	26 30       	cpi	r18, 0x06	; 6
    248a:	31 05       	cpc	r19, r1
    248c:	e1 f1       	breq	.+120    	; 0x2506 <PWM_vStart+0x13a>
    248e:	8f 81       	ldd	r24, Y+7	; 0x07
    2490:	98 85       	ldd	r25, Y+8	; 0x08
    2492:	87 30       	cpi	r24, 0x07	; 7
    2494:	91 05       	cpc	r25, r1
    2496:	09 f4       	brne	.+2      	; 0x249a <PWM_vStart+0xce>
    2498:	3f c0       	rjmp	.+126    	; 0x2518 <PWM_vStart+0x14c>
    249a:	41 c1       	rjmp	.+642    	; 0x271e <PWM_vStart+0x352>
			case PRE_NO_CLK:
				TCCR0_REG = (TCCR0_REG&0xF8);
    249c:	a3 e5       	ldi	r26, 0x53	; 83
    249e:	b0 e0       	ldi	r27, 0x00	; 0
    24a0:	e3 e5       	ldi	r30, 0x53	; 83
    24a2:	f0 e0       	ldi	r31, 0x00	; 0
    24a4:	80 81       	ld	r24, Z
    24a6:	88 7f       	andi	r24, 0xF8	; 248
    24a8:	8c 93       	st	X, r24
    24aa:	39 c1       	rjmp	.+626    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_0:
				TCCR0_REG = (TCCR0_REG&0xF8) | 1;
    24ac:	a3 e5       	ldi	r26, 0x53	; 83
    24ae:	b0 e0       	ldi	r27, 0x00	; 0
    24b0:	e3 e5       	ldi	r30, 0x53	; 83
    24b2:	f0 e0       	ldi	r31, 0x00	; 0
    24b4:	80 81       	ld	r24, Z
    24b6:	88 7f       	andi	r24, 0xF8	; 248
    24b8:	81 60       	ori	r24, 0x01	; 1
    24ba:	8c 93       	st	X, r24
    24bc:	30 c1       	rjmp	.+608    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_8:
				TCCR0_REG = (TCCR0_REG&0xF8) | 2;
    24be:	a3 e5       	ldi	r26, 0x53	; 83
    24c0:	b0 e0       	ldi	r27, 0x00	; 0
    24c2:	e3 e5       	ldi	r30, 0x53	; 83
    24c4:	f0 e0       	ldi	r31, 0x00	; 0
    24c6:	80 81       	ld	r24, Z
    24c8:	88 7f       	andi	r24, 0xF8	; 248
    24ca:	82 60       	ori	r24, 0x02	; 2
    24cc:	8c 93       	st	X, r24
    24ce:	27 c1       	rjmp	.+590    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_64:
				TCCR0_REG = (TCCR0_REG&0xF8) | 3;
    24d0:	a3 e5       	ldi	r26, 0x53	; 83
    24d2:	b0 e0       	ldi	r27, 0x00	; 0
    24d4:	e3 e5       	ldi	r30, 0x53	; 83
    24d6:	f0 e0       	ldi	r31, 0x00	; 0
    24d8:	80 81       	ld	r24, Z
    24da:	88 7f       	andi	r24, 0xF8	; 248
    24dc:	83 60       	ori	r24, 0x03	; 3
    24de:	8c 93       	st	X, r24
    24e0:	1e c1       	rjmp	.+572    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_256:
				TCCR0_REG = (TCCR0_REG&0xF8) | 4;
    24e2:	a3 e5       	ldi	r26, 0x53	; 83
    24e4:	b0 e0       	ldi	r27, 0x00	; 0
    24e6:	e3 e5       	ldi	r30, 0x53	; 83
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	80 81       	ld	r24, Z
    24ec:	88 7f       	andi	r24, 0xF8	; 248
    24ee:	84 60       	ori	r24, 0x04	; 4
    24f0:	8c 93       	st	X, r24
    24f2:	15 c1       	rjmp	.+554    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_1024:
				TCCR0_REG = (TCCR0_REG&0xF8) | 5;
    24f4:	a3 e5       	ldi	r26, 0x53	; 83
    24f6:	b0 e0       	ldi	r27, 0x00	; 0
    24f8:	e3 e5       	ldi	r30, 0x53	; 83
    24fa:	f0 e0       	ldi	r31, 0x00	; 0
    24fc:	80 81       	ld	r24, Z
    24fe:	88 7f       	andi	r24, 0xF8	; 248
    2500:	85 60       	ori	r24, 0x05	; 5
    2502:	8c 93       	st	X, r24
    2504:	0c c1       	rjmp	.+536    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_EXT_FALLING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 6;
    2506:	a3 e5       	ldi	r26, 0x53	; 83
    2508:	b0 e0       	ldi	r27, 0x00	; 0
    250a:	e3 e5       	ldi	r30, 0x53	; 83
    250c:	f0 e0       	ldi	r31, 0x00	; 0
    250e:	80 81       	ld	r24, Z
    2510:	88 7f       	andi	r24, 0xF8	; 248
    2512:	86 60       	ori	r24, 0x06	; 6
    2514:	8c 93       	st	X, r24
    2516:	03 c1       	rjmp	.+518    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_EXT_RISING:
				TCCR0_REG = (TCCR0_REG&0xF8) | 7;
    2518:	a3 e5       	ldi	r26, 0x53	; 83
    251a:	b0 e0       	ldi	r27, 0x00	; 0
    251c:	e3 e5       	ldi	r30, 0x53	; 83
    251e:	f0 e0       	ldi	r31, 0x00	; 0
    2520:	80 81       	ld	r24, Z
    2522:	87 60       	ori	r24, 0x07	; 7
    2524:	8c 93       	st	X, r24
    2526:	fb c0       	rjmp	.+502    	; 0x271e <PWM_vStart+0x352>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			switch(PWM->PWM_TimerPrescale){
    2528:	e9 81       	ldd	r30, Y+1	; 0x01
    252a:	fa 81       	ldd	r31, Y+2	; 0x02
    252c:	81 81       	ldd	r24, Z+1	; 0x01
    252e:	28 2f       	mov	r18, r24
    2530:	30 e0       	ldi	r19, 0x00	; 0
    2532:	3e 83       	std	Y+6, r19	; 0x06
    2534:	2d 83       	std	Y+5, r18	; 0x05
    2536:	8d 81       	ldd	r24, Y+5	; 0x05
    2538:	9e 81       	ldd	r25, Y+6	; 0x06
    253a:	83 30       	cpi	r24, 0x03	; 3
    253c:	91 05       	cpc	r25, r1
    253e:	09 f4       	brne	.+2      	; 0x2542 <PWM_vStart+0x176>
    2540:	45 c0       	rjmp	.+138    	; 0x25cc <PWM_vStart+0x200>
    2542:	2d 81       	ldd	r18, Y+5	; 0x05
    2544:	3e 81       	ldd	r19, Y+6	; 0x06
    2546:	24 30       	cpi	r18, 0x04	; 4
    2548:	31 05       	cpc	r19, r1
    254a:	7c f4       	brge	.+30     	; 0x256a <PWM_vStart+0x19e>
    254c:	8d 81       	ldd	r24, Y+5	; 0x05
    254e:	9e 81       	ldd	r25, Y+6	; 0x06
    2550:	81 30       	cpi	r24, 0x01	; 1
    2552:	91 05       	cpc	r25, r1
    2554:	49 f1       	breq	.+82     	; 0x25a8 <PWM_vStart+0x1dc>
    2556:	2d 81       	ldd	r18, Y+5	; 0x05
    2558:	3e 81       	ldd	r19, Y+6	; 0x06
    255a:	22 30       	cpi	r18, 0x02	; 2
    255c:	31 05       	cpc	r19, r1
    255e:	6c f5       	brge	.+90     	; 0x25ba <PWM_vStart+0x1ee>
    2560:	8d 81       	ldd	r24, Y+5	; 0x05
    2562:	9e 81       	ldd	r25, Y+6	; 0x06
    2564:	00 97       	sbiw	r24, 0x00	; 0
    2566:	c1 f0       	breq	.+48     	; 0x2598 <PWM_vStart+0x1cc>
    2568:	da c0       	rjmp	.+436    	; 0x271e <PWM_vStart+0x352>
    256a:	2d 81       	ldd	r18, Y+5	; 0x05
    256c:	3e 81       	ldd	r19, Y+6	; 0x06
    256e:	25 30       	cpi	r18, 0x05	; 5
    2570:	31 05       	cpc	r19, r1
    2572:	09 f4       	brne	.+2      	; 0x2576 <PWM_vStart+0x1aa>
    2574:	3d c0       	rjmp	.+122    	; 0x25f0 <PWM_vStart+0x224>
    2576:	8d 81       	ldd	r24, Y+5	; 0x05
    2578:	9e 81       	ldd	r25, Y+6	; 0x06
    257a:	85 30       	cpi	r24, 0x05	; 5
    257c:	91 05       	cpc	r25, r1
    257e:	7c f1       	brlt	.+94     	; 0x25de <PWM_vStart+0x212>
    2580:	2d 81       	ldd	r18, Y+5	; 0x05
    2582:	3e 81       	ldd	r19, Y+6	; 0x06
    2584:	26 30       	cpi	r18, 0x06	; 6
    2586:	31 05       	cpc	r19, r1
    2588:	e1 f1       	breq	.+120    	; 0x2602 <PWM_vStart+0x236>
    258a:	8d 81       	ldd	r24, Y+5	; 0x05
    258c:	9e 81       	ldd	r25, Y+6	; 0x06
    258e:	87 30       	cpi	r24, 0x07	; 7
    2590:	91 05       	cpc	r25, r1
    2592:	09 f4       	brne	.+2      	; 0x2596 <PWM_vStart+0x1ca>
    2594:	3f c0       	rjmp	.+126    	; 0x2614 <PWM_vStart+0x248>
    2596:	c3 c0       	rjmp	.+390    	; 0x271e <PWM_vStart+0x352>
			case PRE_NO_CLK:
				TCCR1B_REG = (TCCR1B_REG&0xF8);
    2598:	ae e4       	ldi	r26, 0x4E	; 78
    259a:	b0 e0       	ldi	r27, 0x00	; 0
    259c:	ee e4       	ldi	r30, 0x4E	; 78
    259e:	f0 e0       	ldi	r31, 0x00	; 0
    25a0:	80 81       	ld	r24, Z
    25a2:	88 7f       	andi	r24, 0xF8	; 248
    25a4:	8c 93       	st	X, r24
    25a6:	bb c0       	rjmp	.+374    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_0:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 1;
    25a8:	ae e4       	ldi	r26, 0x4E	; 78
    25aa:	b0 e0       	ldi	r27, 0x00	; 0
    25ac:	ee e4       	ldi	r30, 0x4E	; 78
    25ae:	f0 e0       	ldi	r31, 0x00	; 0
    25b0:	80 81       	ld	r24, Z
    25b2:	88 7f       	andi	r24, 0xF8	; 248
    25b4:	81 60       	ori	r24, 0x01	; 1
    25b6:	8c 93       	st	X, r24
    25b8:	b2 c0       	rjmp	.+356    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_8:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 2;
    25ba:	ae e4       	ldi	r26, 0x4E	; 78
    25bc:	b0 e0       	ldi	r27, 0x00	; 0
    25be:	ee e4       	ldi	r30, 0x4E	; 78
    25c0:	f0 e0       	ldi	r31, 0x00	; 0
    25c2:	80 81       	ld	r24, Z
    25c4:	88 7f       	andi	r24, 0xF8	; 248
    25c6:	82 60       	ori	r24, 0x02	; 2
    25c8:	8c 93       	st	X, r24
    25ca:	a9 c0       	rjmp	.+338    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_64:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 3;
    25cc:	ae e4       	ldi	r26, 0x4E	; 78
    25ce:	b0 e0       	ldi	r27, 0x00	; 0
    25d0:	ee e4       	ldi	r30, 0x4E	; 78
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	80 81       	ld	r24, Z
    25d6:	88 7f       	andi	r24, 0xF8	; 248
    25d8:	83 60       	ori	r24, 0x03	; 3
    25da:	8c 93       	st	X, r24
    25dc:	a0 c0       	rjmp	.+320    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_256:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 4;
    25de:	ae e4       	ldi	r26, 0x4E	; 78
    25e0:	b0 e0       	ldi	r27, 0x00	; 0
    25e2:	ee e4       	ldi	r30, 0x4E	; 78
    25e4:	f0 e0       	ldi	r31, 0x00	; 0
    25e6:	80 81       	ld	r24, Z
    25e8:	88 7f       	andi	r24, 0xF8	; 248
    25ea:	84 60       	ori	r24, 0x04	; 4
    25ec:	8c 93       	st	X, r24
    25ee:	97 c0       	rjmp	.+302    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_1024:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 5;
    25f0:	ae e4       	ldi	r26, 0x4E	; 78
    25f2:	b0 e0       	ldi	r27, 0x00	; 0
    25f4:	ee e4       	ldi	r30, 0x4E	; 78
    25f6:	f0 e0       	ldi	r31, 0x00	; 0
    25f8:	80 81       	ld	r24, Z
    25fa:	88 7f       	andi	r24, 0xF8	; 248
    25fc:	85 60       	ori	r24, 0x05	; 5
    25fe:	8c 93       	st	X, r24
    2600:	8e c0       	rjmp	.+284    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_EXT_FALLING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 6;
    2602:	ae e4       	ldi	r26, 0x4E	; 78
    2604:	b0 e0       	ldi	r27, 0x00	; 0
    2606:	ee e4       	ldi	r30, 0x4E	; 78
    2608:	f0 e0       	ldi	r31, 0x00	; 0
    260a:	80 81       	ld	r24, Z
    260c:	88 7f       	andi	r24, 0xF8	; 248
    260e:	86 60       	ori	r24, 0x06	; 6
    2610:	8c 93       	st	X, r24
    2612:	85 c0       	rjmp	.+266    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_EXT_RISING:
				TCCR1B_REG = (TCCR1B_REG&0xF8) | 7;
    2614:	ae e4       	ldi	r26, 0x4E	; 78
    2616:	b0 e0       	ldi	r27, 0x00	; 0
    2618:	ee e4       	ldi	r30, 0x4E	; 78
    261a:	f0 e0       	ldi	r31, 0x00	; 0
    261c:	80 81       	ld	r24, Z
    261e:	87 60       	ori	r24, 0x07	; 7
    2620:	8c 93       	st	X, r24
    2622:	7d c0       	rjmp	.+250    	; 0x271e <PWM_vStart+0x352>
			default: /* Do Nothing */ break;
			}
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			switch(PWM->PWM_TimerPrescale){
    2624:	e9 81       	ldd	r30, Y+1	; 0x01
    2626:	fa 81       	ldd	r31, Y+2	; 0x02
    2628:	81 81       	ldd	r24, Z+1	; 0x01
    262a:	28 2f       	mov	r18, r24
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	3c 83       	std	Y+4, r19	; 0x04
    2630:	2b 83       	std	Y+3, r18	; 0x03
    2632:	8b 81       	ldd	r24, Y+3	; 0x03
    2634:	9c 81       	ldd	r25, Y+4	; 0x04
    2636:	83 30       	cpi	r24, 0x03	; 3
    2638:	91 05       	cpc	r25, r1
    263a:	09 f4       	brne	.+2      	; 0x263e <PWM_vStart+0x272>
    263c:	4e c0       	rjmp	.+156    	; 0x26da <PWM_vStart+0x30e>
    263e:	2b 81       	ldd	r18, Y+3	; 0x03
    2640:	3c 81       	ldd	r19, Y+4	; 0x04
    2642:	24 30       	cpi	r18, 0x04	; 4
    2644:	31 05       	cpc	r19, r1
    2646:	7c f4       	brge	.+30     	; 0x2666 <PWM_vStart+0x29a>
    2648:	8b 81       	ldd	r24, Y+3	; 0x03
    264a:	9c 81       	ldd	r25, Y+4	; 0x04
    264c:	81 30       	cpi	r24, 0x01	; 1
    264e:	91 05       	cpc	r25, r1
    2650:	49 f1       	breq	.+82     	; 0x26a4 <PWM_vStart+0x2d8>
    2652:	2b 81       	ldd	r18, Y+3	; 0x03
    2654:	3c 81       	ldd	r19, Y+4	; 0x04
    2656:	22 30       	cpi	r18, 0x02	; 2
    2658:	31 05       	cpc	r19, r1
    265a:	6c f5       	brge	.+90     	; 0x26b6 <PWM_vStart+0x2ea>
    265c:	8b 81       	ldd	r24, Y+3	; 0x03
    265e:	9c 81       	ldd	r25, Y+4	; 0x04
    2660:	00 97       	sbiw	r24, 0x00	; 0
    2662:	c1 f0       	breq	.+48     	; 0x2694 <PWM_vStart+0x2c8>
    2664:	5c c0       	rjmp	.+184    	; 0x271e <PWM_vStart+0x352>
    2666:	2b 81       	ldd	r18, Y+3	; 0x03
    2668:	3c 81       	ldd	r19, Y+4	; 0x04
    266a:	25 30       	cpi	r18, 0x05	; 5
    266c:	31 05       	cpc	r19, r1
    266e:	09 f4       	brne	.+2      	; 0x2672 <PWM_vStart+0x2a6>
    2670:	4f c0       	rjmp	.+158    	; 0x2710 <PWM_vStart+0x344>
    2672:	8b 81       	ldd	r24, Y+3	; 0x03
    2674:	9c 81       	ldd	r25, Y+4	; 0x04
    2676:	85 30       	cpi	r24, 0x05	; 5
    2678:	91 05       	cpc	r25, r1
    267a:	0c f4       	brge	.+2      	; 0x267e <PWM_vStart+0x2b2>
    267c:	40 c0       	rjmp	.+128    	; 0x26fe <PWM_vStart+0x332>
    267e:	2b 81       	ldd	r18, Y+3	; 0x03
    2680:	3c 81       	ldd	r19, Y+4	; 0x04
    2682:	28 30       	cpi	r18, 0x08	; 8
    2684:	31 05       	cpc	r19, r1
    2686:	01 f1       	breq	.+64     	; 0x26c8 <PWM_vStart+0x2fc>
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	9c 81       	ldd	r25, Y+4	; 0x04
    268c:	89 30       	cpi	r24, 0x09	; 9
    268e:	91 05       	cpc	r25, r1
    2690:	69 f1       	breq	.+90     	; 0x26ec <PWM_vStart+0x320>
    2692:	45 c0       	rjmp	.+138    	; 0x271e <PWM_vStart+0x352>
			case PRE_NO_CLK:
				TCCR2_REG = (TCCR2_REG&0xF8);
    2694:	a5 e4       	ldi	r26, 0x45	; 69
    2696:	b0 e0       	ldi	r27, 0x00	; 0
    2698:	e5 e4       	ldi	r30, 0x45	; 69
    269a:	f0 e0       	ldi	r31, 0x00	; 0
    269c:	80 81       	ld	r24, Z
    269e:	88 7f       	andi	r24, 0xF8	; 248
    26a0:	8c 93       	st	X, r24
    26a2:	3d c0       	rjmp	.+122    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_0:
				TCCR2_REG = (TCCR2_REG&0xF8) | 1;
    26a4:	a5 e4       	ldi	r26, 0x45	; 69
    26a6:	b0 e0       	ldi	r27, 0x00	; 0
    26a8:	e5 e4       	ldi	r30, 0x45	; 69
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	80 81       	ld	r24, Z
    26ae:	88 7f       	andi	r24, 0xF8	; 248
    26b0:	81 60       	ori	r24, 0x01	; 1
    26b2:	8c 93       	st	X, r24
    26b4:	34 c0       	rjmp	.+104    	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_8:
				TCCR2_REG = (TCCR2_REG&0xF8) | 2;
    26b6:	a5 e4       	ldi	r26, 0x45	; 69
    26b8:	b0 e0       	ldi	r27, 0x00	; 0
    26ba:	e5 e4       	ldi	r30, 0x45	; 69
    26bc:	f0 e0       	ldi	r31, 0x00	; 0
    26be:	80 81       	ld	r24, Z
    26c0:	88 7f       	andi	r24, 0xF8	; 248
    26c2:	82 60       	ori	r24, 0x02	; 2
    26c4:	8c 93       	st	X, r24
    26c6:	2b c0       	rjmp	.+86     	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_32:
				TCCR2_REG = (TCCR2_REG&0xF8) | 3;
    26c8:	a5 e4       	ldi	r26, 0x45	; 69
    26ca:	b0 e0       	ldi	r27, 0x00	; 0
    26cc:	e5 e4       	ldi	r30, 0x45	; 69
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	80 81       	ld	r24, Z
    26d2:	88 7f       	andi	r24, 0xF8	; 248
    26d4:	83 60       	ori	r24, 0x03	; 3
    26d6:	8c 93       	st	X, r24
    26d8:	22 c0       	rjmp	.+68     	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_64:
				TCCR2_REG = (TCCR2_REG&0xF8) | 4;
    26da:	a5 e4       	ldi	r26, 0x45	; 69
    26dc:	b0 e0       	ldi	r27, 0x00	; 0
    26de:	e5 e4       	ldi	r30, 0x45	; 69
    26e0:	f0 e0       	ldi	r31, 0x00	; 0
    26e2:	80 81       	ld	r24, Z
    26e4:	88 7f       	andi	r24, 0xF8	; 248
    26e6:	84 60       	ori	r24, 0x04	; 4
    26e8:	8c 93       	st	X, r24
    26ea:	19 c0       	rjmp	.+50     	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_128:
				TCCR2_REG = (TCCR2_REG&0xF8) | 5;
    26ec:	a5 e4       	ldi	r26, 0x45	; 69
    26ee:	b0 e0       	ldi	r27, 0x00	; 0
    26f0:	e5 e4       	ldi	r30, 0x45	; 69
    26f2:	f0 e0       	ldi	r31, 0x00	; 0
    26f4:	80 81       	ld	r24, Z
    26f6:	88 7f       	andi	r24, 0xF8	; 248
    26f8:	85 60       	ori	r24, 0x05	; 5
    26fa:	8c 93       	st	X, r24
    26fc:	10 c0       	rjmp	.+32     	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_256:
				TCCR2_REG = (TCCR2_REG&0xF8) | 6;
    26fe:	a5 e4       	ldi	r26, 0x45	; 69
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e5 e4       	ldi	r30, 0x45	; 69
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	88 7f       	andi	r24, 0xF8	; 248
    270a:	86 60       	ori	r24, 0x06	; 6
    270c:	8c 93       	st	X, r24
    270e:	07 c0       	rjmp	.+14     	; 0x271e <PWM_vStart+0x352>
				break;
			case PRE_1024:
				TCCR2_REG = (TCCR2_REG&0xF8) | 7;
    2710:	a5 e4       	ldi	r26, 0x45	; 69
    2712:	b0 e0       	ldi	r27, 0x00	; 0
    2714:	e5 e4       	ldi	r30, 0x45	; 69
    2716:	f0 e0       	ldi	r31, 0x00	; 0
    2718:	80 81       	ld	r24, Z
    271a:	87 60       	ori	r24, 0x07	; 7
    271c:	8c 93       	st	X, r24
			}
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    271e:	2a 96       	adiw	r28, 0x0a	; 10
    2720:	0f b6       	in	r0, 0x3f	; 63
    2722:	f8 94       	cli
    2724:	de bf       	out	0x3e, r29	; 62
    2726:	0f be       	out	0x3f, r0	; 63
    2728:	cd bf       	out	0x3d, r28	; 61
    272a:	cf 91       	pop	r28
    272c:	df 91       	pop	r29
    272e:	08 95       	ret

00002730 <PWM_vStop>:

void PWM_vStop(const PWM_cfg_t *PWM){
    2730:	df 93       	push	r29
    2732:	cf 93       	push	r28
    2734:	00 d0       	rcall	.+0      	; 0x2736 <PWM_vStop+0x6>
    2736:	00 d0       	rcall	.+0      	; 0x2738 <PWM_vStop+0x8>
    2738:	cd b7       	in	r28, 0x3d	; 61
    273a:	de b7       	in	r29, 0x3e	; 62
    273c:	9a 83       	std	Y+2, r25	; 0x02
    273e:	89 83       	std	Y+1, r24	; 0x01
	if(PWM != NULL){
    2740:	89 81       	ldd	r24, Y+1	; 0x01
    2742:	9a 81       	ldd	r25, Y+2	; 0x02
    2744:	00 97       	sbiw	r24, 0x00	; 0
    2746:	99 f1       	breq	.+102    	; 0x27ae <PWM_vStop+0x7e>
		switch(PWM->PWM_TimerChannel){
    2748:	e9 81       	ldd	r30, Y+1	; 0x01
    274a:	fa 81       	ldd	r31, Y+2	; 0x02
    274c:	80 81       	ld	r24, Z
    274e:	28 2f       	mov	r18, r24
    2750:	30 e0       	ldi	r19, 0x00	; 0
    2752:	3c 83       	std	Y+4, r19	; 0x04
    2754:	2b 83       	std	Y+3, r18	; 0x03
    2756:	8b 81       	ldd	r24, Y+3	; 0x03
    2758:	9c 81       	ldd	r25, Y+4	; 0x04
    275a:	8e 30       	cpi	r24, 0x0E	; 14
    275c:	91 05       	cpc	r25, r1
    275e:	54 f4       	brge	.+20     	; 0x2774 <PWM_vStop+0x44>
    2760:	2b 81       	ldd	r18, Y+3	; 0x03
    2762:	3c 81       	ldd	r19, Y+4	; 0x04
    2764:	22 30       	cpi	r18, 0x02	; 2
    2766:	31 05       	cpc	r19, r1
    2768:	9c f4       	brge	.+38     	; 0x2790 <PWM_vStop+0x60>
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	9c 81       	ldd	r25, Y+4	; 0x04
    276e:	99 23       	and	r25, r25
    2770:	f4 f0       	brlt	.+60     	; 0x27ae <PWM_vStop+0x7e>
    2772:	06 c0       	rjmp	.+12     	; 0x2780 <PWM_vStop+0x50>
    2774:	2b 81       	ldd	r18, Y+3	; 0x03
    2776:	3c 81       	ldd	r19, Y+4	; 0x04
    2778:	20 31       	cpi	r18, 0x10	; 16
    277a:	31 05       	cpc	r19, r1
    277c:	c4 f4       	brge	.+48     	; 0x27ae <PWM_vStop+0x7e>
    277e:	10 c0       	rjmp	.+32     	; 0x27a0 <PWM_vStop+0x70>
		case TIMER0_PhaseCorrect:
		case TIMER0_FastPWM:
			TCCR0_REG &= 0xF8;
    2780:	a3 e5       	ldi	r26, 0x53	; 83
    2782:	b0 e0       	ldi	r27, 0x00	; 0
    2784:	e3 e5       	ldi	r30, 0x53	; 83
    2786:	f0 e0       	ldi	r31, 0x00	; 0
    2788:	80 81       	ld	r24, Z
    278a:	88 7f       	andi	r24, 0xF8	; 248
    278c:	8c 93       	st	X, r24
    278e:	0f c0       	rjmp	.+30     	; 0x27ae <PWM_vStop+0x7e>
		case TIMER1_PhaseFreqOCR:
		case TIMER1_PhaseICR:
		case TIMER1_PhaseOCR:
		case TIMER1_FastICR:
		case TIMER1_FastOCR:
			TCCR1B_REG &= 0xF8;
    2790:	ae e4       	ldi	r26, 0x4E	; 78
    2792:	b0 e0       	ldi	r27, 0x00	; 0
    2794:	ee e4       	ldi	r30, 0x4E	; 78
    2796:	f0 e0       	ldi	r31, 0x00	; 0
    2798:	80 81       	ld	r24, Z
    279a:	88 7f       	andi	r24, 0xF8	; 248
    279c:	8c 93       	st	X, r24
    279e:	07 c0       	rjmp	.+14     	; 0x27ae <PWM_vStop+0x7e>
			break;
		case TIMER2_PhaseCorrect:
		case TIMER2_FastPWM:
			TCCR2_REG &= 0xF8;
    27a0:	a5 e4       	ldi	r26, 0x45	; 69
    27a2:	b0 e0       	ldi	r27, 0x00	; 0
    27a4:	e5 e4       	ldi	r30, 0x45	; 69
    27a6:	f0 e0       	ldi	r31, 0x00	; 0
    27a8:	80 81       	ld	r24, Z
    27aa:	88 7f       	andi	r24, 0xF8	; 248
    27ac:	8c 93       	st	X, r24
			break;
		default: /* Do Nothing */ break;
		}
	}
}
    27ae:	0f 90       	pop	r0
    27b0:	0f 90       	pop	r0
    27b2:	0f 90       	pop	r0
    27b4:	0f 90       	pop	r0
    27b6:	cf 91       	pop	r28
    27b8:	df 91       	pop	r29
    27ba:	08 95       	ret

000027bc <GIE_vEnableInterrupts>:
/*************************************************************************/

#include "GIE_interface.h"

// This function is responsible for enabling GIE for interrupts
void GIE_vEnableInterrupts(){
    27bc:	df 93       	push	r29
    27be:	cf 93       	push	r28
    27c0:	cd b7       	in	r28, 0x3d	; 61
    27c2:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(SREG_REG, 7);
    27c4:	af e5       	ldi	r26, 0x5F	; 95
    27c6:	b0 e0       	ldi	r27, 0x00	; 0
    27c8:	ef e5       	ldi	r30, 0x5F	; 95
    27ca:	f0 e0       	ldi	r31, 0x00	; 0
    27cc:	80 81       	ld	r24, Z
    27ce:	80 68       	ori	r24, 0x80	; 128
    27d0:	8c 93       	st	X, r24
}
    27d2:	cf 91       	pop	r28
    27d4:	df 91       	pop	r29
    27d6:	08 95       	ret

000027d8 <GIE_vDisableInterrupts>:

// This function is responsible for disabling GIE for interrupts
void GIE_vDisableInterrupts(){
    27d8:	df 93       	push	r29
    27da:	cf 93       	push	r28
    27dc:	cd b7       	in	r28, 0x3d	; 61
    27de:	de b7       	in	r29, 0x3e	; 62
	CLR_BIT(SREG_REG, 7);
    27e0:	af e5       	ldi	r26, 0x5F	; 95
    27e2:	b0 e0       	ldi	r27, 0x00	; 0
    27e4:	ef e5       	ldi	r30, 0x5F	; 95
    27e6:	f0 e0       	ldi	r31, 0x00	; 0
    27e8:	80 81       	ld	r24, Z
    27ea:	8f 77       	andi	r24, 0x7F	; 127
    27ec:	8c 93       	st	X, r24
}
    27ee:	cf 91       	pop	r28
    27f0:	df 91       	pop	r29
    27f2:	08 95       	ret

000027f4 <EXTI_vEnableEXTI>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "EXTI_interface.h"

void EXTI_vEnableEXTI(const EXTI_cfg *INTx){
    27f4:	df 93       	push	r29
    27f6:	cf 93       	push	r28
    27f8:	00 d0       	rcall	.+0      	; 0x27fa <EXTI_vEnableEXTI+0x6>
    27fa:	00 d0       	rcall	.+0      	; 0x27fc <EXTI_vEnableEXTI+0x8>
    27fc:	cd b7       	in	r28, 0x3d	; 61
    27fe:	de b7       	in	r29, 0x3e	; 62
    2800:	9a 83       	std	Y+2, r25	; 0x02
    2802:	89 83       	std	Y+1, r24	; 0x01
	switch(INTx->INTx){
    2804:	e9 81       	ldd	r30, Y+1	; 0x01
    2806:	fa 81       	ldd	r31, Y+2	; 0x02
    2808:	80 81       	ld	r24, Z
    280a:	28 2f       	mov	r18, r24
    280c:	30 e0       	ldi	r19, 0x00	; 0
    280e:	3c 83       	std	Y+4, r19	; 0x04
    2810:	2b 83       	std	Y+3, r18	; 0x03
    2812:	8b 81       	ldd	r24, Y+3	; 0x03
    2814:	9c 81       	ldd	r25, Y+4	; 0x04
    2816:	81 30       	cpi	r24, 0x01	; 1
    2818:	91 05       	cpc	r25, r1
    281a:	09 f4       	brne	.+2      	; 0x281e <EXTI_vEnableEXTI+0x2a>
    281c:	5e c0       	rjmp	.+188    	; 0x28da <EXTI_vEnableEXTI+0xe6>
    281e:	2b 81       	ldd	r18, Y+3	; 0x03
    2820:	3c 81       	ldd	r19, Y+4	; 0x04
    2822:	22 30       	cpi	r18, 0x02	; 2
    2824:	31 05       	cpc	r19, r1
    2826:	09 f4       	brne	.+2      	; 0x282a <EXTI_vEnableEXTI+0x36>
    2828:	aa c0       	rjmp	.+340    	; 0x297e <EXTI_vEnableEXTI+0x18a>
    282a:	8b 81       	ldd	r24, Y+3	; 0x03
    282c:	9c 81       	ldd	r25, Y+4	; 0x04
    282e:	00 97       	sbiw	r24, 0x00	; 0
    2830:	09 f0       	breq	.+2      	; 0x2834 <EXTI_vEnableEXTI+0x40>
    2832:	cc c0       	rjmp	.+408    	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
	case INT0:
		if(INTx->INTx_MODE == MODE_LOW_LEVEL){
    2834:	e9 81       	ldd	r30, Y+1	; 0x01
    2836:	fa 81       	ldd	r31, Y+2	; 0x02
    2838:	81 81       	ldd	r24, Z+1	; 0x01
    283a:	88 23       	and	r24, r24
    283c:	79 f4       	brne	.+30     	; 0x285c <EXTI_vEnableEXTI+0x68>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_LOW;
    283e:	a5 e5       	ldi	r26, 0x55	; 85
    2840:	b0 e0       	ldi	r27, 0x00	; 0
    2842:	e5 e5       	ldi	r30, 0x55	; 85
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	80 81       	ld	r24, Z
    2848:	8c 7f       	andi	r24, 0xFC	; 252
    284a:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    284c:	ab e5       	ldi	r26, 0x5B	; 91
    284e:	b0 e0       	ldi	r27, 0x00	; 0
    2850:	eb e5       	ldi	r30, 0x5B	; 91
    2852:	f0 e0       	ldi	r31, 0x00	; 0
    2854:	80 81       	ld	r24, Z
    2856:	80 64       	ori	r24, 0x40	; 64
    2858:	8c 93       	st	X, r24
    285a:	b8 c0       	rjmp	.+368    	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_LOGICAL_CHANGE){
    285c:	e9 81       	ldd	r30, Y+1	; 0x01
    285e:	fa 81       	ldd	r31, Y+2	; 0x02
    2860:	81 81       	ldd	r24, Z+1	; 0x01
    2862:	81 30       	cpi	r24, 0x01	; 1
    2864:	81 f4       	brne	.+32     	; 0x2886 <EXTI_vEnableEXTI+0x92>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_LOGICAL;
    2866:	a5 e5       	ldi	r26, 0x55	; 85
    2868:	b0 e0       	ldi	r27, 0x00	; 0
    286a:	e5 e5       	ldi	r30, 0x55	; 85
    286c:	f0 e0       	ldi	r31, 0x00	; 0
    286e:	80 81       	ld	r24, Z
    2870:	8c 7f       	andi	r24, 0xFC	; 252
    2872:	81 60       	ori	r24, 0x01	; 1
    2874:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    2876:	ab e5       	ldi	r26, 0x5B	; 91
    2878:	b0 e0       	ldi	r27, 0x00	; 0
    287a:	eb e5       	ldi	r30, 0x5B	; 91
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	80 64       	ori	r24, 0x40	; 64
    2882:	8c 93       	st	X, r24
    2884:	a3 c0       	rjmp	.+326    	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_FALLING_EDGE){
    2886:	e9 81       	ldd	r30, Y+1	; 0x01
    2888:	fa 81       	ldd	r31, Y+2	; 0x02
    288a:	81 81       	ldd	r24, Z+1	; 0x01
    288c:	82 30       	cpi	r24, 0x02	; 2
    288e:	81 f4       	brne	.+32     	; 0x28b0 <EXTI_vEnableEXTI+0xbc>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_FALLING;
    2890:	a5 e5       	ldi	r26, 0x55	; 85
    2892:	b0 e0       	ldi	r27, 0x00	; 0
    2894:	e5 e5       	ldi	r30, 0x55	; 85
    2896:	f0 e0       	ldi	r31, 0x00	; 0
    2898:	80 81       	ld	r24, Z
    289a:	8c 7f       	andi	r24, 0xFC	; 252
    289c:	82 60       	ori	r24, 0x02	; 2
    289e:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    28a0:	ab e5       	ldi	r26, 0x5B	; 91
    28a2:	b0 e0       	ldi	r27, 0x00	; 0
    28a4:	eb e5       	ldi	r30, 0x5B	; 91
    28a6:	f0 e0       	ldi	r31, 0x00	; 0
    28a8:	80 81       	ld	r24, Z
    28aa:	80 64       	ori	r24, 0x40	; 64
    28ac:	8c 93       	st	X, r24
    28ae:	8e c0       	rjmp	.+284    	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_RISING_EDGE){
    28b0:	e9 81       	ldd	r30, Y+1	; 0x01
    28b2:	fa 81       	ldd	r31, Y+2	; 0x02
    28b4:	81 81       	ldd	r24, Z+1	; 0x01
    28b6:	83 30       	cpi	r24, 0x03	; 3
    28b8:	09 f0       	breq	.+2      	; 0x28bc <EXTI_vEnableEXTI+0xc8>
    28ba:	88 c0       	rjmp	.+272    	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT0_M) | MCUCR_INT0_RISING;
    28bc:	a5 e5       	ldi	r26, 0x55	; 85
    28be:	b0 e0       	ldi	r27, 0x00	; 0
    28c0:	e5 e5       	ldi	r30, 0x55	; 85
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	80 81       	ld	r24, Z
    28c6:	83 60       	ori	r24, 0x03	; 3
    28c8:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT0);
    28ca:	ab e5       	ldi	r26, 0x5B	; 91
    28cc:	b0 e0       	ldi	r27, 0x00	; 0
    28ce:	eb e5       	ldi	r30, 0x5B	; 91
    28d0:	f0 e0       	ldi	r31, 0x00	; 0
    28d2:	80 81       	ld	r24, Z
    28d4:	80 64       	ori	r24, 0x40	; 64
    28d6:	8c 93       	st	X, r24
    28d8:	79 c0       	rjmp	.+242    	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
		}
		else{ /* Do Nothing */ }
		break;
	case INT1:
		if(INTx->INTx_MODE == MODE_LOW_LEVEL){
    28da:	e9 81       	ldd	r30, Y+1	; 0x01
    28dc:	fa 81       	ldd	r31, Y+2	; 0x02
    28de:	81 81       	ldd	r24, Z+1	; 0x01
    28e0:	88 23       	and	r24, r24
    28e2:	79 f4       	brne	.+30     	; 0x2902 <EXTI_vEnableEXTI+0x10e>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_LOW;
    28e4:	a5 e5       	ldi	r26, 0x55	; 85
    28e6:	b0 e0       	ldi	r27, 0x00	; 0
    28e8:	e5 e5       	ldi	r30, 0x55	; 85
    28ea:	f0 e0       	ldi	r31, 0x00	; 0
    28ec:	80 81       	ld	r24, Z
    28ee:	83 7f       	andi	r24, 0xF3	; 243
    28f0:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    28f2:	ab e5       	ldi	r26, 0x5B	; 91
    28f4:	b0 e0       	ldi	r27, 0x00	; 0
    28f6:	eb e5       	ldi	r30, 0x5B	; 91
    28f8:	f0 e0       	ldi	r31, 0x00	; 0
    28fa:	80 81       	ld	r24, Z
    28fc:	80 68       	ori	r24, 0x80	; 128
    28fe:	8c 93       	st	X, r24
    2900:	65 c0       	rjmp	.+202    	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_LOGICAL_CHANGE){
    2902:	e9 81       	ldd	r30, Y+1	; 0x01
    2904:	fa 81       	ldd	r31, Y+2	; 0x02
    2906:	81 81       	ldd	r24, Z+1	; 0x01
    2908:	81 30       	cpi	r24, 0x01	; 1
    290a:	81 f4       	brne	.+32     	; 0x292c <EXTI_vEnableEXTI+0x138>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_LOGICAL;
    290c:	a5 e5       	ldi	r26, 0x55	; 85
    290e:	b0 e0       	ldi	r27, 0x00	; 0
    2910:	e5 e5       	ldi	r30, 0x55	; 85
    2912:	f0 e0       	ldi	r31, 0x00	; 0
    2914:	80 81       	ld	r24, Z
    2916:	83 7f       	andi	r24, 0xF3	; 243
    2918:	84 60       	ori	r24, 0x04	; 4
    291a:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    291c:	ab e5       	ldi	r26, 0x5B	; 91
    291e:	b0 e0       	ldi	r27, 0x00	; 0
    2920:	eb e5       	ldi	r30, 0x5B	; 91
    2922:	f0 e0       	ldi	r31, 0x00	; 0
    2924:	80 81       	ld	r24, Z
    2926:	80 68       	ori	r24, 0x80	; 128
    2928:	8c 93       	st	X, r24
    292a:	50 c0       	rjmp	.+160    	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_FALLING_EDGE){
    292c:	e9 81       	ldd	r30, Y+1	; 0x01
    292e:	fa 81       	ldd	r31, Y+2	; 0x02
    2930:	81 81       	ldd	r24, Z+1	; 0x01
    2932:	82 30       	cpi	r24, 0x02	; 2
    2934:	81 f4       	brne	.+32     	; 0x2956 <EXTI_vEnableEXTI+0x162>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_FALLING;
    2936:	a5 e5       	ldi	r26, 0x55	; 85
    2938:	b0 e0       	ldi	r27, 0x00	; 0
    293a:	e5 e5       	ldi	r30, 0x55	; 85
    293c:	f0 e0       	ldi	r31, 0x00	; 0
    293e:	80 81       	ld	r24, Z
    2940:	83 7f       	andi	r24, 0xF3	; 243
    2942:	88 60       	ori	r24, 0x08	; 8
    2944:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    2946:	ab e5       	ldi	r26, 0x5B	; 91
    2948:	b0 e0       	ldi	r27, 0x00	; 0
    294a:	eb e5       	ldi	r30, 0x5B	; 91
    294c:	f0 e0       	ldi	r31, 0x00	; 0
    294e:	80 81       	ld	r24, Z
    2950:	80 68       	ori	r24, 0x80	; 128
    2952:	8c 93       	st	X, r24
    2954:	3b c0       	rjmp	.+118    	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_RISING_EDGE){
    2956:	e9 81       	ldd	r30, Y+1	; 0x01
    2958:	fa 81       	ldd	r31, Y+2	; 0x02
    295a:	81 81       	ldd	r24, Z+1	; 0x01
    295c:	83 30       	cpi	r24, 0x03	; 3
    295e:	b1 f5       	brne	.+108    	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
			MCUCR_REG = (MCUCR_REG & MCUCR_INT1_M) | MCUCR_INT1_RISING;
    2960:	a5 e5       	ldi	r26, 0x55	; 85
    2962:	b0 e0       	ldi	r27, 0x00	; 0
    2964:	e5 e5       	ldi	r30, 0x55	; 85
    2966:	f0 e0       	ldi	r31, 0x00	; 0
    2968:	80 81       	ld	r24, Z
    296a:	8c 60       	ori	r24, 0x0C	; 12
    296c:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT1);
    296e:	ab e5       	ldi	r26, 0x5B	; 91
    2970:	b0 e0       	ldi	r27, 0x00	; 0
    2972:	eb e5       	ldi	r30, 0x5B	; 91
    2974:	f0 e0       	ldi	r31, 0x00	; 0
    2976:	80 81       	ld	r24, Z
    2978:	80 68       	ori	r24, 0x80	; 128
    297a:	8c 93       	st	X, r24
    297c:	27 c0       	rjmp	.+78     	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
		}
		else{ /* Do Nothing */ }
		break;
	case INT2:
		if(INTx->INTx_MODE == MODE_FALLING_EDGE){
    297e:	e9 81       	ldd	r30, Y+1	; 0x01
    2980:	fa 81       	ldd	r31, Y+2	; 0x02
    2982:	81 81       	ldd	r24, Z+1	; 0x01
    2984:	82 30       	cpi	r24, 0x02	; 2
    2986:	79 f4       	brne	.+30     	; 0x29a6 <EXTI_vEnableEXTI+0x1b2>
			MCUCSR_REG = (MCUCSR_REG & MCUCSR_INT2_M) | MCUCSR_INT2_FALLING;
    2988:	a4 e5       	ldi	r26, 0x54	; 84
    298a:	b0 e0       	ldi	r27, 0x00	; 0
    298c:	e4 e5       	ldi	r30, 0x54	; 84
    298e:	f0 e0       	ldi	r31, 0x00	; 0
    2990:	80 81       	ld	r24, Z
    2992:	8f 7b       	andi	r24, 0xBF	; 191
    2994:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT2);
    2996:	ab e5       	ldi	r26, 0x5B	; 91
    2998:	b0 e0       	ldi	r27, 0x00	; 0
    299a:	eb e5       	ldi	r30, 0x5B	; 91
    299c:	f0 e0       	ldi	r31, 0x00	; 0
    299e:	80 81       	ld	r24, Z
    29a0:	80 62       	ori	r24, 0x20	; 32
    29a2:	8c 93       	st	X, r24
    29a4:	13 c0       	rjmp	.+38     	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
		}
		else if(INTx->INTx_MODE == MODE_RISING_EDGE){
    29a6:	e9 81       	ldd	r30, Y+1	; 0x01
    29a8:	fa 81       	ldd	r31, Y+2	; 0x02
    29aa:	81 81       	ldd	r24, Z+1	; 0x01
    29ac:	83 30       	cpi	r24, 0x03	; 3
    29ae:	71 f4       	brne	.+28     	; 0x29cc <EXTI_vEnableEXTI+0x1d8>
			MCUCSR_REG = (MCUCSR_REG & MCUCSR_INT2_M) | MCUCSR_INT2_RISING;
    29b0:	a4 e5       	ldi	r26, 0x54	; 84
    29b2:	b0 e0       	ldi	r27, 0x00	; 0
    29b4:	e4 e5       	ldi	r30, 0x54	; 84
    29b6:	f0 e0       	ldi	r31, 0x00	; 0
    29b8:	80 81       	ld	r24, Z
    29ba:	80 64       	ori	r24, 0x40	; 64
    29bc:	8c 93       	st	X, r24
			SET_BIT(GICR_REG, GICR_INT2);
    29be:	ab e5       	ldi	r26, 0x5B	; 91
    29c0:	b0 e0       	ldi	r27, 0x00	; 0
    29c2:	eb e5       	ldi	r30, 0x5B	; 91
    29c4:	f0 e0       	ldi	r31, 0x00	; 0
    29c6:	80 81       	ld	r24, Z
    29c8:	80 62       	ori	r24, 0x20	; 32
    29ca:	8c 93       	st	X, r24
		}
		else{ /* Do Nothing */ }
		break;
	default: /* Do Nothing */ break;
	}
}
    29cc:	0f 90       	pop	r0
    29ce:	0f 90       	pop	r0
    29d0:	0f 90       	pop	r0
    29d2:	0f 90       	pop	r0
    29d4:	cf 91       	pop	r28
    29d6:	df 91       	pop	r29
    29d8:	08 95       	ret

000029da <EXTI_vDisableEXTI>:

void EXTI_vDisableEXTI(const EXTI_cfg *INTx){
    29da:	df 93       	push	r29
    29dc:	cf 93       	push	r28
    29de:	00 d0       	rcall	.+0      	; 0x29e0 <EXTI_vDisableEXTI+0x6>
    29e0:	00 d0       	rcall	.+0      	; 0x29e2 <EXTI_vDisableEXTI+0x8>
    29e2:	cd b7       	in	r28, 0x3d	; 61
    29e4:	de b7       	in	r29, 0x3e	; 62
    29e6:	9a 83       	std	Y+2, r25	; 0x02
    29e8:	89 83       	std	Y+1, r24	; 0x01
	switch(INTx->INTx){
    29ea:	e9 81       	ldd	r30, Y+1	; 0x01
    29ec:	fa 81       	ldd	r31, Y+2	; 0x02
    29ee:	80 81       	ld	r24, Z
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	3c 83       	std	Y+4, r19	; 0x04
    29f6:	2b 83       	std	Y+3, r18	; 0x03
    29f8:	8b 81       	ldd	r24, Y+3	; 0x03
    29fa:	9c 81       	ldd	r25, Y+4	; 0x04
    29fc:	81 30       	cpi	r24, 0x01	; 1
    29fe:	91 05       	cpc	r25, r1
    2a00:	89 f0       	breq	.+34     	; 0x2a24 <EXTI_vDisableEXTI+0x4a>
    2a02:	2b 81       	ldd	r18, Y+3	; 0x03
    2a04:	3c 81       	ldd	r19, Y+4	; 0x04
    2a06:	22 30       	cpi	r18, 0x02	; 2
    2a08:	31 05       	cpc	r19, r1
    2a0a:	a1 f0       	breq	.+40     	; 0x2a34 <EXTI_vDisableEXTI+0x5a>
    2a0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2a0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2a10:	00 97       	sbiw	r24, 0x00	; 0
    2a12:	b9 f4       	brne	.+46     	; 0x2a42 <EXTI_vDisableEXTI+0x68>
	case INT0:
		CLR_BIT(GICR_REG, GICR_INT0);
    2a14:	ab e5       	ldi	r26, 0x5B	; 91
    2a16:	b0 e0       	ldi	r27, 0x00	; 0
    2a18:	eb e5       	ldi	r30, 0x5B	; 91
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	80 81       	ld	r24, Z
    2a1e:	8f 7b       	andi	r24, 0xBF	; 191
    2a20:	8c 93       	st	X, r24
    2a22:	0f c0       	rjmp	.+30     	; 0x2a42 <EXTI_vDisableEXTI+0x68>
		break;
	case INT1:
		CLR_BIT(GICR_REG, GICR_INT1);
    2a24:	ab e5       	ldi	r26, 0x5B	; 91
    2a26:	b0 e0       	ldi	r27, 0x00	; 0
    2a28:	eb e5       	ldi	r30, 0x5B	; 91
    2a2a:	f0 e0       	ldi	r31, 0x00	; 0
    2a2c:	80 81       	ld	r24, Z
    2a2e:	8f 77       	andi	r24, 0x7F	; 127
    2a30:	8c 93       	st	X, r24
    2a32:	07 c0       	rjmp	.+14     	; 0x2a42 <EXTI_vDisableEXTI+0x68>
		break;
	case INT2:
		CLR_BIT(GICR_REG, GICR_INT2);
    2a34:	ab e5       	ldi	r26, 0x5B	; 91
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	eb e5       	ldi	r30, 0x5B	; 91
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	8f 7d       	andi	r24, 0xDF	; 223
    2a40:	8c 93       	st	X, r24
		break;
	}
}
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	0f 90       	pop	r0
    2a48:	0f 90       	pop	r0
    2a4a:	cf 91       	pop	r28
    2a4c:	df 91       	pop	r29
    2a4e:	08 95       	ret

00002a50 <DIO_vPinInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "DIO_interface.h"

void DIO_vPinInit(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir, u8 Copy_u8PinVal){
    2a50:	df 93       	push	r29
    2a52:	cf 93       	push	r28
    2a54:	00 d0       	rcall	.+0      	; 0x2a56 <DIO_vPinInit+0x6>
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <DIO_vPinInit+0x8>
    2a58:	cd b7       	in	r28, 0x3d	; 61
    2a5a:	de b7       	in	r29, 0x3e	; 62
    2a5c:	89 83       	std	Y+1, r24	; 0x01
    2a5e:	6a 83       	std	Y+2, r22	; 0x02
    2a60:	4b 83       	std	Y+3, r20	; 0x03
    2a62:	2c 83       	std	Y+4, r18	; 0x04
	DIO_vSetPinDir(Copy_u8PortName, Copy_u8PinNum, Copy_u8PinDir);
    2a64:	89 81       	ldd	r24, Y+1	; 0x01
    2a66:	6a 81       	ldd	r22, Y+2	; 0x02
    2a68:	4b 81       	ldd	r20, Y+3	; 0x03
    2a6a:	0e 94 43 15 	call	0x2a86	; 0x2a86 <DIO_vSetPinDir>
	DIO_vSetPinValue(Copy_u8PortName, Copy_u8PinNum, Copy_u8PinVal);
    2a6e:	89 81       	ldd	r24, Y+1	; 0x01
    2a70:	6a 81       	ldd	r22, Y+2	; 0x02
    2a72:	4c 81       	ldd	r20, Y+4	; 0x04
    2a74:	0e 94 43 16 	call	0x2c86	; 0x2c86 <DIO_vSetPinValue>
}
    2a78:	0f 90       	pop	r0
    2a7a:	0f 90       	pop	r0
    2a7c:	0f 90       	pop	r0
    2a7e:	0f 90       	pop	r0
    2a80:	cf 91       	pop	r28
    2a82:	df 91       	pop	r29
    2a84:	08 95       	ret

00002a86 <DIO_vSetPinDir>:

//sets data direction of 1 pin in a port
void DIO_vSetPinDir(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinDir){
    2a86:	df 93       	push	r29
    2a88:	cf 93       	push	r28
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	27 97       	sbiw	r28, 0x07	; 7
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	89 83       	std	Y+1, r24	; 0x01
    2a9c:	6a 83       	std	Y+2, r22	; 0x02
    2a9e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinDir == OUTPUT)
    2aa0:	8b 81       	ldd	r24, Y+3	; 0x03
    2aa2:	81 30       	cpi	r24, 0x01	; 1
    2aa4:	09 f0       	breq	.+2      	; 0x2aa8 <DIO_vSetPinDir+0x22>
    2aa6:	6f c0       	rjmp	.+222    	; 0x2b86 <DIO_vSetPinDir+0x100>
	{
		switch(Copy_u8PortName)
    2aa8:	89 81       	ldd	r24, Y+1	; 0x01
    2aaa:	28 2f       	mov	r18, r24
    2aac:	30 e0       	ldi	r19, 0x00	; 0
    2aae:	3f 83       	std	Y+7, r19	; 0x07
    2ab0:	2e 83       	std	Y+6, r18	; 0x06
    2ab2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ab4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ab6:	81 30       	cpi	r24, 0x01	; 1
    2ab8:	91 05       	cpc	r25, r1
    2aba:	49 f1       	breq	.+82     	; 0x2b0e <DIO_vSetPinDir+0x88>
    2abc:	2e 81       	ldd	r18, Y+6	; 0x06
    2abe:	3f 81       	ldd	r19, Y+7	; 0x07
    2ac0:	22 30       	cpi	r18, 0x02	; 2
    2ac2:	31 05       	cpc	r19, r1
    2ac4:	2c f4       	brge	.+10     	; 0x2ad0 <DIO_vSetPinDir+0x4a>
    2ac6:	8e 81       	ldd	r24, Y+6	; 0x06
    2ac8:	9f 81       	ldd	r25, Y+7	; 0x07
    2aca:	00 97       	sbiw	r24, 0x00	; 0
    2acc:	61 f0       	breq	.+24     	; 0x2ae6 <DIO_vSetPinDir+0x60>
    2ace:	d2 c0       	rjmp	.+420    	; 0x2c74 <DIO_vSetPinDir+0x1ee>
    2ad0:	2e 81       	ldd	r18, Y+6	; 0x06
    2ad2:	3f 81       	ldd	r19, Y+7	; 0x07
    2ad4:	22 30       	cpi	r18, 0x02	; 2
    2ad6:	31 05       	cpc	r19, r1
    2ad8:	71 f1       	breq	.+92     	; 0x2b36 <DIO_vSetPinDir+0xb0>
    2ada:	8e 81       	ldd	r24, Y+6	; 0x06
    2adc:	9f 81       	ldd	r25, Y+7	; 0x07
    2ade:	83 30       	cpi	r24, 0x03	; 3
    2ae0:	91 05       	cpc	r25, r1
    2ae2:	e9 f1       	breq	.+122    	; 0x2b5e <DIO_vSetPinDir+0xd8>
    2ae4:	c7 c0       	rjmp	.+398    	; 0x2c74 <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: SET_BIT(DDRA_REG, Copy_u8PinNum); break;
    2ae6:	aa e3       	ldi	r26, 0x3A	; 58
    2ae8:	b0 e0       	ldi	r27, 0x00	; 0
    2aea:	ea e3       	ldi	r30, 0x3A	; 58
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	80 81       	ld	r24, Z
    2af0:	48 2f       	mov	r20, r24
    2af2:	8a 81       	ldd	r24, Y+2	; 0x02
    2af4:	28 2f       	mov	r18, r24
    2af6:	30 e0       	ldi	r19, 0x00	; 0
    2af8:	81 e0       	ldi	r24, 0x01	; 1
    2afa:	90 e0       	ldi	r25, 0x00	; 0
    2afc:	02 2e       	mov	r0, r18
    2afe:	02 c0       	rjmp	.+4      	; 0x2b04 <DIO_vSetPinDir+0x7e>
    2b00:	88 0f       	add	r24, r24
    2b02:	99 1f       	adc	r25, r25
    2b04:	0a 94       	dec	r0
    2b06:	e2 f7       	brpl	.-8      	; 0x2b00 <DIO_vSetPinDir+0x7a>
    2b08:	84 2b       	or	r24, r20
    2b0a:	8c 93       	st	X, r24
    2b0c:	b3 c0       	rjmp	.+358    	; 0x2c74 <DIO_vSetPinDir+0x1ee>
		case PORTB: SET_BIT(DDRB_REG, Copy_u8PinNum); break;
    2b0e:	a7 e3       	ldi	r26, 0x37	; 55
    2b10:	b0 e0       	ldi	r27, 0x00	; 0
    2b12:	e7 e3       	ldi	r30, 0x37	; 55
    2b14:	f0 e0       	ldi	r31, 0x00	; 0
    2b16:	80 81       	ld	r24, Z
    2b18:	48 2f       	mov	r20, r24
    2b1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b1c:	28 2f       	mov	r18, r24
    2b1e:	30 e0       	ldi	r19, 0x00	; 0
    2b20:	81 e0       	ldi	r24, 0x01	; 1
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	02 2e       	mov	r0, r18
    2b26:	02 c0       	rjmp	.+4      	; 0x2b2c <DIO_vSetPinDir+0xa6>
    2b28:	88 0f       	add	r24, r24
    2b2a:	99 1f       	adc	r25, r25
    2b2c:	0a 94       	dec	r0
    2b2e:	e2 f7       	brpl	.-8      	; 0x2b28 <DIO_vSetPinDir+0xa2>
    2b30:	84 2b       	or	r24, r20
    2b32:	8c 93       	st	X, r24
    2b34:	9f c0       	rjmp	.+318    	; 0x2c74 <DIO_vSetPinDir+0x1ee>
		case PORTC: SET_BIT(DDRC_REG, Copy_u8PinNum); break;
    2b36:	a4 e3       	ldi	r26, 0x34	; 52
    2b38:	b0 e0       	ldi	r27, 0x00	; 0
    2b3a:	e4 e3       	ldi	r30, 0x34	; 52
    2b3c:	f0 e0       	ldi	r31, 0x00	; 0
    2b3e:	80 81       	ld	r24, Z
    2b40:	48 2f       	mov	r20, r24
    2b42:	8a 81       	ldd	r24, Y+2	; 0x02
    2b44:	28 2f       	mov	r18, r24
    2b46:	30 e0       	ldi	r19, 0x00	; 0
    2b48:	81 e0       	ldi	r24, 0x01	; 1
    2b4a:	90 e0       	ldi	r25, 0x00	; 0
    2b4c:	02 2e       	mov	r0, r18
    2b4e:	02 c0       	rjmp	.+4      	; 0x2b54 <DIO_vSetPinDir+0xce>
    2b50:	88 0f       	add	r24, r24
    2b52:	99 1f       	adc	r25, r25
    2b54:	0a 94       	dec	r0
    2b56:	e2 f7       	brpl	.-8      	; 0x2b50 <DIO_vSetPinDir+0xca>
    2b58:	84 2b       	or	r24, r20
    2b5a:	8c 93       	st	X, r24
    2b5c:	8b c0       	rjmp	.+278    	; 0x2c74 <DIO_vSetPinDir+0x1ee>
		case PORTD: SET_BIT(DDRD_REG, Copy_u8PinNum); break;
    2b5e:	a1 e3       	ldi	r26, 0x31	; 49
    2b60:	b0 e0       	ldi	r27, 0x00	; 0
    2b62:	e1 e3       	ldi	r30, 0x31	; 49
    2b64:	f0 e0       	ldi	r31, 0x00	; 0
    2b66:	80 81       	ld	r24, Z
    2b68:	48 2f       	mov	r20, r24
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	28 2f       	mov	r18, r24
    2b6e:	30 e0       	ldi	r19, 0x00	; 0
    2b70:	81 e0       	ldi	r24, 0x01	; 1
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	02 2e       	mov	r0, r18
    2b76:	02 c0       	rjmp	.+4      	; 0x2b7c <DIO_vSetPinDir+0xf6>
    2b78:	88 0f       	add	r24, r24
    2b7a:	99 1f       	adc	r25, r25
    2b7c:	0a 94       	dec	r0
    2b7e:	e2 f7       	brpl	.-8      	; 0x2b78 <DIO_vSetPinDir+0xf2>
    2b80:	84 2b       	or	r24, r20
    2b82:	8c 93       	st	X, r24
    2b84:	77 c0       	rjmp	.+238    	; 0x2c74 <DIO_vSetPinDir+0x1ee>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    2b86:	8b 81       	ldd	r24, Y+3	; 0x03
    2b88:	88 23       	and	r24, r24
    2b8a:	09 f0       	breq	.+2      	; 0x2b8e <DIO_vSetPinDir+0x108>
    2b8c:	73 c0       	rjmp	.+230    	; 0x2c74 <DIO_vSetPinDir+0x1ee>
	{
		switch(Copy_u8PortName)
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	3d 83       	std	Y+5, r19	; 0x05
    2b96:	2c 83       	std	Y+4, r18	; 0x04
    2b98:	8c 81       	ldd	r24, Y+4	; 0x04
    2b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2b9c:	81 30       	cpi	r24, 0x01	; 1
    2b9e:	91 05       	cpc	r25, r1
    2ba0:	59 f1       	breq	.+86     	; 0x2bf8 <DIO_vSetPinDir+0x172>
    2ba2:	2c 81       	ldd	r18, Y+4	; 0x04
    2ba4:	3d 81       	ldd	r19, Y+5	; 0x05
    2ba6:	22 30       	cpi	r18, 0x02	; 2
    2ba8:	31 05       	cpc	r19, r1
    2baa:	2c f4       	brge	.+10     	; 0x2bb6 <DIO_vSetPinDir+0x130>
    2bac:	8c 81       	ldd	r24, Y+4	; 0x04
    2bae:	9d 81       	ldd	r25, Y+5	; 0x05
    2bb0:	00 97       	sbiw	r24, 0x00	; 0
    2bb2:	69 f0       	breq	.+26     	; 0x2bce <DIO_vSetPinDir+0x148>
    2bb4:	5f c0       	rjmp	.+190    	; 0x2c74 <DIO_vSetPinDir+0x1ee>
    2bb6:	2c 81       	ldd	r18, Y+4	; 0x04
    2bb8:	3d 81       	ldd	r19, Y+5	; 0x05
    2bba:	22 30       	cpi	r18, 0x02	; 2
    2bbc:	31 05       	cpc	r19, r1
    2bbe:	89 f1       	breq	.+98     	; 0x2c22 <DIO_vSetPinDir+0x19c>
    2bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2bc4:	83 30       	cpi	r24, 0x03	; 3
    2bc6:	91 05       	cpc	r25, r1
    2bc8:	09 f4       	brne	.+2      	; 0x2bcc <DIO_vSetPinDir+0x146>
    2bca:	40 c0       	rjmp	.+128    	; 0x2c4c <DIO_vSetPinDir+0x1c6>
    2bcc:	53 c0       	rjmp	.+166    	; 0x2c74 <DIO_vSetPinDir+0x1ee>
		{
		case PORTA: CLR_BIT(DDRA_REG, Copy_u8PinNum); break;
    2bce:	aa e3       	ldi	r26, 0x3A	; 58
    2bd0:	b0 e0       	ldi	r27, 0x00	; 0
    2bd2:	ea e3       	ldi	r30, 0x3A	; 58
    2bd4:	f0 e0       	ldi	r31, 0x00	; 0
    2bd6:	80 81       	ld	r24, Z
    2bd8:	48 2f       	mov	r20, r24
    2bda:	8a 81       	ldd	r24, Y+2	; 0x02
    2bdc:	28 2f       	mov	r18, r24
    2bde:	30 e0       	ldi	r19, 0x00	; 0
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	02 2e       	mov	r0, r18
    2be6:	02 c0       	rjmp	.+4      	; 0x2bec <DIO_vSetPinDir+0x166>
    2be8:	88 0f       	add	r24, r24
    2bea:	99 1f       	adc	r25, r25
    2bec:	0a 94       	dec	r0
    2bee:	e2 f7       	brpl	.-8      	; 0x2be8 <DIO_vSetPinDir+0x162>
    2bf0:	80 95       	com	r24
    2bf2:	84 23       	and	r24, r20
    2bf4:	8c 93       	st	X, r24
    2bf6:	3e c0       	rjmp	.+124    	; 0x2c74 <DIO_vSetPinDir+0x1ee>
		case PORTB: CLR_BIT(DDRB_REG, Copy_u8PinNum); break;
    2bf8:	a7 e3       	ldi	r26, 0x37	; 55
    2bfa:	b0 e0       	ldi	r27, 0x00	; 0
    2bfc:	e7 e3       	ldi	r30, 0x37	; 55
    2bfe:	f0 e0       	ldi	r31, 0x00	; 0
    2c00:	80 81       	ld	r24, Z
    2c02:	48 2f       	mov	r20, r24
    2c04:	8a 81       	ldd	r24, Y+2	; 0x02
    2c06:	28 2f       	mov	r18, r24
    2c08:	30 e0       	ldi	r19, 0x00	; 0
    2c0a:	81 e0       	ldi	r24, 0x01	; 1
    2c0c:	90 e0       	ldi	r25, 0x00	; 0
    2c0e:	02 2e       	mov	r0, r18
    2c10:	02 c0       	rjmp	.+4      	; 0x2c16 <DIO_vSetPinDir+0x190>
    2c12:	88 0f       	add	r24, r24
    2c14:	99 1f       	adc	r25, r25
    2c16:	0a 94       	dec	r0
    2c18:	e2 f7       	brpl	.-8      	; 0x2c12 <DIO_vSetPinDir+0x18c>
    2c1a:	80 95       	com	r24
    2c1c:	84 23       	and	r24, r20
    2c1e:	8c 93       	st	X, r24
    2c20:	29 c0       	rjmp	.+82     	; 0x2c74 <DIO_vSetPinDir+0x1ee>
		case PORTC: CLR_BIT(DDRC_REG, Copy_u8PinNum); break;
    2c22:	a4 e3       	ldi	r26, 0x34	; 52
    2c24:	b0 e0       	ldi	r27, 0x00	; 0
    2c26:	e4 e3       	ldi	r30, 0x34	; 52
    2c28:	f0 e0       	ldi	r31, 0x00	; 0
    2c2a:	80 81       	ld	r24, Z
    2c2c:	48 2f       	mov	r20, r24
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	28 2f       	mov	r18, r24
    2c32:	30 e0       	ldi	r19, 0x00	; 0
    2c34:	81 e0       	ldi	r24, 0x01	; 1
    2c36:	90 e0       	ldi	r25, 0x00	; 0
    2c38:	02 2e       	mov	r0, r18
    2c3a:	02 c0       	rjmp	.+4      	; 0x2c40 <DIO_vSetPinDir+0x1ba>
    2c3c:	88 0f       	add	r24, r24
    2c3e:	99 1f       	adc	r25, r25
    2c40:	0a 94       	dec	r0
    2c42:	e2 f7       	brpl	.-8      	; 0x2c3c <DIO_vSetPinDir+0x1b6>
    2c44:	80 95       	com	r24
    2c46:	84 23       	and	r24, r20
    2c48:	8c 93       	st	X, r24
    2c4a:	14 c0       	rjmp	.+40     	; 0x2c74 <DIO_vSetPinDir+0x1ee>
		case PORTD: CLR_BIT(DDRD_REG, Copy_u8PinNum); break;
    2c4c:	a1 e3       	ldi	r26, 0x31	; 49
    2c4e:	b0 e0       	ldi	r27, 0x00	; 0
    2c50:	e1 e3       	ldi	r30, 0x31	; 49
    2c52:	f0 e0       	ldi	r31, 0x00	; 0
    2c54:	80 81       	ld	r24, Z
    2c56:	48 2f       	mov	r20, r24
    2c58:	8a 81       	ldd	r24, Y+2	; 0x02
    2c5a:	28 2f       	mov	r18, r24
    2c5c:	30 e0       	ldi	r19, 0x00	; 0
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	90 e0       	ldi	r25, 0x00	; 0
    2c62:	02 2e       	mov	r0, r18
    2c64:	02 c0       	rjmp	.+4      	; 0x2c6a <DIO_vSetPinDir+0x1e4>
    2c66:	88 0f       	add	r24, r24
    2c68:	99 1f       	adc	r25, r25
    2c6a:	0a 94       	dec	r0
    2c6c:	e2 f7       	brpl	.-8      	; 0x2c66 <DIO_vSetPinDir+0x1e0>
    2c6e:	80 95       	com	r24
    2c70:	84 23       	and	r24, r20
    2c72:	8c 93       	st	X, r24
		}
	}
}
    2c74:	27 96       	adiw	r28, 0x07	; 7
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	08 95       	ret

00002c86 <DIO_vSetPinValue>:

//sets value of 1 pin in a port
void DIO_vSetPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum, u8 Copy_u8PinVal){
    2c86:	df 93       	push	r29
    2c88:	cf 93       	push	r28
    2c8a:	cd b7       	in	r28, 0x3d	; 61
    2c8c:	de b7       	in	r29, 0x3e	; 62
    2c8e:	27 97       	sbiw	r28, 0x07	; 7
    2c90:	0f b6       	in	r0, 0x3f	; 63
    2c92:	f8 94       	cli
    2c94:	de bf       	out	0x3e, r29	; 62
    2c96:	0f be       	out	0x3f, r0	; 63
    2c98:	cd bf       	out	0x3d, r28	; 61
    2c9a:	89 83       	std	Y+1, r24	; 0x01
    2c9c:	6a 83       	std	Y+2, r22	; 0x02
    2c9e:	4b 83       	std	Y+3, r20	; 0x03
	if(Copy_u8PinVal == HIGH)
    2ca0:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca2:	81 30       	cpi	r24, 0x01	; 1
    2ca4:	09 f0       	breq	.+2      	; 0x2ca8 <DIO_vSetPinValue+0x22>
    2ca6:	6f c0       	rjmp	.+222    	; 0x2d86 <DIO_vSetPinValue+0x100>
	{
		switch(Copy_u8PortName)
    2ca8:	89 81       	ldd	r24, Y+1	; 0x01
    2caa:	28 2f       	mov	r18, r24
    2cac:	30 e0       	ldi	r19, 0x00	; 0
    2cae:	3f 83       	std	Y+7, r19	; 0x07
    2cb0:	2e 83       	std	Y+6, r18	; 0x06
    2cb2:	8e 81       	ldd	r24, Y+6	; 0x06
    2cb4:	9f 81       	ldd	r25, Y+7	; 0x07
    2cb6:	81 30       	cpi	r24, 0x01	; 1
    2cb8:	91 05       	cpc	r25, r1
    2cba:	49 f1       	breq	.+82     	; 0x2d0e <DIO_vSetPinValue+0x88>
    2cbc:	2e 81       	ldd	r18, Y+6	; 0x06
    2cbe:	3f 81       	ldd	r19, Y+7	; 0x07
    2cc0:	22 30       	cpi	r18, 0x02	; 2
    2cc2:	31 05       	cpc	r19, r1
    2cc4:	2c f4       	brge	.+10     	; 0x2cd0 <DIO_vSetPinValue+0x4a>
    2cc6:	8e 81       	ldd	r24, Y+6	; 0x06
    2cc8:	9f 81       	ldd	r25, Y+7	; 0x07
    2cca:	00 97       	sbiw	r24, 0x00	; 0
    2ccc:	61 f0       	breq	.+24     	; 0x2ce6 <DIO_vSetPinValue+0x60>
    2cce:	d2 c0       	rjmp	.+420    	; 0x2e74 <DIO_vSetPinValue+0x1ee>
    2cd0:	2e 81       	ldd	r18, Y+6	; 0x06
    2cd2:	3f 81       	ldd	r19, Y+7	; 0x07
    2cd4:	22 30       	cpi	r18, 0x02	; 2
    2cd6:	31 05       	cpc	r19, r1
    2cd8:	71 f1       	breq	.+92     	; 0x2d36 <DIO_vSetPinValue+0xb0>
    2cda:	8e 81       	ldd	r24, Y+6	; 0x06
    2cdc:	9f 81       	ldd	r25, Y+7	; 0x07
    2cde:	83 30       	cpi	r24, 0x03	; 3
    2ce0:	91 05       	cpc	r25, r1
    2ce2:	e9 f1       	breq	.+122    	; 0x2d5e <DIO_vSetPinValue+0xd8>
    2ce4:	c7 c0       	rjmp	.+398    	; 0x2e74 <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: SET_BIT(PORTA_REG, Copy_u8PinNum); break;
    2ce6:	ab e3       	ldi	r26, 0x3B	; 59
    2ce8:	b0 e0       	ldi	r27, 0x00	; 0
    2cea:	eb e3       	ldi	r30, 0x3B	; 59
    2cec:	f0 e0       	ldi	r31, 0x00	; 0
    2cee:	80 81       	ld	r24, Z
    2cf0:	48 2f       	mov	r20, r24
    2cf2:	8a 81       	ldd	r24, Y+2	; 0x02
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	02 2e       	mov	r0, r18
    2cfe:	02 c0       	rjmp	.+4      	; 0x2d04 <DIO_vSetPinValue+0x7e>
    2d00:	88 0f       	add	r24, r24
    2d02:	99 1f       	adc	r25, r25
    2d04:	0a 94       	dec	r0
    2d06:	e2 f7       	brpl	.-8      	; 0x2d00 <DIO_vSetPinValue+0x7a>
    2d08:	84 2b       	or	r24, r20
    2d0a:	8c 93       	st	X, r24
    2d0c:	b3 c0       	rjmp	.+358    	; 0x2e74 <DIO_vSetPinValue+0x1ee>
		case PORTB: SET_BIT(PORTB_REG, Copy_u8PinNum); break;
    2d0e:	a8 e3       	ldi	r26, 0x38	; 56
    2d10:	b0 e0       	ldi	r27, 0x00	; 0
    2d12:	e8 e3       	ldi	r30, 0x38	; 56
    2d14:	f0 e0       	ldi	r31, 0x00	; 0
    2d16:	80 81       	ld	r24, Z
    2d18:	48 2f       	mov	r20, r24
    2d1a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1c:	28 2f       	mov	r18, r24
    2d1e:	30 e0       	ldi	r19, 0x00	; 0
    2d20:	81 e0       	ldi	r24, 0x01	; 1
    2d22:	90 e0       	ldi	r25, 0x00	; 0
    2d24:	02 2e       	mov	r0, r18
    2d26:	02 c0       	rjmp	.+4      	; 0x2d2c <DIO_vSetPinValue+0xa6>
    2d28:	88 0f       	add	r24, r24
    2d2a:	99 1f       	adc	r25, r25
    2d2c:	0a 94       	dec	r0
    2d2e:	e2 f7       	brpl	.-8      	; 0x2d28 <DIO_vSetPinValue+0xa2>
    2d30:	84 2b       	or	r24, r20
    2d32:	8c 93       	st	X, r24
    2d34:	9f c0       	rjmp	.+318    	; 0x2e74 <DIO_vSetPinValue+0x1ee>
		case PORTC: SET_BIT(PORTC_REG, Copy_u8PinNum); break;
    2d36:	a5 e3       	ldi	r26, 0x35	; 53
    2d38:	b0 e0       	ldi	r27, 0x00	; 0
    2d3a:	e5 e3       	ldi	r30, 0x35	; 53
    2d3c:	f0 e0       	ldi	r31, 0x00	; 0
    2d3e:	80 81       	ld	r24, Z
    2d40:	48 2f       	mov	r20, r24
    2d42:	8a 81       	ldd	r24, Y+2	; 0x02
    2d44:	28 2f       	mov	r18, r24
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	81 e0       	ldi	r24, 0x01	; 1
    2d4a:	90 e0       	ldi	r25, 0x00	; 0
    2d4c:	02 2e       	mov	r0, r18
    2d4e:	02 c0       	rjmp	.+4      	; 0x2d54 <DIO_vSetPinValue+0xce>
    2d50:	88 0f       	add	r24, r24
    2d52:	99 1f       	adc	r25, r25
    2d54:	0a 94       	dec	r0
    2d56:	e2 f7       	brpl	.-8      	; 0x2d50 <DIO_vSetPinValue+0xca>
    2d58:	84 2b       	or	r24, r20
    2d5a:	8c 93       	st	X, r24
    2d5c:	8b c0       	rjmp	.+278    	; 0x2e74 <DIO_vSetPinValue+0x1ee>
		case PORTD: SET_BIT(PORTD_REG, Copy_u8PinNum); break;
    2d5e:	a2 e3       	ldi	r26, 0x32	; 50
    2d60:	b0 e0       	ldi	r27, 0x00	; 0
    2d62:	e2 e3       	ldi	r30, 0x32	; 50
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	80 81       	ld	r24, Z
    2d68:	48 2f       	mov	r20, r24
    2d6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2d6c:	28 2f       	mov	r18, r24
    2d6e:	30 e0       	ldi	r19, 0x00	; 0
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	90 e0       	ldi	r25, 0x00	; 0
    2d74:	02 2e       	mov	r0, r18
    2d76:	02 c0       	rjmp	.+4      	; 0x2d7c <DIO_vSetPinValue+0xf6>
    2d78:	88 0f       	add	r24, r24
    2d7a:	99 1f       	adc	r25, r25
    2d7c:	0a 94       	dec	r0
    2d7e:	e2 f7       	brpl	.-8      	; 0x2d78 <DIO_vSetPinValue+0xf2>
    2d80:	84 2b       	or	r24, r20
    2d82:	8c 93       	st	X, r24
    2d84:	77 c0       	rjmp	.+238    	; 0x2e74 <DIO_vSetPinValue+0x1ee>
		}
	}
	else if(Copy_u8PinVal == LOW)
    2d86:	8b 81       	ldd	r24, Y+3	; 0x03
    2d88:	88 23       	and	r24, r24
    2d8a:	09 f0       	breq	.+2      	; 0x2d8e <DIO_vSetPinValue+0x108>
    2d8c:	73 c0       	rjmp	.+230    	; 0x2e74 <DIO_vSetPinValue+0x1ee>
	{
		switch(Copy_u8PortName)
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	28 2f       	mov	r18, r24
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	3d 83       	std	Y+5, r19	; 0x05
    2d96:	2c 83       	std	Y+4, r18	; 0x04
    2d98:	8c 81       	ldd	r24, Y+4	; 0x04
    2d9a:	9d 81       	ldd	r25, Y+5	; 0x05
    2d9c:	81 30       	cpi	r24, 0x01	; 1
    2d9e:	91 05       	cpc	r25, r1
    2da0:	59 f1       	breq	.+86     	; 0x2df8 <DIO_vSetPinValue+0x172>
    2da2:	2c 81       	ldd	r18, Y+4	; 0x04
    2da4:	3d 81       	ldd	r19, Y+5	; 0x05
    2da6:	22 30       	cpi	r18, 0x02	; 2
    2da8:	31 05       	cpc	r19, r1
    2daa:	2c f4       	brge	.+10     	; 0x2db6 <DIO_vSetPinValue+0x130>
    2dac:	8c 81       	ldd	r24, Y+4	; 0x04
    2dae:	9d 81       	ldd	r25, Y+5	; 0x05
    2db0:	00 97       	sbiw	r24, 0x00	; 0
    2db2:	69 f0       	breq	.+26     	; 0x2dce <DIO_vSetPinValue+0x148>
    2db4:	5f c0       	rjmp	.+190    	; 0x2e74 <DIO_vSetPinValue+0x1ee>
    2db6:	2c 81       	ldd	r18, Y+4	; 0x04
    2db8:	3d 81       	ldd	r19, Y+5	; 0x05
    2dba:	22 30       	cpi	r18, 0x02	; 2
    2dbc:	31 05       	cpc	r19, r1
    2dbe:	89 f1       	breq	.+98     	; 0x2e22 <DIO_vSetPinValue+0x19c>
    2dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    2dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    2dc4:	83 30       	cpi	r24, 0x03	; 3
    2dc6:	91 05       	cpc	r25, r1
    2dc8:	09 f4       	brne	.+2      	; 0x2dcc <DIO_vSetPinValue+0x146>
    2dca:	40 c0       	rjmp	.+128    	; 0x2e4c <DIO_vSetPinValue+0x1c6>
    2dcc:	53 c0       	rjmp	.+166    	; 0x2e74 <DIO_vSetPinValue+0x1ee>
		{
		case PORTA: CLR_BIT(PORTA_REG, Copy_u8PinNum); break;
    2dce:	ab e3       	ldi	r26, 0x3B	; 59
    2dd0:	b0 e0       	ldi	r27, 0x00	; 0
    2dd2:	eb e3       	ldi	r30, 0x3B	; 59
    2dd4:	f0 e0       	ldi	r31, 0x00	; 0
    2dd6:	80 81       	ld	r24, Z
    2dd8:	48 2f       	mov	r20, r24
    2dda:	8a 81       	ldd	r24, Y+2	; 0x02
    2ddc:	28 2f       	mov	r18, r24
    2dde:	30 e0       	ldi	r19, 0x00	; 0
    2de0:	81 e0       	ldi	r24, 0x01	; 1
    2de2:	90 e0       	ldi	r25, 0x00	; 0
    2de4:	02 2e       	mov	r0, r18
    2de6:	02 c0       	rjmp	.+4      	; 0x2dec <DIO_vSetPinValue+0x166>
    2de8:	88 0f       	add	r24, r24
    2dea:	99 1f       	adc	r25, r25
    2dec:	0a 94       	dec	r0
    2dee:	e2 f7       	brpl	.-8      	; 0x2de8 <DIO_vSetPinValue+0x162>
    2df0:	80 95       	com	r24
    2df2:	84 23       	and	r24, r20
    2df4:	8c 93       	st	X, r24
    2df6:	3e c0       	rjmp	.+124    	; 0x2e74 <DIO_vSetPinValue+0x1ee>
		case PORTB: CLR_BIT(PORTB_REG, Copy_u8PinNum); break;
    2df8:	a8 e3       	ldi	r26, 0x38	; 56
    2dfa:	b0 e0       	ldi	r27, 0x00	; 0
    2dfc:	e8 e3       	ldi	r30, 0x38	; 56
    2dfe:	f0 e0       	ldi	r31, 0x00	; 0
    2e00:	80 81       	ld	r24, Z
    2e02:	48 2f       	mov	r20, r24
    2e04:	8a 81       	ldd	r24, Y+2	; 0x02
    2e06:	28 2f       	mov	r18, r24
    2e08:	30 e0       	ldi	r19, 0x00	; 0
    2e0a:	81 e0       	ldi	r24, 0x01	; 1
    2e0c:	90 e0       	ldi	r25, 0x00	; 0
    2e0e:	02 2e       	mov	r0, r18
    2e10:	02 c0       	rjmp	.+4      	; 0x2e16 <DIO_vSetPinValue+0x190>
    2e12:	88 0f       	add	r24, r24
    2e14:	99 1f       	adc	r25, r25
    2e16:	0a 94       	dec	r0
    2e18:	e2 f7       	brpl	.-8      	; 0x2e12 <DIO_vSetPinValue+0x18c>
    2e1a:	80 95       	com	r24
    2e1c:	84 23       	and	r24, r20
    2e1e:	8c 93       	st	X, r24
    2e20:	29 c0       	rjmp	.+82     	; 0x2e74 <DIO_vSetPinValue+0x1ee>
		case PORTC: CLR_BIT(PORTC_REG, Copy_u8PinNum); break;
    2e22:	a5 e3       	ldi	r26, 0x35	; 53
    2e24:	b0 e0       	ldi	r27, 0x00	; 0
    2e26:	e5 e3       	ldi	r30, 0x35	; 53
    2e28:	f0 e0       	ldi	r31, 0x00	; 0
    2e2a:	80 81       	ld	r24, Z
    2e2c:	48 2f       	mov	r20, r24
    2e2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2e30:	28 2f       	mov	r18, r24
    2e32:	30 e0       	ldi	r19, 0x00	; 0
    2e34:	81 e0       	ldi	r24, 0x01	; 1
    2e36:	90 e0       	ldi	r25, 0x00	; 0
    2e38:	02 2e       	mov	r0, r18
    2e3a:	02 c0       	rjmp	.+4      	; 0x2e40 <DIO_vSetPinValue+0x1ba>
    2e3c:	88 0f       	add	r24, r24
    2e3e:	99 1f       	adc	r25, r25
    2e40:	0a 94       	dec	r0
    2e42:	e2 f7       	brpl	.-8      	; 0x2e3c <DIO_vSetPinValue+0x1b6>
    2e44:	80 95       	com	r24
    2e46:	84 23       	and	r24, r20
    2e48:	8c 93       	st	X, r24
    2e4a:	14 c0       	rjmp	.+40     	; 0x2e74 <DIO_vSetPinValue+0x1ee>
		case PORTD: CLR_BIT(PORTD_REG, Copy_u8PinNum); break;
    2e4c:	a2 e3       	ldi	r26, 0x32	; 50
    2e4e:	b0 e0       	ldi	r27, 0x00	; 0
    2e50:	e2 e3       	ldi	r30, 0x32	; 50
    2e52:	f0 e0       	ldi	r31, 0x00	; 0
    2e54:	80 81       	ld	r24, Z
    2e56:	48 2f       	mov	r20, r24
    2e58:	8a 81       	ldd	r24, Y+2	; 0x02
    2e5a:	28 2f       	mov	r18, r24
    2e5c:	30 e0       	ldi	r19, 0x00	; 0
    2e5e:	81 e0       	ldi	r24, 0x01	; 1
    2e60:	90 e0       	ldi	r25, 0x00	; 0
    2e62:	02 2e       	mov	r0, r18
    2e64:	02 c0       	rjmp	.+4      	; 0x2e6a <DIO_vSetPinValue+0x1e4>
    2e66:	88 0f       	add	r24, r24
    2e68:	99 1f       	adc	r25, r25
    2e6a:	0a 94       	dec	r0
    2e6c:	e2 f7       	brpl	.-8      	; 0x2e66 <DIO_vSetPinValue+0x1e0>
    2e6e:	80 95       	com	r24
    2e70:	84 23       	and	r24, r20
    2e72:	8c 93       	st	X, r24
		}
	}
}
    2e74:	27 96       	adiw	r28, 0x07	; 7
    2e76:	0f b6       	in	r0, 0x3f	; 63
    2e78:	f8 94       	cli
    2e7a:	de bf       	out	0x3e, r29	; 62
    2e7c:	0f be       	out	0x3f, r0	; 63
    2e7e:	cd bf       	out	0x3d, r28	; 61
    2e80:	cf 91       	pop	r28
    2e82:	df 91       	pop	r29
    2e84:	08 95       	ret

00002e86 <DIO_u8ReadPinValue>:

//reads value on 1 pin in a port
u8 DIO_u8ReadPinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum){
    2e86:	df 93       	push	r29
    2e88:	cf 93       	push	r28
    2e8a:	00 d0       	rcall	.+0      	; 0x2e8c <DIO_u8ReadPinValue+0x6>
    2e8c:	00 d0       	rcall	.+0      	; 0x2e8e <DIO_u8ReadPinValue+0x8>
    2e8e:	0f 92       	push	r0
    2e90:	cd b7       	in	r28, 0x3d	; 61
    2e92:	de b7       	in	r29, 0x3e	; 62
    2e94:	8a 83       	std	Y+2, r24	; 0x02
    2e96:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ReadValue = 0;
    2e98:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    2e9a:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	3d 83       	std	Y+5, r19	; 0x05
    2ea2:	2c 83       	std	Y+4, r18	; 0x04
    2ea4:	4c 81       	ldd	r20, Y+4	; 0x04
    2ea6:	5d 81       	ldd	r21, Y+5	; 0x05
    2ea8:	41 30       	cpi	r20, 0x01	; 1
    2eaa:	51 05       	cpc	r21, r1
    2eac:	41 f1       	breq	.+80     	; 0x2efe <DIO_u8ReadPinValue+0x78>
    2eae:	8c 81       	ldd	r24, Y+4	; 0x04
    2eb0:	9d 81       	ldd	r25, Y+5	; 0x05
    2eb2:	82 30       	cpi	r24, 0x02	; 2
    2eb4:	91 05       	cpc	r25, r1
    2eb6:	34 f4       	brge	.+12     	; 0x2ec4 <DIO_u8ReadPinValue+0x3e>
    2eb8:	2c 81       	ldd	r18, Y+4	; 0x04
    2eba:	3d 81       	ldd	r19, Y+5	; 0x05
    2ebc:	21 15       	cp	r18, r1
    2ebe:	31 05       	cpc	r19, r1
    2ec0:	61 f0       	breq	.+24     	; 0x2eda <DIO_u8ReadPinValue+0x54>
    2ec2:	52 c0       	rjmp	.+164    	; 0x2f68 <DIO_u8ReadPinValue+0xe2>
    2ec4:	4c 81       	ldd	r20, Y+4	; 0x04
    2ec6:	5d 81       	ldd	r21, Y+5	; 0x05
    2ec8:	42 30       	cpi	r20, 0x02	; 2
    2eca:	51 05       	cpc	r21, r1
    2ecc:	51 f1       	breq	.+84     	; 0x2f22 <DIO_u8ReadPinValue+0x9c>
    2ece:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed2:	83 30       	cpi	r24, 0x03	; 3
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	b9 f1       	breq	.+110    	; 0x2f46 <DIO_u8ReadPinValue+0xc0>
    2ed8:	47 c0       	rjmp	.+142    	; 0x2f68 <DIO_u8ReadPinValue+0xe2>
	{
	case PORTA: Local_u8ReadValue = GET_BIT(PINA_REG, Copy_u8PinNum); break;
    2eda:	e9 e3       	ldi	r30, 0x39	; 57
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	80 81       	ld	r24, Z
    2ee0:	28 2f       	mov	r18, r24
    2ee2:	30 e0       	ldi	r19, 0x00	; 0
    2ee4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee6:	88 2f       	mov	r24, r24
    2ee8:	90 e0       	ldi	r25, 0x00	; 0
    2eea:	a9 01       	movw	r20, r18
    2eec:	02 c0       	rjmp	.+4      	; 0x2ef2 <DIO_u8ReadPinValue+0x6c>
    2eee:	55 95       	asr	r21
    2ef0:	47 95       	ror	r20
    2ef2:	8a 95       	dec	r24
    2ef4:	e2 f7       	brpl	.-8      	; 0x2eee <DIO_u8ReadPinValue+0x68>
    2ef6:	ca 01       	movw	r24, r20
    2ef8:	81 70       	andi	r24, 0x01	; 1
    2efa:	89 83       	std	Y+1, r24	; 0x01
    2efc:	35 c0       	rjmp	.+106    	; 0x2f68 <DIO_u8ReadPinValue+0xe2>
	case PORTB: Local_u8ReadValue = GET_BIT(PINB_REG, Copy_u8PinNum); break;
    2efe:	e6 e3       	ldi	r30, 0x36	; 54
    2f00:	f0 e0       	ldi	r31, 0x00	; 0
    2f02:	80 81       	ld	r24, Z
    2f04:	28 2f       	mov	r18, r24
    2f06:	30 e0       	ldi	r19, 0x00	; 0
    2f08:	8b 81       	ldd	r24, Y+3	; 0x03
    2f0a:	88 2f       	mov	r24, r24
    2f0c:	90 e0       	ldi	r25, 0x00	; 0
    2f0e:	a9 01       	movw	r20, r18
    2f10:	02 c0       	rjmp	.+4      	; 0x2f16 <DIO_u8ReadPinValue+0x90>
    2f12:	55 95       	asr	r21
    2f14:	47 95       	ror	r20
    2f16:	8a 95       	dec	r24
    2f18:	e2 f7       	brpl	.-8      	; 0x2f12 <DIO_u8ReadPinValue+0x8c>
    2f1a:	ca 01       	movw	r24, r20
    2f1c:	81 70       	andi	r24, 0x01	; 1
    2f1e:	89 83       	std	Y+1, r24	; 0x01
    2f20:	23 c0       	rjmp	.+70     	; 0x2f68 <DIO_u8ReadPinValue+0xe2>
	case PORTC: Local_u8ReadValue = GET_BIT(PINC_REG, Copy_u8PinNum); break;
    2f22:	e3 e3       	ldi	r30, 0x33	; 51
    2f24:	f0 e0       	ldi	r31, 0x00	; 0
    2f26:	80 81       	ld	r24, Z
    2f28:	28 2f       	mov	r18, r24
    2f2a:	30 e0       	ldi	r19, 0x00	; 0
    2f2c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f2e:	88 2f       	mov	r24, r24
    2f30:	90 e0       	ldi	r25, 0x00	; 0
    2f32:	a9 01       	movw	r20, r18
    2f34:	02 c0       	rjmp	.+4      	; 0x2f3a <DIO_u8ReadPinValue+0xb4>
    2f36:	55 95       	asr	r21
    2f38:	47 95       	ror	r20
    2f3a:	8a 95       	dec	r24
    2f3c:	e2 f7       	brpl	.-8      	; 0x2f36 <DIO_u8ReadPinValue+0xb0>
    2f3e:	ca 01       	movw	r24, r20
    2f40:	81 70       	andi	r24, 0x01	; 1
    2f42:	89 83       	std	Y+1, r24	; 0x01
    2f44:	11 c0       	rjmp	.+34     	; 0x2f68 <DIO_u8ReadPinValue+0xe2>
	case PORTD: Local_u8ReadValue = GET_BIT(PIND_REG, Copy_u8PinNum); break;
    2f46:	e0 e3       	ldi	r30, 0x30	; 48
    2f48:	f0 e0       	ldi	r31, 0x00	; 0
    2f4a:	80 81       	ld	r24, Z
    2f4c:	28 2f       	mov	r18, r24
    2f4e:	30 e0       	ldi	r19, 0x00	; 0
    2f50:	8b 81       	ldd	r24, Y+3	; 0x03
    2f52:	88 2f       	mov	r24, r24
    2f54:	90 e0       	ldi	r25, 0x00	; 0
    2f56:	a9 01       	movw	r20, r18
    2f58:	02 c0       	rjmp	.+4      	; 0x2f5e <DIO_u8ReadPinValue+0xd8>
    2f5a:	55 95       	asr	r21
    2f5c:	47 95       	ror	r20
    2f5e:	8a 95       	dec	r24
    2f60:	e2 f7       	brpl	.-8      	; 0x2f5a <DIO_u8ReadPinValue+0xd4>
    2f62:	ca 01       	movw	r24, r20
    2f64:	81 70       	andi	r24, 0x01	; 1
    2f66:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    2f68:	89 81       	ldd	r24, Y+1	; 0x01
}
    2f6a:	0f 90       	pop	r0
    2f6c:	0f 90       	pop	r0
    2f6e:	0f 90       	pop	r0
    2f70:	0f 90       	pop	r0
    2f72:	0f 90       	pop	r0
    2f74:	cf 91       	pop	r28
    2f76:	df 91       	pop	r29
    2f78:	08 95       	ret

00002f7a <DIO_vTogglePinValue>:

void DIO_vTogglePinValue(u8 Copy_u8PortName, u8 Copy_u8PinNum){
    2f7a:	df 93       	push	r29
    2f7c:	cf 93       	push	r28
    2f7e:	00 d0       	rcall	.+0      	; 0x2f80 <DIO_vTogglePinValue+0x6>
    2f80:	00 d0       	rcall	.+0      	; 0x2f82 <DIO_vTogglePinValue+0x8>
    2f82:	cd b7       	in	r28, 0x3d	; 61
    2f84:	de b7       	in	r29, 0x3e	; 62
    2f86:	89 83       	std	Y+1, r24	; 0x01
    2f88:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    2f8a:	89 81       	ldd	r24, Y+1	; 0x01
    2f8c:	28 2f       	mov	r18, r24
    2f8e:	30 e0       	ldi	r19, 0x00	; 0
    2f90:	3c 83       	std	Y+4, r19	; 0x04
    2f92:	2b 83       	std	Y+3, r18	; 0x03
    2f94:	8b 81       	ldd	r24, Y+3	; 0x03
    2f96:	9c 81       	ldd	r25, Y+4	; 0x04
    2f98:	81 30       	cpi	r24, 0x01	; 1
    2f9a:	91 05       	cpc	r25, r1
    2f9c:	49 f1       	breq	.+82     	; 0x2ff0 <DIO_vTogglePinValue+0x76>
    2f9e:	2b 81       	ldd	r18, Y+3	; 0x03
    2fa0:	3c 81       	ldd	r19, Y+4	; 0x04
    2fa2:	22 30       	cpi	r18, 0x02	; 2
    2fa4:	31 05       	cpc	r19, r1
    2fa6:	2c f4       	brge	.+10     	; 0x2fb2 <DIO_vTogglePinValue+0x38>
    2fa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2faa:	9c 81       	ldd	r25, Y+4	; 0x04
    2fac:	00 97       	sbiw	r24, 0x00	; 0
    2fae:	61 f0       	breq	.+24     	; 0x2fc8 <DIO_vTogglePinValue+0x4e>
    2fb0:	5a c0       	rjmp	.+180    	; 0x3066 <DIO_vTogglePinValue+0xec>
    2fb2:	2b 81       	ldd	r18, Y+3	; 0x03
    2fb4:	3c 81       	ldd	r19, Y+4	; 0x04
    2fb6:	22 30       	cpi	r18, 0x02	; 2
    2fb8:	31 05       	cpc	r19, r1
    2fba:	71 f1       	breq	.+92     	; 0x3018 <DIO_vTogglePinValue+0x9e>
    2fbc:	8b 81       	ldd	r24, Y+3	; 0x03
    2fbe:	9c 81       	ldd	r25, Y+4	; 0x04
    2fc0:	83 30       	cpi	r24, 0x03	; 3
    2fc2:	91 05       	cpc	r25, r1
    2fc4:	e9 f1       	breq	.+122    	; 0x3040 <DIO_vTogglePinValue+0xc6>
    2fc6:	4f c0       	rjmp	.+158    	; 0x3066 <DIO_vTogglePinValue+0xec>
	{
	case PORTA: TOG_BIT(PORTA_REG, Copy_u8PinNum); break;
    2fc8:	ab e3       	ldi	r26, 0x3B	; 59
    2fca:	b0 e0       	ldi	r27, 0x00	; 0
    2fcc:	eb e3       	ldi	r30, 0x3B	; 59
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	80 81       	ld	r24, Z
    2fd2:	48 2f       	mov	r20, r24
    2fd4:	8a 81       	ldd	r24, Y+2	; 0x02
    2fd6:	28 2f       	mov	r18, r24
    2fd8:	30 e0       	ldi	r19, 0x00	; 0
    2fda:	81 e0       	ldi	r24, 0x01	; 1
    2fdc:	90 e0       	ldi	r25, 0x00	; 0
    2fde:	02 2e       	mov	r0, r18
    2fe0:	02 c0       	rjmp	.+4      	; 0x2fe6 <DIO_vTogglePinValue+0x6c>
    2fe2:	88 0f       	add	r24, r24
    2fe4:	99 1f       	adc	r25, r25
    2fe6:	0a 94       	dec	r0
    2fe8:	e2 f7       	brpl	.-8      	; 0x2fe2 <DIO_vTogglePinValue+0x68>
    2fea:	84 27       	eor	r24, r20
    2fec:	8c 93       	st	X, r24
    2fee:	3b c0       	rjmp	.+118    	; 0x3066 <DIO_vTogglePinValue+0xec>
	case PORTB: TOG_BIT(PORTB_REG, Copy_u8PinNum); break;
    2ff0:	a8 e3       	ldi	r26, 0x38	; 56
    2ff2:	b0 e0       	ldi	r27, 0x00	; 0
    2ff4:	e8 e3       	ldi	r30, 0x38	; 56
    2ff6:	f0 e0       	ldi	r31, 0x00	; 0
    2ff8:	80 81       	ld	r24, Z
    2ffa:	48 2f       	mov	r20, r24
    2ffc:	8a 81       	ldd	r24, Y+2	; 0x02
    2ffe:	28 2f       	mov	r18, r24
    3000:	30 e0       	ldi	r19, 0x00	; 0
    3002:	81 e0       	ldi	r24, 0x01	; 1
    3004:	90 e0       	ldi	r25, 0x00	; 0
    3006:	02 2e       	mov	r0, r18
    3008:	02 c0       	rjmp	.+4      	; 0x300e <DIO_vTogglePinValue+0x94>
    300a:	88 0f       	add	r24, r24
    300c:	99 1f       	adc	r25, r25
    300e:	0a 94       	dec	r0
    3010:	e2 f7       	brpl	.-8      	; 0x300a <DIO_vTogglePinValue+0x90>
    3012:	84 27       	eor	r24, r20
    3014:	8c 93       	st	X, r24
    3016:	27 c0       	rjmp	.+78     	; 0x3066 <DIO_vTogglePinValue+0xec>
	case PORTC: TOG_BIT(PORTC_REG, Copy_u8PinNum); break;
    3018:	a5 e3       	ldi	r26, 0x35	; 53
    301a:	b0 e0       	ldi	r27, 0x00	; 0
    301c:	e5 e3       	ldi	r30, 0x35	; 53
    301e:	f0 e0       	ldi	r31, 0x00	; 0
    3020:	80 81       	ld	r24, Z
    3022:	48 2f       	mov	r20, r24
    3024:	8a 81       	ldd	r24, Y+2	; 0x02
    3026:	28 2f       	mov	r18, r24
    3028:	30 e0       	ldi	r19, 0x00	; 0
    302a:	81 e0       	ldi	r24, 0x01	; 1
    302c:	90 e0       	ldi	r25, 0x00	; 0
    302e:	02 2e       	mov	r0, r18
    3030:	02 c0       	rjmp	.+4      	; 0x3036 <DIO_vTogglePinValue+0xbc>
    3032:	88 0f       	add	r24, r24
    3034:	99 1f       	adc	r25, r25
    3036:	0a 94       	dec	r0
    3038:	e2 f7       	brpl	.-8      	; 0x3032 <DIO_vTogglePinValue+0xb8>
    303a:	84 27       	eor	r24, r20
    303c:	8c 93       	st	X, r24
    303e:	13 c0       	rjmp	.+38     	; 0x3066 <DIO_vTogglePinValue+0xec>
	case PORTD: TOG_BIT(PORTD_REG, Copy_u8PinNum); break;
    3040:	a2 e3       	ldi	r26, 0x32	; 50
    3042:	b0 e0       	ldi	r27, 0x00	; 0
    3044:	e2 e3       	ldi	r30, 0x32	; 50
    3046:	f0 e0       	ldi	r31, 0x00	; 0
    3048:	80 81       	ld	r24, Z
    304a:	48 2f       	mov	r20, r24
    304c:	8a 81       	ldd	r24, Y+2	; 0x02
    304e:	28 2f       	mov	r18, r24
    3050:	30 e0       	ldi	r19, 0x00	; 0
    3052:	81 e0       	ldi	r24, 0x01	; 1
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	02 2e       	mov	r0, r18
    3058:	02 c0       	rjmp	.+4      	; 0x305e <DIO_vTogglePinValue+0xe4>
    305a:	88 0f       	add	r24, r24
    305c:	99 1f       	adc	r25, r25
    305e:	0a 94       	dec	r0
    3060:	e2 f7       	brpl	.-8      	; 0x305a <DIO_vTogglePinValue+0xe0>
    3062:	84 27       	eor	r24, r20
    3064:	8c 93       	st	X, r24
	}
}
    3066:	0f 90       	pop	r0
    3068:	0f 90       	pop	r0
    306a:	0f 90       	pop	r0
    306c:	0f 90       	pop	r0
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <DIO_vSetGroupDir>:

//sets data direction of all 8 pins in a port
void DIO_vSetGroupDir(u8 Copy_u8PortName, u8 Copy_u8PortDir){
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	00 d0       	rcall	.+0      	; 0x307a <DIO_vSetGroupDir+0x6>
    307a:	00 d0       	rcall	.+0      	; 0x307c <DIO_vSetGroupDir+0x8>
    307c:	00 d0       	rcall	.+0      	; 0x307e <DIO_vSetGroupDir+0xa>
    307e:	cd b7       	in	r28, 0x3d	; 61
    3080:	de b7       	in	r29, 0x3e	; 62
    3082:	89 83       	std	Y+1, r24	; 0x01
    3084:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PortDir == OUTPUT)
    3086:	8a 81       	ldd	r24, Y+2	; 0x02
    3088:	81 30       	cpi	r24, 0x01	; 1
    308a:	99 f5       	brne	.+102    	; 0x30f2 <DIO_vSetGroupDir+0x7e>
	{
		switch(Copy_u8PortName)
    308c:	89 81       	ldd	r24, Y+1	; 0x01
    308e:	28 2f       	mov	r18, r24
    3090:	30 e0       	ldi	r19, 0x00	; 0
    3092:	3e 83       	std	Y+6, r19	; 0x06
    3094:	2d 83       	std	Y+5, r18	; 0x05
    3096:	8d 81       	ldd	r24, Y+5	; 0x05
    3098:	9e 81       	ldd	r25, Y+6	; 0x06
    309a:	81 30       	cpi	r24, 0x01	; 1
    309c:	91 05       	cpc	r25, r1
    309e:	d1 f0       	breq	.+52     	; 0x30d4 <DIO_vSetGroupDir+0x60>
    30a0:	2d 81       	ldd	r18, Y+5	; 0x05
    30a2:	3e 81       	ldd	r19, Y+6	; 0x06
    30a4:	22 30       	cpi	r18, 0x02	; 2
    30a6:	31 05       	cpc	r19, r1
    30a8:	2c f4       	brge	.+10     	; 0x30b4 <DIO_vSetGroupDir+0x40>
    30aa:	8d 81       	ldd	r24, Y+5	; 0x05
    30ac:	9e 81       	ldd	r25, Y+6	; 0x06
    30ae:	00 97       	sbiw	r24, 0x00	; 0
    30b0:	61 f0       	breq	.+24     	; 0x30ca <DIO_vSetGroupDir+0x56>
    30b2:	50 c0       	rjmp	.+160    	; 0x3154 <DIO_vSetGroupDir+0xe0>
    30b4:	2d 81       	ldd	r18, Y+5	; 0x05
    30b6:	3e 81       	ldd	r19, Y+6	; 0x06
    30b8:	22 30       	cpi	r18, 0x02	; 2
    30ba:	31 05       	cpc	r19, r1
    30bc:	81 f0       	breq	.+32     	; 0x30de <DIO_vSetGroupDir+0x6a>
    30be:	8d 81       	ldd	r24, Y+5	; 0x05
    30c0:	9e 81       	ldd	r25, Y+6	; 0x06
    30c2:	83 30       	cpi	r24, 0x03	; 3
    30c4:	91 05       	cpc	r25, r1
    30c6:	81 f0       	breq	.+32     	; 0x30e8 <DIO_vSetGroupDir+0x74>
    30c8:	45 c0       	rjmp	.+138    	; 0x3154 <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0xFF; break;
    30ca:	ea e3       	ldi	r30, 0x3A	; 58
    30cc:	f0 e0       	ldi	r31, 0x00	; 0
    30ce:	8f ef       	ldi	r24, 0xFF	; 255
    30d0:	80 83       	st	Z, r24
    30d2:	40 c0       	rjmp	.+128    	; 0x3154 <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0xFF; break;
    30d4:	e7 e3       	ldi	r30, 0x37	; 55
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	8f ef       	ldi	r24, 0xFF	; 255
    30da:	80 83       	st	Z, r24
    30dc:	3b c0       	rjmp	.+118    	; 0x3154 <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0xFF; break;
    30de:	e4 e3       	ldi	r30, 0x34	; 52
    30e0:	f0 e0       	ldi	r31, 0x00	; 0
    30e2:	8f ef       	ldi	r24, 0xFF	; 255
    30e4:	80 83       	st	Z, r24
    30e6:	36 c0       	rjmp	.+108    	; 0x3154 <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0xFF; break;
    30e8:	e1 e3       	ldi	r30, 0x31	; 49
    30ea:	f0 e0       	ldi	r31, 0x00	; 0
    30ec:	8f ef       	ldi	r24, 0xFF	; 255
    30ee:	80 83       	st	Z, r24
    30f0:	31 c0       	rjmp	.+98     	; 0x3154 <DIO_vSetGroupDir+0xe0>
		}
	}
	else if(Copy_u8PortDir == INPUT)
    30f2:	8a 81       	ldd	r24, Y+2	; 0x02
    30f4:	88 23       	and	r24, r24
    30f6:	71 f5       	brne	.+92     	; 0x3154 <DIO_vSetGroupDir+0xe0>
	{
		switch(Copy_u8PortName)
    30f8:	89 81       	ldd	r24, Y+1	; 0x01
    30fa:	28 2f       	mov	r18, r24
    30fc:	30 e0       	ldi	r19, 0x00	; 0
    30fe:	3c 83       	std	Y+4, r19	; 0x04
    3100:	2b 83       	std	Y+3, r18	; 0x03
    3102:	8b 81       	ldd	r24, Y+3	; 0x03
    3104:	9c 81       	ldd	r25, Y+4	; 0x04
    3106:	81 30       	cpi	r24, 0x01	; 1
    3108:	91 05       	cpc	r25, r1
    310a:	c9 f0       	breq	.+50     	; 0x313e <DIO_vSetGroupDir+0xca>
    310c:	2b 81       	ldd	r18, Y+3	; 0x03
    310e:	3c 81       	ldd	r19, Y+4	; 0x04
    3110:	22 30       	cpi	r18, 0x02	; 2
    3112:	31 05       	cpc	r19, r1
    3114:	2c f4       	brge	.+10     	; 0x3120 <DIO_vSetGroupDir+0xac>
    3116:	8b 81       	ldd	r24, Y+3	; 0x03
    3118:	9c 81       	ldd	r25, Y+4	; 0x04
    311a:	00 97       	sbiw	r24, 0x00	; 0
    311c:	61 f0       	breq	.+24     	; 0x3136 <DIO_vSetGroupDir+0xc2>
    311e:	1a c0       	rjmp	.+52     	; 0x3154 <DIO_vSetGroupDir+0xe0>
    3120:	2b 81       	ldd	r18, Y+3	; 0x03
    3122:	3c 81       	ldd	r19, Y+4	; 0x04
    3124:	22 30       	cpi	r18, 0x02	; 2
    3126:	31 05       	cpc	r19, r1
    3128:	71 f0       	breq	.+28     	; 0x3146 <DIO_vSetGroupDir+0xd2>
    312a:	8b 81       	ldd	r24, Y+3	; 0x03
    312c:	9c 81       	ldd	r25, Y+4	; 0x04
    312e:	83 30       	cpi	r24, 0x03	; 3
    3130:	91 05       	cpc	r25, r1
    3132:	69 f0       	breq	.+26     	; 0x314e <DIO_vSetGroupDir+0xda>
    3134:	0f c0       	rjmp	.+30     	; 0x3154 <DIO_vSetGroupDir+0xe0>
		{
		case PORTA: DDRA_REG = 0x00; break;
    3136:	ea e3       	ldi	r30, 0x3A	; 58
    3138:	f0 e0       	ldi	r31, 0x00	; 0
    313a:	10 82       	st	Z, r1
    313c:	0b c0       	rjmp	.+22     	; 0x3154 <DIO_vSetGroupDir+0xe0>
		case PORTB: DDRB_REG = 0x00; break;
    313e:	e7 e3       	ldi	r30, 0x37	; 55
    3140:	f0 e0       	ldi	r31, 0x00	; 0
    3142:	10 82       	st	Z, r1
    3144:	07 c0       	rjmp	.+14     	; 0x3154 <DIO_vSetGroupDir+0xe0>
		case PORTC: DDRC_REG = 0x00; break;
    3146:	e4 e3       	ldi	r30, 0x34	; 52
    3148:	f0 e0       	ldi	r31, 0x00	; 0
    314a:	10 82       	st	Z, r1
    314c:	03 c0       	rjmp	.+6      	; 0x3154 <DIO_vSetGroupDir+0xe0>
		case PORTD: DDRD_REG = 0x00; break;
    314e:	e1 e3       	ldi	r30, 0x31	; 49
    3150:	f0 e0       	ldi	r31, 0x00	; 0
    3152:	10 82       	st	Z, r1
		}
	}
}
    3154:	26 96       	adiw	r28, 0x06	; 6
    3156:	0f b6       	in	r0, 0x3f	; 63
    3158:	f8 94       	cli
    315a:	de bf       	out	0x3e, r29	; 62
    315c:	0f be       	out	0x3f, r0	; 63
    315e:	cd bf       	out	0x3d, r28	; 61
    3160:	cf 91       	pop	r28
    3162:	df 91       	pop	r29
    3164:	08 95       	ret

00003166 <DIO_vSetGroupValue>:

//sets value of all 8 pins in a port
void DIO_vSetGroupValue(u8 Copy_u8PortName, u8 Copy_u8PortValue){
    3166:	df 93       	push	r29
    3168:	cf 93       	push	r28
    316a:	cd b7       	in	r28, 0x3d	; 61
    316c:	de b7       	in	r29, 0x3e	; 62
    316e:	28 97       	sbiw	r28, 0x08	; 8
    3170:	0f b6       	in	r0, 0x3f	; 63
    3172:	f8 94       	cli
    3174:	de bf       	out	0x3e, r29	; 62
    3176:	0f be       	out	0x3f, r0	; 63
    3178:	cd bf       	out	0x3d, r28	; 61
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    317e:	89 81       	ldd	r24, Y+1	; 0x01
    3180:	28 2f       	mov	r18, r24
    3182:	30 e0       	ldi	r19, 0x00	; 0
    3184:	38 87       	std	Y+8, r19	; 0x08
    3186:	2f 83       	std	Y+7, r18	; 0x07
    3188:	8f 81       	ldd	r24, Y+7	; 0x07
    318a:	98 85       	ldd	r25, Y+8	; 0x08
    318c:	81 30       	cpi	r24, 0x01	; 1
    318e:	91 05       	cpc	r25, r1
    3190:	e9 f0       	breq	.+58     	; 0x31cc <DIO_vSetGroupValue+0x66>
    3192:	2f 81       	ldd	r18, Y+7	; 0x07
    3194:	38 85       	ldd	r19, Y+8	; 0x08
    3196:	22 30       	cpi	r18, 0x02	; 2
    3198:	31 05       	cpc	r19, r1
    319a:	2c f4       	brge	.+10     	; 0x31a6 <DIO_vSetGroupValue+0x40>
    319c:	8f 81       	ldd	r24, Y+7	; 0x07
    319e:	98 85       	ldd	r25, Y+8	; 0x08
    31a0:	00 97       	sbiw	r24, 0x00	; 0
    31a2:	61 f0       	breq	.+24     	; 0x31bc <DIO_vSetGroupValue+0x56>
    31a4:	2a c0       	rjmp	.+84     	; 0x31fa <DIO_vSetGroupValue+0x94>
    31a6:	2f 81       	ldd	r18, Y+7	; 0x07
    31a8:	38 85       	ldd	r19, Y+8	; 0x08
    31aa:	22 30       	cpi	r18, 0x02	; 2
    31ac:	31 05       	cpc	r19, r1
    31ae:	b1 f0       	breq	.+44     	; 0x31dc <DIO_vSetGroupValue+0x76>
    31b0:	8f 81       	ldd	r24, Y+7	; 0x07
    31b2:	98 85       	ldd	r25, Y+8	; 0x08
    31b4:	83 30       	cpi	r24, 0x03	; 3
    31b6:	91 05       	cpc	r25, r1
    31b8:	c9 f0       	breq	.+50     	; 0x31ec <DIO_vSetGroupValue+0x86>
    31ba:	1f c0       	rjmp	.+62     	; 0x31fa <DIO_vSetGroupValue+0x94>
	{
	case PORTA: PORTA_REG = (PORTA_REG&0) | Copy_u8PortValue; break;
    31bc:	eb e3       	ldi	r30, 0x3B	; 59
    31be:	f0 e0       	ldi	r31, 0x00	; 0
    31c0:	90 81       	ld	r25, Z
    31c2:	eb e3       	ldi	r30, 0x3B	; 59
    31c4:	f0 e0       	ldi	r31, 0x00	; 0
    31c6:	8a 81       	ldd	r24, Y+2	; 0x02
    31c8:	80 83       	st	Z, r24
    31ca:	17 c0       	rjmp	.+46     	; 0x31fa <DIO_vSetGroupValue+0x94>
	case PORTB: PORTB_REG = (PORTB_REG&0) | Copy_u8PortValue; break;
    31cc:	e8 e3       	ldi	r30, 0x38	; 56
    31ce:	f0 e0       	ldi	r31, 0x00	; 0
    31d0:	20 81       	ld	r18, Z
    31d2:	e8 e3       	ldi	r30, 0x38	; 56
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	8a 81       	ldd	r24, Y+2	; 0x02
    31d8:	80 83       	st	Z, r24
    31da:	0f c0       	rjmp	.+30     	; 0x31fa <DIO_vSetGroupValue+0x94>
	case PORTC: PORTC_REG = (PORTC_REG&0) | Copy_u8PortValue; break;
    31dc:	e5 e3       	ldi	r30, 0x35	; 53
    31de:	f0 e0       	ldi	r31, 0x00	; 0
    31e0:	30 81       	ld	r19, Z
    31e2:	e5 e3       	ldi	r30, 0x35	; 53
    31e4:	f0 e0       	ldi	r31, 0x00	; 0
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	80 83       	st	Z, r24
    31ea:	07 c0       	rjmp	.+14     	; 0x31fa <DIO_vSetGroupValue+0x94>
	case PORTD: PORTD_REG = (PORTD_REG&0) | Copy_u8PortValue; break;
    31ec:	e2 e3       	ldi	r30, 0x32	; 50
    31ee:	f0 e0       	ldi	r31, 0x00	; 0
    31f0:	80 81       	ld	r24, Z
    31f2:	e2 e3       	ldi	r30, 0x32	; 50
    31f4:	f0 e0       	ldi	r31, 0x00	; 0
    31f6:	8a 81       	ldd	r24, Y+2	; 0x02
    31f8:	80 83       	st	Z, r24
	}
}
    31fa:	28 96       	adiw	r28, 0x08	; 8
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	cf 91       	pop	r28
    3208:	df 91       	pop	r29
    320a:	08 95       	ret

0000320c <DIO_u8ReadGroupValue>:

//reads value on all 8 pins of a port
u8 DIO_u8ReadGroupValue(u8 Copy_u8PortName){
    320c:	df 93       	push	r29
    320e:	cf 93       	push	r28
    3210:	00 d0       	rcall	.+0      	; 0x3212 <DIO_u8ReadGroupValue+0x6>
    3212:	00 d0       	rcall	.+0      	; 0x3214 <DIO_u8ReadGroupValue+0x8>
    3214:	cd b7       	in	r28, 0x3d	; 61
    3216:	de b7       	in	r29, 0x3e	; 62
    3218:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8ReadValue = 0;
    321a:	19 82       	std	Y+1, r1	; 0x01
	switch(Copy_u8PortName)
    321c:	8a 81       	ldd	r24, Y+2	; 0x02
    321e:	28 2f       	mov	r18, r24
    3220:	30 e0       	ldi	r19, 0x00	; 0
    3222:	3c 83       	std	Y+4, r19	; 0x04
    3224:	2b 83       	std	Y+3, r18	; 0x03
    3226:	8b 81       	ldd	r24, Y+3	; 0x03
    3228:	9c 81       	ldd	r25, Y+4	; 0x04
    322a:	81 30       	cpi	r24, 0x01	; 1
    322c:	91 05       	cpc	r25, r1
    322e:	d1 f0       	breq	.+52     	; 0x3264 <DIO_u8ReadGroupValue+0x58>
    3230:	2b 81       	ldd	r18, Y+3	; 0x03
    3232:	3c 81       	ldd	r19, Y+4	; 0x04
    3234:	22 30       	cpi	r18, 0x02	; 2
    3236:	31 05       	cpc	r19, r1
    3238:	2c f4       	brge	.+10     	; 0x3244 <DIO_u8ReadGroupValue+0x38>
    323a:	8b 81       	ldd	r24, Y+3	; 0x03
    323c:	9c 81       	ldd	r25, Y+4	; 0x04
    323e:	00 97       	sbiw	r24, 0x00	; 0
    3240:	61 f0       	breq	.+24     	; 0x325a <DIO_u8ReadGroupValue+0x4e>
    3242:	1e c0       	rjmp	.+60     	; 0x3280 <DIO_u8ReadGroupValue+0x74>
    3244:	2b 81       	ldd	r18, Y+3	; 0x03
    3246:	3c 81       	ldd	r19, Y+4	; 0x04
    3248:	22 30       	cpi	r18, 0x02	; 2
    324a:	31 05       	cpc	r19, r1
    324c:	81 f0       	breq	.+32     	; 0x326e <DIO_u8ReadGroupValue+0x62>
    324e:	8b 81       	ldd	r24, Y+3	; 0x03
    3250:	9c 81       	ldd	r25, Y+4	; 0x04
    3252:	83 30       	cpi	r24, 0x03	; 3
    3254:	91 05       	cpc	r25, r1
    3256:	81 f0       	breq	.+32     	; 0x3278 <DIO_u8ReadGroupValue+0x6c>
    3258:	13 c0       	rjmp	.+38     	; 0x3280 <DIO_u8ReadGroupValue+0x74>
	{
	case PORTA: Local_u8ReadValue = PINA_REG; break;
    325a:	e9 e3       	ldi	r30, 0x39	; 57
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	80 81       	ld	r24, Z
    3260:	89 83       	std	Y+1, r24	; 0x01
    3262:	0e c0       	rjmp	.+28     	; 0x3280 <DIO_u8ReadGroupValue+0x74>
	case PORTB: Local_u8ReadValue = PINB_REG; break;
    3264:	e6 e3       	ldi	r30, 0x36	; 54
    3266:	f0 e0       	ldi	r31, 0x00	; 0
    3268:	80 81       	ld	r24, Z
    326a:	89 83       	std	Y+1, r24	; 0x01
    326c:	09 c0       	rjmp	.+18     	; 0x3280 <DIO_u8ReadGroupValue+0x74>
	case PORTC: Local_u8ReadValue = PINC_REG; break;
    326e:	e3 e3       	ldi	r30, 0x33	; 51
    3270:	f0 e0       	ldi	r31, 0x00	; 0
    3272:	80 81       	ld	r24, Z
    3274:	89 83       	std	Y+1, r24	; 0x01
    3276:	04 c0       	rjmp	.+8      	; 0x3280 <DIO_u8ReadGroupValue+0x74>
	case PORTD: Local_u8ReadValue = PIND_REG; break;
    3278:	e0 e3       	ldi	r30, 0x30	; 48
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	89 83       	std	Y+1, r24	; 0x01
	}
	return Local_u8ReadValue;
    3280:	89 81       	ldd	r24, Y+1	; 0x01
}
    3282:	0f 90       	pop	r0
    3284:	0f 90       	pop	r0
    3286:	0f 90       	pop	r0
    3288:	0f 90       	pop	r0
    328a:	cf 91       	pop	r28
    328c:	df 91       	pop	r29
    328e:	08 95       	ret

00003290 <DIO_vSet4LSBDir>:

//sets data direction of 4 LSB pins of a port
void DIO_vSet4LSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    3290:	df 93       	push	r29
    3292:	cf 93       	push	r28
    3294:	00 d0       	rcall	.+0      	; 0x3296 <DIO_vSet4LSBDir+0x6>
    3296:	00 d0       	rcall	.+0      	; 0x3298 <DIO_vSet4LSBDir+0x8>
    3298:	00 d0       	rcall	.+0      	; 0x329a <DIO_vSet4LSBDir+0xa>
    329a:	cd b7       	in	r28, 0x3d	; 61
    329c:	de b7       	in	r29, 0x3e	; 62
    329e:	89 83       	std	Y+1, r24	; 0x01
    32a0:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    32a2:	8a 81       	ldd	r24, Y+2	; 0x02
    32a4:	81 30       	cpi	r24, 0x01	; 1
    32a6:	09 f0       	breq	.+2      	; 0x32aa <DIO_vSet4LSBDir+0x1a>
    32a8:	3f c0       	rjmp	.+126    	; 0x3328 <DIO_vSet4LSBDir+0x98>
	{
		switch(Copy_u8PortName)
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	3e 83       	std	Y+6, r19	; 0x06
    32b2:	2d 83       	std	Y+5, r18	; 0x05
    32b4:	8d 81       	ldd	r24, Y+5	; 0x05
    32b6:	9e 81       	ldd	r25, Y+6	; 0x06
    32b8:	81 30       	cpi	r24, 0x01	; 1
    32ba:	91 05       	cpc	r25, r1
    32bc:	e9 f0       	breq	.+58     	; 0x32f8 <DIO_vSet4LSBDir+0x68>
    32be:	2d 81       	ldd	r18, Y+5	; 0x05
    32c0:	3e 81       	ldd	r19, Y+6	; 0x06
    32c2:	22 30       	cpi	r18, 0x02	; 2
    32c4:	31 05       	cpc	r19, r1
    32c6:	2c f4       	brge	.+10     	; 0x32d2 <DIO_vSet4LSBDir+0x42>
    32c8:	8d 81       	ldd	r24, Y+5	; 0x05
    32ca:	9e 81       	ldd	r25, Y+6	; 0x06
    32cc:	00 97       	sbiw	r24, 0x00	; 0
    32ce:	61 f0       	breq	.+24     	; 0x32e8 <DIO_vSet4LSBDir+0x58>
    32d0:	6d c0       	rjmp	.+218    	; 0x33ac <DIO_vSet4LSBDir+0x11c>
    32d2:	2d 81       	ldd	r18, Y+5	; 0x05
    32d4:	3e 81       	ldd	r19, Y+6	; 0x06
    32d6:	22 30       	cpi	r18, 0x02	; 2
    32d8:	31 05       	cpc	r19, r1
    32da:	b1 f0       	breq	.+44     	; 0x3308 <DIO_vSet4LSBDir+0x78>
    32dc:	8d 81       	ldd	r24, Y+5	; 0x05
    32de:	9e 81       	ldd	r25, Y+6	; 0x06
    32e0:	83 30       	cpi	r24, 0x03	; 3
    32e2:	91 05       	cpc	r25, r1
    32e4:	c9 f0       	breq	.+50     	; 0x3318 <DIO_vSet4LSBDir+0x88>
    32e6:	62 c0       	rjmp	.+196    	; 0x33ac <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0x0F; break;
    32e8:	aa e3       	ldi	r26, 0x3A	; 58
    32ea:	b0 e0       	ldi	r27, 0x00	; 0
    32ec:	ea e3       	ldi	r30, 0x3A	; 58
    32ee:	f0 e0       	ldi	r31, 0x00	; 0
    32f0:	80 81       	ld	r24, Z
    32f2:	8f 60       	ori	r24, 0x0F	; 15
    32f4:	8c 93       	st	X, r24
    32f6:	5a c0       	rjmp	.+180    	; 0x33ac <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG |= 0x0F; break;
    32f8:	a7 e3       	ldi	r26, 0x37	; 55
    32fa:	b0 e0       	ldi	r27, 0x00	; 0
    32fc:	e7 e3       	ldi	r30, 0x37	; 55
    32fe:	f0 e0       	ldi	r31, 0x00	; 0
    3300:	80 81       	ld	r24, Z
    3302:	8f 60       	ori	r24, 0x0F	; 15
    3304:	8c 93       	st	X, r24
    3306:	52 c0       	rjmp	.+164    	; 0x33ac <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG |= 0x0F; break;
    3308:	a4 e3       	ldi	r26, 0x34	; 52
    330a:	b0 e0       	ldi	r27, 0x00	; 0
    330c:	e4 e3       	ldi	r30, 0x34	; 52
    330e:	f0 e0       	ldi	r31, 0x00	; 0
    3310:	80 81       	ld	r24, Z
    3312:	8f 60       	ori	r24, 0x0F	; 15
    3314:	8c 93       	st	X, r24
    3316:	4a c0       	rjmp	.+148    	; 0x33ac <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG |= 0x0F; break;
    3318:	a1 e3       	ldi	r26, 0x31	; 49
    331a:	b0 e0       	ldi	r27, 0x00	; 0
    331c:	e1 e3       	ldi	r30, 0x31	; 49
    331e:	f0 e0       	ldi	r31, 0x00	; 0
    3320:	80 81       	ld	r24, Z
    3322:	8f 60       	ori	r24, 0x0F	; 15
    3324:	8c 93       	st	X, r24
    3326:	42 c0       	rjmp	.+132    	; 0x33ac <DIO_vSet4LSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    3328:	8a 81       	ldd	r24, Y+2	; 0x02
    332a:	88 23       	and	r24, r24
    332c:	09 f0       	breq	.+2      	; 0x3330 <DIO_vSet4LSBDir+0xa0>
    332e:	3e c0       	rjmp	.+124    	; 0x33ac <DIO_vSet4LSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    3330:	89 81       	ldd	r24, Y+1	; 0x01
    3332:	28 2f       	mov	r18, r24
    3334:	30 e0       	ldi	r19, 0x00	; 0
    3336:	3c 83       	std	Y+4, r19	; 0x04
    3338:	2b 83       	std	Y+3, r18	; 0x03
    333a:	8b 81       	ldd	r24, Y+3	; 0x03
    333c:	9c 81       	ldd	r25, Y+4	; 0x04
    333e:	81 30       	cpi	r24, 0x01	; 1
    3340:	91 05       	cpc	r25, r1
    3342:	e9 f0       	breq	.+58     	; 0x337e <DIO_vSet4LSBDir+0xee>
    3344:	2b 81       	ldd	r18, Y+3	; 0x03
    3346:	3c 81       	ldd	r19, Y+4	; 0x04
    3348:	22 30       	cpi	r18, 0x02	; 2
    334a:	31 05       	cpc	r19, r1
    334c:	2c f4       	brge	.+10     	; 0x3358 <DIO_vSet4LSBDir+0xc8>
    334e:	8b 81       	ldd	r24, Y+3	; 0x03
    3350:	9c 81       	ldd	r25, Y+4	; 0x04
    3352:	00 97       	sbiw	r24, 0x00	; 0
    3354:	61 f0       	breq	.+24     	; 0x336e <DIO_vSet4LSBDir+0xde>
    3356:	2a c0       	rjmp	.+84     	; 0x33ac <DIO_vSet4LSBDir+0x11c>
    3358:	2b 81       	ldd	r18, Y+3	; 0x03
    335a:	3c 81       	ldd	r19, Y+4	; 0x04
    335c:	22 30       	cpi	r18, 0x02	; 2
    335e:	31 05       	cpc	r19, r1
    3360:	b1 f0       	breq	.+44     	; 0x338e <DIO_vSet4LSBDir+0xfe>
    3362:	8b 81       	ldd	r24, Y+3	; 0x03
    3364:	9c 81       	ldd	r25, Y+4	; 0x04
    3366:	83 30       	cpi	r24, 0x03	; 3
    3368:	91 05       	cpc	r25, r1
    336a:	c9 f0       	breq	.+50     	; 0x339e <DIO_vSet4LSBDir+0x10e>
    336c:	1f c0       	rjmp	.+62     	; 0x33ac <DIO_vSet4LSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0xF0; break;
    336e:	aa e3       	ldi	r26, 0x3A	; 58
    3370:	b0 e0       	ldi	r27, 0x00	; 0
    3372:	ea e3       	ldi	r30, 0x3A	; 58
    3374:	f0 e0       	ldi	r31, 0x00	; 0
    3376:	80 81       	ld	r24, Z
    3378:	80 7f       	andi	r24, 0xF0	; 240
    337a:	8c 93       	st	X, r24
    337c:	17 c0       	rjmp	.+46     	; 0x33ac <DIO_vSet4LSBDir+0x11c>
		case PORTB: DDRB_REG &= 0xF0; break;
    337e:	a7 e3       	ldi	r26, 0x37	; 55
    3380:	b0 e0       	ldi	r27, 0x00	; 0
    3382:	e7 e3       	ldi	r30, 0x37	; 55
    3384:	f0 e0       	ldi	r31, 0x00	; 0
    3386:	80 81       	ld	r24, Z
    3388:	80 7f       	andi	r24, 0xF0	; 240
    338a:	8c 93       	st	X, r24
    338c:	0f c0       	rjmp	.+30     	; 0x33ac <DIO_vSet4LSBDir+0x11c>
		case PORTC: DDRC_REG &= 0xF0; break;
    338e:	a4 e3       	ldi	r26, 0x34	; 52
    3390:	b0 e0       	ldi	r27, 0x00	; 0
    3392:	e4 e3       	ldi	r30, 0x34	; 52
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	80 81       	ld	r24, Z
    3398:	80 7f       	andi	r24, 0xF0	; 240
    339a:	8c 93       	st	X, r24
    339c:	07 c0       	rjmp	.+14     	; 0x33ac <DIO_vSet4LSBDir+0x11c>
		case PORTD: DDRD_REG &= 0xF0; break;
    339e:	a1 e3       	ldi	r26, 0x31	; 49
    33a0:	b0 e0       	ldi	r27, 0x00	; 0
    33a2:	e1 e3       	ldi	r30, 0x31	; 49
    33a4:	f0 e0       	ldi	r31, 0x00	; 0
    33a6:	80 81       	ld	r24, Z
    33a8:	80 7f       	andi	r24, 0xF0	; 240
    33aa:	8c 93       	st	X, r24
		}
	}
}
    33ac:	26 96       	adiw	r28, 0x06	; 6
    33ae:	0f b6       	in	r0, 0x3f	; 63
    33b0:	f8 94       	cli
    33b2:	de bf       	out	0x3e, r29	; 62
    33b4:	0f be       	out	0x3f, r0	; 63
    33b6:	cd bf       	out	0x3d, r28	; 61
    33b8:	cf 91       	pop	r28
    33ba:	df 91       	pop	r29
    33bc:	08 95       	ret

000033be <DIO_vSet4MSBDir>:

//sets data direction of 4 MSB pins of a port
void DIO_vSet4MSBDir(u8 Copy_u8PortName, u8 Copy_u8PinDir){
    33be:	df 93       	push	r29
    33c0:	cf 93       	push	r28
    33c2:	00 d0       	rcall	.+0      	; 0x33c4 <DIO_vSet4MSBDir+0x6>
    33c4:	00 d0       	rcall	.+0      	; 0x33c6 <DIO_vSet4MSBDir+0x8>
    33c6:	00 d0       	rcall	.+0      	; 0x33c8 <DIO_vSet4MSBDir+0xa>
    33c8:	cd b7       	in	r28, 0x3d	; 61
    33ca:	de b7       	in	r29, 0x3e	; 62
    33cc:	89 83       	std	Y+1, r24	; 0x01
    33ce:	6a 83       	std	Y+2, r22	; 0x02
	if(Copy_u8PinDir == OUTPUT)
    33d0:	8a 81       	ldd	r24, Y+2	; 0x02
    33d2:	81 30       	cpi	r24, 0x01	; 1
    33d4:	09 f0       	breq	.+2      	; 0x33d8 <DIO_vSet4MSBDir+0x1a>
    33d6:	3f c0       	rjmp	.+126    	; 0x3456 <DIO_vSet4MSBDir+0x98>
	{
		switch(Copy_u8PortName)
    33d8:	89 81       	ldd	r24, Y+1	; 0x01
    33da:	28 2f       	mov	r18, r24
    33dc:	30 e0       	ldi	r19, 0x00	; 0
    33de:	3e 83       	std	Y+6, r19	; 0x06
    33e0:	2d 83       	std	Y+5, r18	; 0x05
    33e2:	8d 81       	ldd	r24, Y+5	; 0x05
    33e4:	9e 81       	ldd	r25, Y+6	; 0x06
    33e6:	81 30       	cpi	r24, 0x01	; 1
    33e8:	91 05       	cpc	r25, r1
    33ea:	e9 f0       	breq	.+58     	; 0x3426 <DIO_vSet4MSBDir+0x68>
    33ec:	2d 81       	ldd	r18, Y+5	; 0x05
    33ee:	3e 81       	ldd	r19, Y+6	; 0x06
    33f0:	22 30       	cpi	r18, 0x02	; 2
    33f2:	31 05       	cpc	r19, r1
    33f4:	2c f4       	brge	.+10     	; 0x3400 <DIO_vSet4MSBDir+0x42>
    33f6:	8d 81       	ldd	r24, Y+5	; 0x05
    33f8:	9e 81       	ldd	r25, Y+6	; 0x06
    33fa:	00 97       	sbiw	r24, 0x00	; 0
    33fc:	61 f0       	breq	.+24     	; 0x3416 <DIO_vSet4MSBDir+0x58>
    33fe:	6d c0       	rjmp	.+218    	; 0x34da <DIO_vSet4MSBDir+0x11c>
    3400:	2d 81       	ldd	r18, Y+5	; 0x05
    3402:	3e 81       	ldd	r19, Y+6	; 0x06
    3404:	22 30       	cpi	r18, 0x02	; 2
    3406:	31 05       	cpc	r19, r1
    3408:	b1 f0       	breq	.+44     	; 0x3436 <DIO_vSet4MSBDir+0x78>
    340a:	8d 81       	ldd	r24, Y+5	; 0x05
    340c:	9e 81       	ldd	r25, Y+6	; 0x06
    340e:	83 30       	cpi	r24, 0x03	; 3
    3410:	91 05       	cpc	r25, r1
    3412:	c9 f0       	breq	.+50     	; 0x3446 <DIO_vSet4MSBDir+0x88>
    3414:	62 c0       	rjmp	.+196    	; 0x34da <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG |= 0xF0; break;
    3416:	aa e3       	ldi	r26, 0x3A	; 58
    3418:	b0 e0       	ldi	r27, 0x00	; 0
    341a:	ea e3       	ldi	r30, 0x3A	; 58
    341c:	f0 e0       	ldi	r31, 0x00	; 0
    341e:	80 81       	ld	r24, Z
    3420:	80 6f       	ori	r24, 0xF0	; 240
    3422:	8c 93       	st	X, r24
    3424:	5a c0       	rjmp	.+180    	; 0x34da <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG |= 0xF0; break;
    3426:	a7 e3       	ldi	r26, 0x37	; 55
    3428:	b0 e0       	ldi	r27, 0x00	; 0
    342a:	e7 e3       	ldi	r30, 0x37	; 55
    342c:	f0 e0       	ldi	r31, 0x00	; 0
    342e:	80 81       	ld	r24, Z
    3430:	80 6f       	ori	r24, 0xF0	; 240
    3432:	8c 93       	st	X, r24
    3434:	52 c0       	rjmp	.+164    	; 0x34da <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG |= 0xF0; break;
    3436:	a4 e3       	ldi	r26, 0x34	; 52
    3438:	b0 e0       	ldi	r27, 0x00	; 0
    343a:	e4 e3       	ldi	r30, 0x34	; 52
    343c:	f0 e0       	ldi	r31, 0x00	; 0
    343e:	80 81       	ld	r24, Z
    3440:	80 6f       	ori	r24, 0xF0	; 240
    3442:	8c 93       	st	X, r24
    3444:	4a c0       	rjmp	.+148    	; 0x34da <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG |= 0xF0; break;
    3446:	a1 e3       	ldi	r26, 0x31	; 49
    3448:	b0 e0       	ldi	r27, 0x00	; 0
    344a:	e1 e3       	ldi	r30, 0x31	; 49
    344c:	f0 e0       	ldi	r31, 0x00	; 0
    344e:	80 81       	ld	r24, Z
    3450:	80 6f       	ori	r24, 0xF0	; 240
    3452:	8c 93       	st	X, r24
    3454:	42 c0       	rjmp	.+132    	; 0x34da <DIO_vSet4MSBDir+0x11c>
		}
	}
	else if(Copy_u8PinDir == INPUT)
    3456:	8a 81       	ldd	r24, Y+2	; 0x02
    3458:	88 23       	and	r24, r24
    345a:	09 f0       	breq	.+2      	; 0x345e <DIO_vSet4MSBDir+0xa0>
    345c:	3e c0       	rjmp	.+124    	; 0x34da <DIO_vSet4MSBDir+0x11c>
	{
		switch(Copy_u8PortName)
    345e:	89 81       	ldd	r24, Y+1	; 0x01
    3460:	28 2f       	mov	r18, r24
    3462:	30 e0       	ldi	r19, 0x00	; 0
    3464:	3c 83       	std	Y+4, r19	; 0x04
    3466:	2b 83       	std	Y+3, r18	; 0x03
    3468:	8b 81       	ldd	r24, Y+3	; 0x03
    346a:	9c 81       	ldd	r25, Y+4	; 0x04
    346c:	81 30       	cpi	r24, 0x01	; 1
    346e:	91 05       	cpc	r25, r1
    3470:	e9 f0       	breq	.+58     	; 0x34ac <DIO_vSet4MSBDir+0xee>
    3472:	2b 81       	ldd	r18, Y+3	; 0x03
    3474:	3c 81       	ldd	r19, Y+4	; 0x04
    3476:	22 30       	cpi	r18, 0x02	; 2
    3478:	31 05       	cpc	r19, r1
    347a:	2c f4       	brge	.+10     	; 0x3486 <DIO_vSet4MSBDir+0xc8>
    347c:	8b 81       	ldd	r24, Y+3	; 0x03
    347e:	9c 81       	ldd	r25, Y+4	; 0x04
    3480:	00 97       	sbiw	r24, 0x00	; 0
    3482:	61 f0       	breq	.+24     	; 0x349c <DIO_vSet4MSBDir+0xde>
    3484:	2a c0       	rjmp	.+84     	; 0x34da <DIO_vSet4MSBDir+0x11c>
    3486:	2b 81       	ldd	r18, Y+3	; 0x03
    3488:	3c 81       	ldd	r19, Y+4	; 0x04
    348a:	22 30       	cpi	r18, 0x02	; 2
    348c:	31 05       	cpc	r19, r1
    348e:	b1 f0       	breq	.+44     	; 0x34bc <DIO_vSet4MSBDir+0xfe>
    3490:	8b 81       	ldd	r24, Y+3	; 0x03
    3492:	9c 81       	ldd	r25, Y+4	; 0x04
    3494:	83 30       	cpi	r24, 0x03	; 3
    3496:	91 05       	cpc	r25, r1
    3498:	c9 f0       	breq	.+50     	; 0x34cc <DIO_vSet4MSBDir+0x10e>
    349a:	1f c0       	rjmp	.+62     	; 0x34da <DIO_vSet4MSBDir+0x11c>
		{
		case PORTA: DDRA_REG &= 0x0F; break;
    349c:	aa e3       	ldi	r26, 0x3A	; 58
    349e:	b0 e0       	ldi	r27, 0x00	; 0
    34a0:	ea e3       	ldi	r30, 0x3A	; 58
    34a2:	f0 e0       	ldi	r31, 0x00	; 0
    34a4:	80 81       	ld	r24, Z
    34a6:	8f 70       	andi	r24, 0x0F	; 15
    34a8:	8c 93       	st	X, r24
    34aa:	17 c0       	rjmp	.+46     	; 0x34da <DIO_vSet4MSBDir+0x11c>
		case PORTB: DDRB_REG &= 0x0F; break;
    34ac:	a7 e3       	ldi	r26, 0x37	; 55
    34ae:	b0 e0       	ldi	r27, 0x00	; 0
    34b0:	e7 e3       	ldi	r30, 0x37	; 55
    34b2:	f0 e0       	ldi	r31, 0x00	; 0
    34b4:	80 81       	ld	r24, Z
    34b6:	8f 70       	andi	r24, 0x0F	; 15
    34b8:	8c 93       	st	X, r24
    34ba:	0f c0       	rjmp	.+30     	; 0x34da <DIO_vSet4MSBDir+0x11c>
		case PORTC: DDRC_REG &= 0x0F; break;
    34bc:	a4 e3       	ldi	r26, 0x34	; 52
    34be:	b0 e0       	ldi	r27, 0x00	; 0
    34c0:	e4 e3       	ldi	r30, 0x34	; 52
    34c2:	f0 e0       	ldi	r31, 0x00	; 0
    34c4:	80 81       	ld	r24, Z
    34c6:	8f 70       	andi	r24, 0x0F	; 15
    34c8:	8c 93       	st	X, r24
    34ca:	07 c0       	rjmp	.+14     	; 0x34da <DIO_vSet4MSBDir+0x11c>
		case PORTD: DDRD_REG &= 0x0F; break;
    34cc:	a1 e3       	ldi	r26, 0x31	; 49
    34ce:	b0 e0       	ldi	r27, 0x00	; 0
    34d0:	e1 e3       	ldi	r30, 0x31	; 49
    34d2:	f0 e0       	ldi	r31, 0x00	; 0
    34d4:	80 81       	ld	r24, Z
    34d6:	8f 70       	andi	r24, 0x0F	; 15
    34d8:	8c 93       	st	X, r24
		}
	}
}
    34da:	26 96       	adiw	r28, 0x06	; 6
    34dc:	0f b6       	in	r0, 0x3f	; 63
    34de:	f8 94       	cli
    34e0:	de bf       	out	0x3e, r29	; 62
    34e2:	0f be       	out	0x3f, r0	; 63
    34e4:	cd bf       	out	0x3d, r28	; 61
    34e6:	cf 91       	pop	r28
    34e8:	df 91       	pop	r29
    34ea:	08 95       	ret

000034ec <DIO_vSet4LSBValue>:

//sets value of 4LSB pins of a port
void DIO_vSet4LSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    34ec:	df 93       	push	r29
    34ee:	cf 93       	push	r28
    34f0:	00 d0       	rcall	.+0      	; 0x34f2 <DIO_vSet4LSBValue+0x6>
    34f2:	00 d0       	rcall	.+0      	; 0x34f4 <DIO_vSet4LSBValue+0x8>
    34f4:	cd b7       	in	r28, 0x3d	; 61
    34f6:	de b7       	in	r29, 0x3e	; 62
    34f8:	89 83       	std	Y+1, r24	; 0x01
    34fa:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    34fc:	89 81       	ldd	r24, Y+1	; 0x01
    34fe:	28 2f       	mov	r18, r24
    3500:	30 e0       	ldi	r19, 0x00	; 0
    3502:	3c 83       	std	Y+4, r19	; 0x04
    3504:	2b 83       	std	Y+3, r18	; 0x03
    3506:	8b 81       	ldd	r24, Y+3	; 0x03
    3508:	9c 81       	ldd	r25, Y+4	; 0x04
    350a:	81 30       	cpi	r24, 0x01	; 1
    350c:	91 05       	cpc	r25, r1
    350e:	09 f1       	breq	.+66     	; 0x3552 <DIO_vSet4LSBValue+0x66>
    3510:	2b 81       	ldd	r18, Y+3	; 0x03
    3512:	3c 81       	ldd	r19, Y+4	; 0x04
    3514:	22 30       	cpi	r18, 0x02	; 2
    3516:	31 05       	cpc	r19, r1
    3518:	2c f4       	brge	.+10     	; 0x3524 <DIO_vSet4LSBValue+0x38>
    351a:	8b 81       	ldd	r24, Y+3	; 0x03
    351c:	9c 81       	ldd	r25, Y+4	; 0x04
    351e:	00 97       	sbiw	r24, 0x00	; 0
    3520:	61 f0       	breq	.+24     	; 0x353a <DIO_vSet4LSBValue+0x4e>
    3522:	3a c0       	rjmp	.+116    	; 0x3598 <DIO_vSet4LSBValue+0xac>
    3524:	2b 81       	ldd	r18, Y+3	; 0x03
    3526:	3c 81       	ldd	r19, Y+4	; 0x04
    3528:	22 30       	cpi	r18, 0x02	; 2
    352a:	31 05       	cpc	r19, r1
    352c:	f1 f0       	breq	.+60     	; 0x356a <DIO_vSet4LSBValue+0x7e>
    352e:	8b 81       	ldd	r24, Y+3	; 0x03
    3530:	9c 81       	ldd	r25, Y+4	; 0x04
    3532:	83 30       	cpi	r24, 0x03	; 3
    3534:	91 05       	cpc	r25, r1
    3536:	29 f1       	breq	.+74     	; 0x3582 <DIO_vSet4LSBValue+0x96>
    3538:	2f c0       	rjmp	.+94     	; 0x3598 <DIO_vSet4LSBValue+0xac>
	{
	case PORTA: PORTA_REG = (PORTA_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    353a:	ab e3       	ldi	r26, 0x3B	; 59
    353c:	b0 e0       	ldi	r27, 0x00	; 0
    353e:	eb e3       	ldi	r30, 0x3B	; 59
    3540:	f0 e0       	ldi	r31, 0x00	; 0
    3542:	80 81       	ld	r24, Z
    3544:	98 2f       	mov	r25, r24
    3546:	90 7f       	andi	r25, 0xF0	; 240
    3548:	8a 81       	ldd	r24, Y+2	; 0x02
    354a:	8f 70       	andi	r24, 0x0F	; 15
    354c:	89 2b       	or	r24, r25
    354e:	8c 93       	st	X, r24
    3550:	23 c0       	rjmp	.+70     	; 0x3598 <DIO_vSet4LSBValue+0xac>
	case PORTB: PORTB_REG = (PORTB_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    3552:	a8 e3       	ldi	r26, 0x38	; 56
    3554:	b0 e0       	ldi	r27, 0x00	; 0
    3556:	e8 e3       	ldi	r30, 0x38	; 56
    3558:	f0 e0       	ldi	r31, 0x00	; 0
    355a:	80 81       	ld	r24, Z
    355c:	98 2f       	mov	r25, r24
    355e:	90 7f       	andi	r25, 0xF0	; 240
    3560:	8a 81       	ldd	r24, Y+2	; 0x02
    3562:	8f 70       	andi	r24, 0x0F	; 15
    3564:	89 2b       	or	r24, r25
    3566:	8c 93       	st	X, r24
    3568:	17 c0       	rjmp	.+46     	; 0x3598 <DIO_vSet4LSBValue+0xac>
	case PORTC: PORTC_REG = (PORTC_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    356a:	a5 e3       	ldi	r26, 0x35	; 53
    356c:	b0 e0       	ldi	r27, 0x00	; 0
    356e:	e5 e3       	ldi	r30, 0x35	; 53
    3570:	f0 e0       	ldi	r31, 0x00	; 0
    3572:	80 81       	ld	r24, Z
    3574:	98 2f       	mov	r25, r24
    3576:	90 7f       	andi	r25, 0xF0	; 240
    3578:	8a 81       	ldd	r24, Y+2	; 0x02
    357a:	8f 70       	andi	r24, 0x0F	; 15
    357c:	89 2b       	or	r24, r25
    357e:	8c 93       	st	X, r24
    3580:	0b c0       	rjmp	.+22     	; 0x3598 <DIO_vSet4LSBValue+0xac>
	case PORTD: PORTD_REG = (PORTD_REG&0xF0) | (Copy_u8PinVal&0x0F); break;
    3582:	a2 e3       	ldi	r26, 0x32	; 50
    3584:	b0 e0       	ldi	r27, 0x00	; 0
    3586:	e2 e3       	ldi	r30, 0x32	; 50
    3588:	f0 e0       	ldi	r31, 0x00	; 0
    358a:	80 81       	ld	r24, Z
    358c:	98 2f       	mov	r25, r24
    358e:	90 7f       	andi	r25, 0xF0	; 240
    3590:	8a 81       	ldd	r24, Y+2	; 0x02
    3592:	8f 70       	andi	r24, 0x0F	; 15
    3594:	89 2b       	or	r24, r25
    3596:	8c 93       	st	X, r24
	}
}
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	0f 90       	pop	r0
    359e:	0f 90       	pop	r0
    35a0:	cf 91       	pop	r28
    35a2:	df 91       	pop	r29
    35a4:	08 95       	ret

000035a6 <DIO_vSet4MSBValue>:

//sets value of 4MSB pins of a port
void DIO_vSet4MSBValue(u8 Copy_u8PortName, u8 Copy_u8PinVal){
    35a6:	df 93       	push	r29
    35a8:	cf 93       	push	r28
    35aa:	00 d0       	rcall	.+0      	; 0x35ac <DIO_vSet4MSBValue+0x6>
    35ac:	00 d0       	rcall	.+0      	; 0x35ae <DIO_vSet4MSBValue+0x8>
    35ae:	cd b7       	in	r28, 0x3d	; 61
    35b0:	de b7       	in	r29, 0x3e	; 62
    35b2:	89 83       	std	Y+1, r24	; 0x01
    35b4:	6a 83       	std	Y+2, r22	; 0x02
	switch(Copy_u8PortName)
    35b6:	89 81       	ldd	r24, Y+1	; 0x01
    35b8:	28 2f       	mov	r18, r24
    35ba:	30 e0       	ldi	r19, 0x00	; 0
    35bc:	3c 83       	std	Y+4, r19	; 0x04
    35be:	2b 83       	std	Y+3, r18	; 0x03
    35c0:	8b 81       	ldd	r24, Y+3	; 0x03
    35c2:	9c 81       	ldd	r25, Y+4	; 0x04
    35c4:	81 30       	cpi	r24, 0x01	; 1
    35c6:	91 05       	cpc	r25, r1
    35c8:	09 f1       	breq	.+66     	; 0x360c <DIO_vSet4MSBValue+0x66>
    35ca:	2b 81       	ldd	r18, Y+3	; 0x03
    35cc:	3c 81       	ldd	r19, Y+4	; 0x04
    35ce:	22 30       	cpi	r18, 0x02	; 2
    35d0:	31 05       	cpc	r19, r1
    35d2:	2c f4       	brge	.+10     	; 0x35de <DIO_vSet4MSBValue+0x38>
    35d4:	8b 81       	ldd	r24, Y+3	; 0x03
    35d6:	9c 81       	ldd	r25, Y+4	; 0x04
    35d8:	00 97       	sbiw	r24, 0x00	; 0
    35da:	61 f0       	breq	.+24     	; 0x35f4 <DIO_vSet4MSBValue+0x4e>
    35dc:	3a c0       	rjmp	.+116    	; 0x3652 <DIO_vSet4MSBValue+0xac>
    35de:	2b 81       	ldd	r18, Y+3	; 0x03
    35e0:	3c 81       	ldd	r19, Y+4	; 0x04
    35e2:	22 30       	cpi	r18, 0x02	; 2
    35e4:	31 05       	cpc	r19, r1
    35e6:	f1 f0       	breq	.+60     	; 0x3624 <DIO_vSet4MSBValue+0x7e>
    35e8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ea:	9c 81       	ldd	r25, Y+4	; 0x04
    35ec:	83 30       	cpi	r24, 0x03	; 3
    35ee:	91 05       	cpc	r25, r1
    35f0:	29 f1       	breq	.+74     	; 0x363c <DIO_vSet4MSBValue+0x96>
    35f2:	2f c0       	rjmp	.+94     	; 0x3652 <DIO_vSet4MSBValue+0xac>
	{
	case PORTA: PORTA_REG = (PORTA_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    35f4:	ab e3       	ldi	r26, 0x3B	; 59
    35f6:	b0 e0       	ldi	r27, 0x00	; 0
    35f8:	eb e3       	ldi	r30, 0x3B	; 59
    35fa:	f0 e0       	ldi	r31, 0x00	; 0
    35fc:	80 81       	ld	r24, Z
    35fe:	98 2f       	mov	r25, r24
    3600:	9f 70       	andi	r25, 0x0F	; 15
    3602:	8a 81       	ldd	r24, Y+2	; 0x02
    3604:	80 7f       	andi	r24, 0xF0	; 240
    3606:	89 2b       	or	r24, r25
    3608:	8c 93       	st	X, r24
    360a:	23 c0       	rjmp	.+70     	; 0x3652 <DIO_vSet4MSBValue+0xac>
	case PORTB: PORTB_REG = (PORTB_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    360c:	a8 e3       	ldi	r26, 0x38	; 56
    360e:	b0 e0       	ldi	r27, 0x00	; 0
    3610:	e8 e3       	ldi	r30, 0x38	; 56
    3612:	f0 e0       	ldi	r31, 0x00	; 0
    3614:	80 81       	ld	r24, Z
    3616:	98 2f       	mov	r25, r24
    3618:	9f 70       	andi	r25, 0x0F	; 15
    361a:	8a 81       	ldd	r24, Y+2	; 0x02
    361c:	80 7f       	andi	r24, 0xF0	; 240
    361e:	89 2b       	or	r24, r25
    3620:	8c 93       	st	X, r24
    3622:	17 c0       	rjmp	.+46     	; 0x3652 <DIO_vSet4MSBValue+0xac>
	case PORTC: PORTC_REG = (PORTC_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    3624:	a5 e3       	ldi	r26, 0x35	; 53
    3626:	b0 e0       	ldi	r27, 0x00	; 0
    3628:	e5 e3       	ldi	r30, 0x35	; 53
    362a:	f0 e0       	ldi	r31, 0x00	; 0
    362c:	80 81       	ld	r24, Z
    362e:	98 2f       	mov	r25, r24
    3630:	9f 70       	andi	r25, 0x0F	; 15
    3632:	8a 81       	ldd	r24, Y+2	; 0x02
    3634:	80 7f       	andi	r24, 0xF0	; 240
    3636:	89 2b       	or	r24, r25
    3638:	8c 93       	st	X, r24
    363a:	0b c0       	rjmp	.+22     	; 0x3652 <DIO_vSet4MSBValue+0xac>
	case PORTD: PORTD_REG = (PORTD_REG&0x0F) | (Copy_u8PinVal&0xF0); break;
    363c:	a2 e3       	ldi	r26, 0x32	; 50
    363e:	b0 e0       	ldi	r27, 0x00	; 0
    3640:	e2 e3       	ldi	r30, 0x32	; 50
    3642:	f0 e0       	ldi	r31, 0x00	; 0
    3644:	80 81       	ld	r24, Z
    3646:	98 2f       	mov	r25, r24
    3648:	9f 70       	andi	r25, 0x0F	; 15
    364a:	8a 81       	ldd	r24, Y+2	; 0x02
    364c:	80 7f       	andi	r24, 0xF0	; 240
    364e:	89 2b       	or	r24, r25
    3650:	8c 93       	st	X, r24
	}
}
    3652:	0f 90       	pop	r0
    3654:	0f 90       	pop	r0
    3656:	0f 90       	pop	r0
    3658:	0f 90       	pop	r0
    365a:	cf 91       	pop	r28
    365c:	df 91       	pop	r29
    365e:	08 95       	ret

00003660 <SERVO_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "servo_interface.h"

void SERVO_vInit(const SERVO_PWM_cfg_t *Servo_PWM){
    3660:	df 93       	push	r29
    3662:	cf 93       	push	r28
    3664:	00 d0       	rcall	.+0      	; 0x3666 <SERVO_vInit+0x6>
    3666:	cd b7       	in	r28, 0x3d	; 61
    3668:	de b7       	in	r29, 0x3e	; 62
    366a:	9a 83       	std	Y+2, r25	; 0x02
    366c:	89 83       	std	Y+1, r24	; 0x01
	if(Servo_PWM != NULL){
    366e:	89 81       	ldd	r24, Y+1	; 0x01
    3670:	9a 81       	ldd	r25, Y+2	; 0x02
    3672:	00 97       	sbiw	r24, 0x00	; 0
    3674:	41 f1       	breq	.+80     	; 0x36c6 <SERVO_vInit+0x66>
		PWM_vInit(&(Servo_PWM->ServoPWM));
    3676:	89 81       	ldd	r24, Y+1	; 0x01
    3678:	9a 81       	ldd	r25, Y+2	; 0x02
    367a:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <PWM_vInit>
		if( (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_PhaseFreqICR) || (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_PhaseICR) || (Servo_PWM->ServoPWM.PWM_TimerChannel == TIMER1_FastICR) ){
    367e:	e9 81       	ldd	r30, Y+1	; 0x01
    3680:	fa 81       	ldd	r31, Y+2	; 0x02
    3682:	80 81       	ld	r24, Z
    3684:	88 30       	cpi	r24, 0x08	; 8
    3686:	51 f0       	breq	.+20     	; 0x369c <SERVO_vInit+0x3c>
    3688:	e9 81       	ldd	r30, Y+1	; 0x01
    368a:	fa 81       	ldd	r31, Y+2	; 0x02
    368c:	80 81       	ld	r24, Z
    368e:	8a 30       	cpi	r24, 0x0A	; 10
    3690:	29 f0       	breq	.+10     	; 0x369c <SERVO_vInit+0x3c>
    3692:	e9 81       	ldd	r30, Y+1	; 0x01
    3694:	fa 81       	ldd	r31, Y+2	; 0x02
    3696:	80 81       	ld	r24, Z
    3698:	8c 30       	cpi	r24, 0x0C	; 12
    369a:	49 f4       	brne	.+18     	; 0x36ae <SERVO_vInit+0x4e>
			PWM_vSetICR(&(Servo_PWM->ServoPWM), Servo_PWM->ICR_Value);
    369c:	89 81       	ldd	r24, Y+1	; 0x01
    369e:	9a 81       	ldd	r25, Y+2	; 0x02
    36a0:	e9 81       	ldd	r30, Y+1	; 0x01
    36a2:	fa 81       	ldd	r31, Y+2	; 0x02
    36a4:	25 81       	ldd	r18, Z+5	; 0x05
    36a6:	36 81       	ldd	r19, Z+6	; 0x06
    36a8:	b9 01       	movw	r22, r18
    36aa:	0e 94 7e 11 	call	0x22fc	; 0x22fc <PWM_vSetICR>
		}
		SERVO_vChangeDirection(Servo_PWM, Servo_PWM->ServoInitialDirection);
    36ae:	e9 81       	ldd	r30, Y+1	; 0x01
    36b0:	fa 81       	ldd	r31, Y+2	; 0x02
    36b2:	24 81       	ldd	r18, Z+4	; 0x04
    36b4:	89 81       	ldd	r24, Y+1	; 0x01
    36b6:	9a 81       	ldd	r25, Y+2	; 0x02
    36b8:	62 2f       	mov	r22, r18
    36ba:	0e 94 68 1b 	call	0x36d0	; 0x36d0 <SERVO_vChangeDirection>
		PWM_vStart(&(Servo_PWM->ServoPWM));
    36be:	89 81       	ldd	r24, Y+1	; 0x01
    36c0:	9a 81       	ldd	r25, Y+2	; 0x02
    36c2:	0e 94 e6 11 	call	0x23cc	; 0x23cc <PWM_vStart>
	}
}
    36c6:	0f 90       	pop	r0
    36c8:	0f 90       	pop	r0
    36ca:	cf 91       	pop	r28
    36cc:	df 91       	pop	r29
    36ce:	08 95       	ret

000036d0 <SERVO_vChangeDirection>:

void SERVO_vChangeDirection(const SERVO_PWM_cfg_t *Servo_PWM, enu_servoDirections Copy_enuDirection){
    36d0:	df 93       	push	r29
    36d2:	cf 93       	push	r28
    36d4:	00 d0       	rcall	.+0      	; 0x36d6 <SERVO_vChangeDirection+0x6>
    36d6:	00 d0       	rcall	.+0      	; 0x36d8 <SERVO_vChangeDirection+0x8>
    36d8:	0f 92       	push	r0
    36da:	cd b7       	in	r28, 0x3d	; 61
    36dc:	de b7       	in	r29, 0x3e	; 62
    36de:	9a 83       	std	Y+2, r25	; 0x02
    36e0:	89 83       	std	Y+1, r24	; 0x01
    36e2:	6b 83       	std	Y+3, r22	; 0x03
	switch(Copy_enuDirection){
    36e4:	8b 81       	ldd	r24, Y+3	; 0x03
    36e6:	28 2f       	mov	r18, r24
    36e8:	30 e0       	ldi	r19, 0x00	; 0
    36ea:	3d 83       	std	Y+5, r19	; 0x05
    36ec:	2c 83       	std	Y+4, r18	; 0x04
    36ee:	8c 81       	ldd	r24, Y+4	; 0x04
    36f0:	9d 81       	ldd	r25, Y+5	; 0x05
    36f2:	81 30       	cpi	r24, 0x01	; 1
    36f4:	91 05       	cpc	r25, r1
    36f6:	99 f0       	breq	.+38     	; 0x371e <SERVO_vChangeDirection+0x4e>
    36f8:	2c 81       	ldd	r18, Y+4	; 0x04
    36fa:	3d 81       	ldd	r19, Y+5	; 0x05
    36fc:	22 30       	cpi	r18, 0x02	; 2
    36fe:	31 05       	cpc	r19, r1
    3700:	c1 f0       	breq	.+48     	; 0x3732 <SERVO_vChangeDirection+0x62>
    3702:	8c 81       	ldd	r24, Y+4	; 0x04
    3704:	9d 81       	ldd	r25, Y+5	; 0x05
    3706:	00 97       	sbiw	r24, 0x00	; 0
    3708:	e9 f4       	brne	.+58     	; 0x3744 <SERVO_vChangeDirection+0x74>
	case SERVO_0:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_0degree_Value);
    370a:	89 81       	ldd	r24, Y+1	; 0x01
    370c:	9a 81       	ldd	r25, Y+2	; 0x02
    370e:	e9 81       	ldd	r30, Y+1	; 0x01
    3710:	fa 81       	ldd	r31, Y+2	; 0x02
    3712:	27 81       	ldd	r18, Z+7	; 0x07
    3714:	30 85       	ldd	r19, Z+8	; 0x08
    3716:	b9 01       	movw	r22, r18
    3718:	0e 94 a2 11 	call	0x2344	; 0x2344 <PWM_vSetOCR>
    371c:	13 c0       	rjmp	.+38     	; 0x3744 <SERVO_vChangeDirection+0x74>
		break;
	case SERVO_90:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_90degree_Value);
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	9a 81       	ldd	r25, Y+2	; 0x02
    3722:	e9 81       	ldd	r30, Y+1	; 0x01
    3724:	fa 81       	ldd	r31, Y+2	; 0x02
    3726:	21 85       	ldd	r18, Z+9	; 0x09
    3728:	32 85       	ldd	r19, Z+10	; 0x0a
    372a:	b9 01       	movw	r22, r18
    372c:	0e 94 a2 11 	call	0x2344	; 0x2344 <PWM_vSetOCR>
    3730:	09 c0       	rjmp	.+18     	; 0x3744 <SERVO_vChangeDirection+0x74>
		break;
	case SERVO_180:
		PWM_vSetOCR(&(Servo_PWM->ServoPWM), Servo_PWM->OCR_180degree_Value);
    3732:	89 81       	ldd	r24, Y+1	; 0x01
    3734:	9a 81       	ldd	r25, Y+2	; 0x02
    3736:	e9 81       	ldd	r30, Y+1	; 0x01
    3738:	fa 81       	ldd	r31, Y+2	; 0x02
    373a:	23 85       	ldd	r18, Z+11	; 0x0b
    373c:	34 85       	ldd	r19, Z+12	; 0x0c
    373e:	b9 01       	movw	r22, r18
    3740:	0e 94 a2 11 	call	0x2344	; 0x2344 <PWM_vSetOCR>
		break;
	default: /* Do Nothing */ break;
	}
}
    3744:	0f 90       	pop	r0
    3746:	0f 90       	pop	r0
    3748:	0f 90       	pop	r0
    374a:	0f 90       	pop	r0
    374c:	0f 90       	pop	r0
    374e:	cf 91       	pop	r28
    3750:	df 91       	pop	r29
    3752:	08 95       	ret

00003754 <SERVO_vStart>:

void SERVO_vStart(const SERVO_PWM_cfg_t *Servo_PWM){
    3754:	df 93       	push	r29
    3756:	cf 93       	push	r28
    3758:	00 d0       	rcall	.+0      	; 0x375a <SERVO_vStart+0x6>
    375a:	cd b7       	in	r28, 0x3d	; 61
    375c:	de b7       	in	r29, 0x3e	; 62
    375e:	9a 83       	std	Y+2, r25	; 0x02
    3760:	89 83       	std	Y+1, r24	; 0x01
	PWM_vStart(&(Servo_PWM->ServoPWM));
    3762:	89 81       	ldd	r24, Y+1	; 0x01
    3764:	9a 81       	ldd	r25, Y+2	; 0x02
    3766:	0e 94 e6 11 	call	0x23cc	; 0x23cc <PWM_vStart>
}
    376a:	0f 90       	pop	r0
    376c:	0f 90       	pop	r0
    376e:	cf 91       	pop	r28
    3770:	df 91       	pop	r29
    3772:	08 95       	ret

00003774 <SERVO_vStop>:

void SERVO_vStop(const SERVO_PWM_cfg_t *Servo_PWM){
    3774:	df 93       	push	r29
    3776:	cf 93       	push	r28
    3778:	00 d0       	rcall	.+0      	; 0x377a <SERVO_vStop+0x6>
    377a:	cd b7       	in	r28, 0x3d	; 61
    377c:	de b7       	in	r29, 0x3e	; 62
    377e:	9a 83       	std	Y+2, r25	; 0x02
    3780:	89 83       	std	Y+1, r24	; 0x01
	PWM_vStop(&(Servo_PWM->ServoPWM));
    3782:	89 81       	ldd	r24, Y+1	; 0x01
    3784:	9a 81       	ldd	r25, Y+2	; 0x02
    3786:	0e 94 98 13 	call	0x2730	; 0x2730 <PWM_vStop>
}
    378a:	0f 90       	pop	r0
    378c:	0f 90       	pop	r0
    378e:	cf 91       	pop	r28
    3790:	df 91       	pop	r29
    3792:	08 95       	ret

00003794 <PBD_vInit>:
/*************************************************************************/

#include "PBD_interface.h"

// This function is responsible for initializing a push button
Std_ReturnType PBD_vInit(const PB_cfg *PB){
    3794:	df 93       	push	r29
    3796:	cf 93       	push	r28
    3798:	00 d0       	rcall	.+0      	; 0x379a <PBD_vInit+0x6>
    379a:	0f 92       	push	r0
    379c:	cd b7       	in	r28, 0x3d	; 61
    379e:	de b7       	in	r29, 0x3e	; 62
    37a0:	9b 83       	std	Y+3, r25	; 0x03
    37a2:	8a 83       	std	Y+2, r24	; 0x02
	Std_ReturnType ret = E_NOT_OK;
    37a4:	19 82       	std	Y+1, r1	; 0x01
	if(PB != NULL){
    37a6:	8a 81       	ldd	r24, Y+2	; 0x02
    37a8:	9b 81       	ldd	r25, Y+3	; 0x03
    37aa:	00 97       	sbiw	r24, 0x00	; 0
    37ac:	b9 f1       	breq	.+110    	; 0x381c <PBD_vInit+0x88>

		if(PB->PBmode == MODE_PULLUP){
    37ae:	ea 81       	ldd	r30, Y+2	; 0x02
    37b0:	fb 81       	ldd	r31, Y+3	; 0x03
    37b2:	80 81       	ld	r24, Z
    37b4:	81 70       	andi	r24, 0x01	; 1
    37b6:	88 23       	and	r24, r24
    37b8:	a9 f4       	brne	.+42     	; 0x37e4 <PBD_vInit+0x50>
			DIO_vPinInit(PB->PortName, PB->PinNum, INPUT, HIGH);
    37ba:	ea 81       	ldd	r30, Y+2	; 0x02
    37bc:	fb 81       	ldd	r31, Y+3	; 0x03
    37be:	80 81       	ld	r24, Z
    37c0:	86 95       	lsr	r24
    37c2:	83 70       	andi	r24, 0x03	; 3
    37c4:	28 2f       	mov	r18, r24
    37c6:	ea 81       	ldd	r30, Y+2	; 0x02
    37c8:	fb 81       	ldd	r31, Y+3	; 0x03
    37ca:	80 81       	ld	r24, Z
    37cc:	86 95       	lsr	r24
    37ce:	86 95       	lsr	r24
    37d0:	86 95       	lsr	r24
    37d2:	87 70       	andi	r24, 0x07	; 7
    37d4:	98 2f       	mov	r25, r24
    37d6:	82 2f       	mov	r24, r18
    37d8:	69 2f       	mov	r22, r25
    37da:	40 e0       	ldi	r20, 0x00	; 0
    37dc:	21 e0       	ldi	r18, 0x01	; 1
    37de:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_vPinInit>
    37e2:	1a c0       	rjmp	.+52     	; 0x3818 <PBD_vInit+0x84>
		}
		else if(PB->PBmode == MODE_PULLDOWN){
    37e4:	ea 81       	ldd	r30, Y+2	; 0x02
    37e6:	fb 81       	ldd	r31, Y+3	; 0x03
    37e8:	80 81       	ld	r24, Z
    37ea:	81 70       	andi	r24, 0x01	; 1
    37ec:	88 23       	and	r24, r24
    37ee:	a1 f0       	breq	.+40     	; 0x3818 <PBD_vInit+0x84>
			DIO_vPinInit(PB->PortName, PB->PinNum, INPUT, LOW);
    37f0:	ea 81       	ldd	r30, Y+2	; 0x02
    37f2:	fb 81       	ldd	r31, Y+3	; 0x03
    37f4:	80 81       	ld	r24, Z
    37f6:	86 95       	lsr	r24
    37f8:	83 70       	andi	r24, 0x03	; 3
    37fa:	28 2f       	mov	r18, r24
    37fc:	ea 81       	ldd	r30, Y+2	; 0x02
    37fe:	fb 81       	ldd	r31, Y+3	; 0x03
    3800:	80 81       	ld	r24, Z
    3802:	86 95       	lsr	r24
    3804:	86 95       	lsr	r24
    3806:	86 95       	lsr	r24
    3808:	87 70       	andi	r24, 0x07	; 7
    380a:	98 2f       	mov	r25, r24
    380c:	82 2f       	mov	r24, r18
    380e:	69 2f       	mov	r22, r25
    3810:	40 e0       	ldi	r20, 0x00	; 0
    3812:	20 e0       	ldi	r18, 0x00	; 0
    3814:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_vPinInit>
		}
		ret = E_OK;
    3818:	81 e0       	ldi	r24, 0x01	; 1
    381a:	89 83       	std	Y+1, r24	; 0x01
	}
	return ret;
    381c:	89 81       	ldd	r24, Y+1	; 0x01
}
    381e:	0f 90       	pop	r0
    3820:	0f 90       	pop	r0
    3822:	0f 90       	pop	r0
    3824:	cf 91       	pop	r28
    3826:	df 91       	pop	r29
    3828:	08 95       	ret

0000382a <PBD_vGetButtonState>:

// This function is responsible for getting button state
Std_ReturnType PBD_vGetButtonState(const PB_cfg *PB, u8 *Copy_u8State){
    382a:	df 93       	push	r29
    382c:	cf 93       	push	r28
    382e:	cd b7       	in	r28, 0x3d	; 61
    3830:	de b7       	in	r29, 0x3e	; 62
    3832:	28 97       	sbiw	r28, 0x08	; 8
    3834:	0f b6       	in	r0, 0x3f	; 63
    3836:	f8 94       	cli
    3838:	de bf       	out	0x3e, r29	; 62
    383a:	0f be       	out	0x3f, r0	; 63
    383c:	cd bf       	out	0x3d, r28	; 61
    383e:	9c 83       	std	Y+4, r25	; 0x04
    3840:	8b 83       	std	Y+3, r24	; 0x03
    3842:	7e 83       	std	Y+6, r23	; 0x06
    3844:	6d 83       	std	Y+5, r22	; 0x05
	Std_ReturnType ret = E_NOT_OK;
    3846:	1a 82       	std	Y+2, r1	; 0x02
	u8 LOCAL_Button_State;
	if(PB != NULL){
    3848:	8b 81       	ldd	r24, Y+3	; 0x03
    384a:	9c 81       	ldd	r25, Y+4	; 0x04
    384c:	00 97       	sbiw	r24, 0x00	; 0
    384e:	09 f4       	brne	.+2      	; 0x3852 <PBD_vGetButtonState+0x28>
    3850:	44 c0       	rjmp	.+136    	; 0x38da <PBD_vGetButtonState+0xb0>
		LOCAL_Button_State = DIO_u8ReadPinValue(PB->PortName, PB->PinNum);
    3852:	eb 81       	ldd	r30, Y+3	; 0x03
    3854:	fc 81       	ldd	r31, Y+4	; 0x04
    3856:	80 81       	ld	r24, Z
    3858:	86 95       	lsr	r24
    385a:	83 70       	andi	r24, 0x03	; 3
    385c:	28 2f       	mov	r18, r24
    385e:	eb 81       	ldd	r30, Y+3	; 0x03
    3860:	fc 81       	ldd	r31, Y+4	; 0x04
    3862:	80 81       	ld	r24, Z
    3864:	86 95       	lsr	r24
    3866:	86 95       	lsr	r24
    3868:	86 95       	lsr	r24
    386a:	87 70       	andi	r24, 0x07	; 7
    386c:	98 2f       	mov	r25, r24
    386e:	82 2f       	mov	r24, r18
    3870:	69 2f       	mov	r22, r25
    3872:	0e 94 43 17 	call	0x2e86	; 0x2e86 <DIO_u8ReadPinValue>
    3876:	89 83       	std	Y+1, r24	; 0x01
		switch(PB->PBmode){
    3878:	eb 81       	ldd	r30, Y+3	; 0x03
    387a:	fc 81       	ldd	r31, Y+4	; 0x04
    387c:	80 81       	ld	r24, Z
    387e:	81 70       	andi	r24, 0x01	; 1
    3880:	28 2f       	mov	r18, r24
    3882:	30 e0       	ldi	r19, 0x00	; 0
    3884:	38 87       	std	Y+8, r19	; 0x08
    3886:	2f 83       	std	Y+7, r18	; 0x07
    3888:	8f 81       	ldd	r24, Y+7	; 0x07
    388a:	98 85       	ldd	r25, Y+8	; 0x08
    388c:	00 97       	sbiw	r24, 0x00	; 0
    388e:	31 f0       	breq	.+12     	; 0x389c <PBD_vGetButtonState+0x72>
    3890:	2f 81       	ldd	r18, Y+7	; 0x07
    3892:	38 85       	ldd	r19, Y+8	; 0x08
    3894:	21 30       	cpi	r18, 0x01	; 1
    3896:	31 05       	cpc	r19, r1
    3898:	81 f0       	breq	.+32     	; 0x38ba <PBD_vGetButtonState+0x90>
    389a:	1d c0       	rjmp	.+58     	; 0x38d6 <PBD_vGetButtonState+0xac>
		case MODE_PULLUP:
			if(LOCAL_Button_State == 0)		{ *Copy_u8State = BUTTON_PRESSED;  }
    389c:	89 81       	ldd	r24, Y+1	; 0x01
    389e:	88 23       	and	r24, r24
    38a0:	21 f4       	brne	.+8      	; 0x38aa <PBD_vGetButtonState+0x80>
    38a2:	ed 81       	ldd	r30, Y+5	; 0x05
    38a4:	fe 81       	ldd	r31, Y+6	; 0x06
    38a6:	10 82       	st	Z, r1
    38a8:	16 c0       	rjmp	.+44     	; 0x38d6 <PBD_vGetButtonState+0xac>
			else if(LOCAL_Button_State == 1){ *Copy_u8State = BUTTON_RELEASED; }
    38aa:	89 81       	ldd	r24, Y+1	; 0x01
    38ac:	81 30       	cpi	r24, 0x01	; 1
    38ae:	99 f4       	brne	.+38     	; 0x38d6 <PBD_vGetButtonState+0xac>
    38b0:	ed 81       	ldd	r30, Y+5	; 0x05
    38b2:	fe 81       	ldd	r31, Y+6	; 0x06
    38b4:	81 e0       	ldi	r24, 0x01	; 1
    38b6:	80 83       	st	Z, r24
    38b8:	0e c0       	rjmp	.+28     	; 0x38d6 <PBD_vGetButtonState+0xac>
			else{ /* Do Nothing */ }		  break;
		case MODE_PULLDOWN:
			if(LOCAL_Button_State == 0)		{ *Copy_u8State = BUTTON_RELEASED; }
    38ba:	89 81       	ldd	r24, Y+1	; 0x01
    38bc:	88 23       	and	r24, r24
    38be:	29 f4       	brne	.+10     	; 0x38ca <PBD_vGetButtonState+0xa0>
    38c0:	ed 81       	ldd	r30, Y+5	; 0x05
    38c2:	fe 81       	ldd	r31, Y+6	; 0x06
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	80 83       	st	Z, r24
    38c8:	06 c0       	rjmp	.+12     	; 0x38d6 <PBD_vGetButtonState+0xac>
			else if(LOCAL_Button_State == 1){ *Copy_u8State = BUTTON_PRESSED;  }
    38ca:	89 81       	ldd	r24, Y+1	; 0x01
    38cc:	81 30       	cpi	r24, 0x01	; 1
    38ce:	19 f4       	brne	.+6      	; 0x38d6 <PBD_vGetButtonState+0xac>
    38d0:	ed 81       	ldd	r30, Y+5	; 0x05
    38d2:	fe 81       	ldd	r31, Y+6	; 0x06
    38d4:	10 82       	st	Z, r1
			else{ /* Do Nothing */ }		  break;
		default: /* Do Nothing */ break;
		}
		ret = E_OK;
    38d6:	81 e0       	ldi	r24, 0x01	; 1
    38d8:	8a 83       	std	Y+2, r24	; 0x02
	}
	return ret;
    38da:	8a 81       	ldd	r24, Y+2	; 0x02
}
    38dc:	28 96       	adiw	r28, 0x08	; 8
    38de:	0f b6       	in	r0, 0x3f	; 63
    38e0:	f8 94       	cli
    38e2:	de bf       	out	0x3e, r29	; 62
    38e4:	0f be       	out	0x3f, r0	; 63
    38e6:	cd bf       	out	0x3d, r28	; 61
    38e8:	cf 91       	pop	r28
    38ea:	df 91       	pop	r29
    38ec:	08 95       	ret

000038ee <LED_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "led_interface.h"

void LED_vInit(const LED_cfg *LED){
    38ee:	df 93       	push	r29
    38f0:	cf 93       	push	r28
    38f2:	00 d0       	rcall	.+0      	; 0x38f4 <LED_vInit+0x6>
    38f4:	cd b7       	in	r28, 0x3d	; 61
    38f6:	de b7       	in	r29, 0x3e	; 62
    38f8:	9a 83       	std	Y+2, r25	; 0x02
    38fa:	89 83       	std	Y+1, r24	; 0x01
	if(LED != NULL){
    38fc:	89 81       	ldd	r24, Y+1	; 0x01
    38fe:	9a 81       	ldd	r25, Y+2	; 0x02
    3900:	00 97       	sbiw	r24, 0x00	; 0
    3902:	a9 f1       	breq	.+106    	; 0x396e <LED_vInit+0x80>
		if(LED->InitialStatus == InitiallyOn){
    3904:	e9 81       	ldd	r30, Y+1	; 0x01
    3906:	fa 81       	ldd	r31, Y+2	; 0x02
    3908:	80 81       	ld	r24, Z
    390a:	81 70       	andi	r24, 0x01	; 1
    390c:	88 23       	and	r24, r24
    390e:	a9 f0       	breq	.+42     	; 0x393a <LED_vInit+0x4c>
			DIO_vPinInit(LED->PortName, LED->PinNum, OUTPUT, HIGH);
    3910:	e9 81       	ldd	r30, Y+1	; 0x01
    3912:	fa 81       	ldd	r31, Y+2	; 0x02
    3914:	80 81       	ld	r24, Z
    3916:	86 95       	lsr	r24
    3918:	83 70       	andi	r24, 0x03	; 3
    391a:	28 2f       	mov	r18, r24
    391c:	e9 81       	ldd	r30, Y+1	; 0x01
    391e:	fa 81       	ldd	r31, Y+2	; 0x02
    3920:	80 81       	ld	r24, Z
    3922:	86 95       	lsr	r24
    3924:	86 95       	lsr	r24
    3926:	86 95       	lsr	r24
    3928:	87 70       	andi	r24, 0x07	; 7
    392a:	98 2f       	mov	r25, r24
    392c:	82 2f       	mov	r24, r18
    392e:	69 2f       	mov	r22, r25
    3930:	41 e0       	ldi	r20, 0x01	; 1
    3932:	21 e0       	ldi	r18, 0x01	; 1
    3934:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_vPinInit>
    3938:	1a c0       	rjmp	.+52     	; 0x396e <LED_vInit+0x80>
		}
		else if(LED->InitialStatus == InitiallyOff){
    393a:	e9 81       	ldd	r30, Y+1	; 0x01
    393c:	fa 81       	ldd	r31, Y+2	; 0x02
    393e:	80 81       	ld	r24, Z
    3940:	81 70       	andi	r24, 0x01	; 1
    3942:	88 23       	and	r24, r24
    3944:	a1 f4       	brne	.+40     	; 0x396e <LED_vInit+0x80>
			DIO_vPinInit(LED->PortName, LED->PinNum, OUTPUT, LOW);
    3946:	e9 81       	ldd	r30, Y+1	; 0x01
    3948:	fa 81       	ldd	r31, Y+2	; 0x02
    394a:	80 81       	ld	r24, Z
    394c:	86 95       	lsr	r24
    394e:	83 70       	andi	r24, 0x03	; 3
    3950:	28 2f       	mov	r18, r24
    3952:	e9 81       	ldd	r30, Y+1	; 0x01
    3954:	fa 81       	ldd	r31, Y+2	; 0x02
    3956:	80 81       	ld	r24, Z
    3958:	86 95       	lsr	r24
    395a:	86 95       	lsr	r24
    395c:	86 95       	lsr	r24
    395e:	87 70       	andi	r24, 0x07	; 7
    3960:	98 2f       	mov	r25, r24
    3962:	82 2f       	mov	r24, r18
    3964:	69 2f       	mov	r22, r25
    3966:	41 e0       	ldi	r20, 0x01	; 1
    3968:	20 e0       	ldi	r18, 0x00	; 0
    396a:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_vPinInit>
		}
		else{ /* Do Nothing */ }
	}
	else{ /* Do Nothing */ }
}
    396e:	0f 90       	pop	r0
    3970:	0f 90       	pop	r0
    3972:	cf 91       	pop	r28
    3974:	df 91       	pop	r29
    3976:	08 95       	ret

00003978 <LED_vTurnOn>:

void LED_vTurnOn(const LED_cfg *LED){
    3978:	df 93       	push	r29
    397a:	cf 93       	push	r28
    397c:	00 d0       	rcall	.+0      	; 0x397e <LED_vTurnOn+0x6>
    397e:	cd b7       	in	r28, 0x3d	; 61
    3980:	de b7       	in	r29, 0x3e	; 62
    3982:	9a 83       	std	Y+2, r25	; 0x02
    3984:	89 83       	std	Y+1, r24	; 0x01
	if(LED != NULL){
    3986:	89 81       	ldd	r24, Y+1	; 0x01
    3988:	9a 81       	ldd	r25, Y+2	; 0x02
    398a:	00 97       	sbiw	r24, 0x00	; 0
    398c:	a1 f0       	breq	.+40     	; 0x39b6 <LED_vTurnOn+0x3e>
		DIO_vPinInit(LED->PortName, LED->PinNum, OUTPUT, HIGH);
    398e:	e9 81       	ldd	r30, Y+1	; 0x01
    3990:	fa 81       	ldd	r31, Y+2	; 0x02
    3992:	80 81       	ld	r24, Z
    3994:	86 95       	lsr	r24
    3996:	83 70       	andi	r24, 0x03	; 3
    3998:	28 2f       	mov	r18, r24
    399a:	e9 81       	ldd	r30, Y+1	; 0x01
    399c:	fa 81       	ldd	r31, Y+2	; 0x02
    399e:	80 81       	ld	r24, Z
    39a0:	86 95       	lsr	r24
    39a2:	86 95       	lsr	r24
    39a4:	86 95       	lsr	r24
    39a6:	87 70       	andi	r24, 0x07	; 7
    39a8:	98 2f       	mov	r25, r24
    39aa:	82 2f       	mov	r24, r18
    39ac:	69 2f       	mov	r22, r25
    39ae:	41 e0       	ldi	r20, 0x01	; 1
    39b0:	21 e0       	ldi	r18, 0x01	; 1
    39b2:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_vPinInit>
	}
	else{ /* Do Nothing */ }
}
    39b6:	0f 90       	pop	r0
    39b8:	0f 90       	pop	r0
    39ba:	cf 91       	pop	r28
    39bc:	df 91       	pop	r29
    39be:	08 95       	ret

000039c0 <LED_vTurnOff>:

void LED_vTurnOff(const LED_cfg *LED){
    39c0:	df 93       	push	r29
    39c2:	cf 93       	push	r28
    39c4:	00 d0       	rcall	.+0      	; 0x39c6 <LED_vTurnOff+0x6>
    39c6:	cd b7       	in	r28, 0x3d	; 61
    39c8:	de b7       	in	r29, 0x3e	; 62
    39ca:	9a 83       	std	Y+2, r25	; 0x02
    39cc:	89 83       	std	Y+1, r24	; 0x01
	if(LED != NULL){
    39ce:	89 81       	ldd	r24, Y+1	; 0x01
    39d0:	9a 81       	ldd	r25, Y+2	; 0x02
    39d2:	00 97       	sbiw	r24, 0x00	; 0
    39d4:	a1 f0       	breq	.+40     	; 0x39fe <LED_vTurnOff+0x3e>
		DIO_vPinInit(LED->PortName, LED->PinNum, OUTPUT, LOW);
    39d6:	e9 81       	ldd	r30, Y+1	; 0x01
    39d8:	fa 81       	ldd	r31, Y+2	; 0x02
    39da:	80 81       	ld	r24, Z
    39dc:	86 95       	lsr	r24
    39de:	83 70       	andi	r24, 0x03	; 3
    39e0:	28 2f       	mov	r18, r24
    39e2:	e9 81       	ldd	r30, Y+1	; 0x01
    39e4:	fa 81       	ldd	r31, Y+2	; 0x02
    39e6:	80 81       	ld	r24, Z
    39e8:	86 95       	lsr	r24
    39ea:	86 95       	lsr	r24
    39ec:	86 95       	lsr	r24
    39ee:	87 70       	andi	r24, 0x07	; 7
    39f0:	98 2f       	mov	r25, r24
    39f2:	82 2f       	mov	r24, r18
    39f4:	69 2f       	mov	r22, r25
    39f6:	41 e0       	ldi	r20, 0x01	; 1
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	0e 94 28 15 	call	0x2a50	; 0x2a50 <DIO_vPinInit>
	}
	else{ /* Do Nothing */ }
}
    39fe:	0f 90       	pop	r0
    3a00:	0f 90       	pop	r0
    3a02:	cf 91       	pop	r28
    3a04:	df 91       	pop	r29
    3a06:	08 95       	ret

00003a08 <LED_vToggle>:

void LED_vToggle(const LED_cfg *LED){
    3a08:	df 93       	push	r29
    3a0a:	cf 93       	push	r28
    3a0c:	00 d0       	rcall	.+0      	; 0x3a0e <LED_vToggle+0x6>
    3a0e:	cd b7       	in	r28, 0x3d	; 61
    3a10:	de b7       	in	r29, 0x3e	; 62
    3a12:	9a 83       	std	Y+2, r25	; 0x02
    3a14:	89 83       	std	Y+1, r24	; 0x01
	if(LED != NULL){
    3a16:	89 81       	ldd	r24, Y+1	; 0x01
    3a18:	9a 81       	ldd	r25, Y+2	; 0x02
    3a1a:	00 97       	sbiw	r24, 0x00	; 0
    3a1c:	91 f0       	breq	.+36     	; 0x3a42 <LED_vToggle+0x3a>
		DIO_vTogglePinValue(LED->PortName, LED->PinNum);
    3a1e:	e9 81       	ldd	r30, Y+1	; 0x01
    3a20:	fa 81       	ldd	r31, Y+2	; 0x02
    3a22:	80 81       	ld	r24, Z
    3a24:	86 95       	lsr	r24
    3a26:	83 70       	andi	r24, 0x03	; 3
    3a28:	28 2f       	mov	r18, r24
    3a2a:	e9 81       	ldd	r30, Y+1	; 0x01
    3a2c:	fa 81       	ldd	r31, Y+2	; 0x02
    3a2e:	80 81       	ld	r24, Z
    3a30:	86 95       	lsr	r24
    3a32:	86 95       	lsr	r24
    3a34:	86 95       	lsr	r24
    3a36:	87 70       	andi	r24, 0x07	; 7
    3a38:	98 2f       	mov	r25, r24
    3a3a:	82 2f       	mov	r24, r18
    3a3c:	69 2f       	mov	r22, r25
    3a3e:	0e 94 bd 17 	call	0x2f7a	; 0x2f7a <DIO_vTogglePinValue>
	}
	else{ /* Do Nothing */ }
}
    3a42:	0f 90       	pop	r0
    3a44:	0f 90       	pop	r0
    3a46:	cf 91       	pop	r28
    3a48:	df 91       	pop	r29
    3a4a:	08 95       	ret

00003a4c <EEPROM_vinit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "EEPROM_interface.h"

void EEPROM_vinit(void){
    3a4c:	df 93       	push	r29
    3a4e:	cf 93       	push	r28
    3a50:	cd b7       	in	r28, 0x3d	; 61
    3a52:	de b7       	in	r29, 0x3e	; 62
	TWI_vInit();
    3a54:	0e 94 99 07 	call	0xf32	; 0xf32 <TWI_vInit>
}
    3a58:	cf 91       	pop	r28
    3a5a:	df 91       	pop	r29
    3a5c:	08 95       	ret

00003a5e <EEPROM_u8WriteByte>:
u8 EEPROM_u8WriteByte(u8 Copy_u8Address, u8 Copy_u8Data, enu_EEPROM_Blocks Copy_enuBlock){
    3a5e:	df 93       	push	r29
    3a60:	cf 93       	push	r28
    3a62:	00 d0       	rcall	.+0      	; 0x3a64 <EEPROM_u8WriteByte+0x6>
    3a64:	00 d0       	rcall	.+0      	; 0x3a66 <EEPROM_u8WriteByte+0x8>
    3a66:	cd b7       	in	r28, 0x3d	; 61
    3a68:	de b7       	in	r29, 0x3e	; 62
    3a6a:	89 83       	std	Y+1, r24	; 0x01
    3a6c:	6a 83       	std	Y+2, r22	; 0x02
    3a6e:	4b 83       	std	Y+3, r20	; 0x03
	TWI_vStart();
    3a70:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_vStart>
	if(TWI_u8GetStatus() != TW_START){
    3a74:	0e 94 32 08 	call	0x1064	; 0x1064 <TWI_u8GetStatus>
    3a78:	88 30       	cpi	r24, 0x08	; 8
    3a7a:	11 f0       	breq	.+4      	; 0x3a80 <EEPROM_u8WriteByte+0x22>
		return 0;
    3a7c:	1c 82       	std	Y+4, r1	; 0x04
    3a7e:	22 c0       	rjmp	.+68     	; 0x3ac4 <EEPROM_u8WriteByte+0x66>
	}
	/* Send the device address, we need to get A8 A9 A10 address bits from
	 * memory location address and R/W=0 (write) */
	//TWI_vWriteData( ((EEPROM_Address | EEPROM_EN_CFG | Copy_enuBlock) & 0xFE) );
	TWI_vWriteData( 0xA2 );
    3a80:	82 ea       	ldi	r24, 0xA2	; 162
    3a82:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_SLA_W_ACK){
    3a86:	0e 94 32 08 	call	0x1064	; 0x1064 <TWI_u8GetStatus>
    3a8a:	88 31       	cpi	r24, 0x18	; 24
    3a8c:	19 f0       	breq	.+6      	; 0x3a94 <EEPROM_u8WriteByte+0x36>
		return 1;
    3a8e:	81 e0       	ldi	r24, 0x01	; 1
    3a90:	8c 83       	std	Y+4, r24	; 0x04
    3a92:	18 c0       	rjmp	.+48     	; 0x3ac4 <EEPROM_u8WriteByte+0x66>
	}
	/* Send the required memory location address */
	TWI_vWriteData(Copy_u8Address);
    3a94:	89 81       	ldd	r24, Y+1	; 0x01
    3a96:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_DATA_ACK){
    3a9a:	0e 94 32 08 	call	0x1064	; 0x1064 <TWI_u8GetStatus>
    3a9e:	88 32       	cpi	r24, 0x28	; 40
    3aa0:	19 f0       	breq	.+6      	; 0x3aa8 <EEPROM_u8WriteByte+0x4a>
		return 2;
    3aa2:	82 e0       	ldi	r24, 0x02	; 2
    3aa4:	8c 83       	std	Y+4, r24	; 0x04
    3aa6:	0e c0       	rjmp	.+28     	; 0x3ac4 <EEPROM_u8WriteByte+0x66>
	}

	/* Write byte to eeprom */
	TWI_vWriteData(Copy_u8Data);
    3aa8:	8a 81       	ldd	r24, Y+2	; 0x02
    3aaa:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_DATA_ACK){
    3aae:	0e 94 32 08 	call	0x1064	; 0x1064 <TWI_u8GetStatus>
    3ab2:	88 32       	cpi	r24, 0x28	; 40
    3ab4:	19 f0       	breq	.+6      	; 0x3abc <EEPROM_u8WriteByte+0x5e>
		return 3;
    3ab6:	83 e0       	ldi	r24, 0x03	; 3
    3ab8:	8c 83       	std	Y+4, r24	; 0x04
    3aba:	04 c0       	rjmp	.+8      	; 0x3ac4 <EEPROM_u8WriteByte+0x66>
	}
	TWI_vStop();
    3abc:	0e 94 cb 07 	call	0xf96	; 0xf96 <TWI_vStop>
	return 4;
    3ac0:	84 e0       	ldi	r24, 0x04	; 4
    3ac2:	8c 83       	std	Y+4, r24	; 0x04
    3ac4:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3ac6:	0f 90       	pop	r0
    3ac8:	0f 90       	pop	r0
    3aca:	0f 90       	pop	r0
    3acc:	0f 90       	pop	r0
    3ace:	cf 91       	pop	r28
    3ad0:	df 91       	pop	r29
    3ad2:	08 95       	ret

00003ad4 <EEPROM_u8ReadByte>:

u8 EEPROM_u8ReadByte(u8 Copy_u8Address, u8 *Copy_u8Data, enu_EEPROM_Blocks Copy_enuBlock){
    3ad4:	df 93       	push	r29
    3ad6:	cf 93       	push	r28
    3ad8:	00 d0       	rcall	.+0      	; 0x3ada <EEPROM_u8ReadByte+0x6>
    3ada:	00 d0       	rcall	.+0      	; 0x3adc <EEPROM_u8ReadByte+0x8>
    3adc:	0f 92       	push	r0
    3ade:	cd b7       	in	r28, 0x3d	; 61
    3ae0:	de b7       	in	r29, 0x3e	; 62
    3ae2:	89 83       	std	Y+1, r24	; 0x01
    3ae4:	7b 83       	std	Y+3, r23	; 0x03
    3ae6:	6a 83       	std	Y+2, r22	; 0x02
    3ae8:	4c 83       	std	Y+4, r20	; 0x04
	TWI_vStart();
    3aea:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_vStart>
	if(TWI_u8GetStatus() != TW_START){
    3aee:	0e 94 32 08 	call	0x1064	; 0x1064 <TWI_u8GetStatus>
    3af2:	88 30       	cpi	r24, 0x08	; 8
    3af4:	11 f0       	breq	.+4      	; 0x3afa <EEPROM_u8ReadByte+0x26>
		return 0;
    3af6:	1d 82       	std	Y+5, r1	; 0x05
    3af8:	30 c0       	rjmp	.+96     	; 0x3b5a <EEPROM_u8ReadByte+0x86>
	}
	/* Send the device address, we need to get A8 A9 A10 address bits from
	 * memory location address and R/W=0 (write) */
	//TWI_vWriteData( (EEPROM_Address | EEPROM_EN_CFG | Copy_enuBlock) & 0xFE );
	TWI_vWriteData( 0xA2 );
    3afa:	82 ea       	ldi	r24, 0xA2	; 162
    3afc:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_SLA_W_ACK){
    3b00:	0e 94 32 08 	call	0x1064	; 0x1064 <TWI_u8GetStatus>
    3b04:	88 31       	cpi	r24, 0x18	; 24
    3b06:	19 f0       	breq	.+6      	; 0x3b0e <EEPROM_u8ReadByte+0x3a>
		return 1;
    3b08:	81 e0       	ldi	r24, 0x01	; 1
    3b0a:	8d 83       	std	Y+5, r24	; 0x05
    3b0c:	26 c0       	rjmp	.+76     	; 0x3b5a <EEPROM_u8ReadByte+0x86>
	}
	/* Send the required memory location address */
	TWI_vWriteData(Copy_u8Address);
    3b0e:	89 81       	ldd	r24, Y+1	; 0x01
    3b10:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_DATA_ACK){
    3b14:	0e 94 32 08 	call	0x1064	; 0x1064 <TWI_u8GetStatus>
    3b18:	88 32       	cpi	r24, 0x28	; 40
    3b1a:	19 f0       	breq	.+6      	; 0x3b22 <EEPROM_u8ReadByte+0x4e>
		return 2;
    3b1c:	82 e0       	ldi	r24, 0x02	; 2
    3b1e:	8d 83       	std	Y+5, r24	; 0x05
    3b20:	1c c0       	rjmp	.+56     	; 0x3b5a <EEPROM_u8ReadByte+0x86>
	}
	TWI_vStart();
    3b22:	0e 94 bb 07 	call	0xf76	; 0xf76 <TWI_vStart>
	if(TWI_u8GetStatus() != TW_REP_START){
    3b26:	0e 94 32 08 	call	0x1064	; 0x1064 <TWI_u8GetStatus>
    3b2a:	80 31       	cpi	r24, 0x10	; 16
    3b2c:	19 f0       	breq	.+6      	; 0x3b34 <EEPROM_u8ReadByte+0x60>
		return 3;
    3b2e:	83 e0       	ldi	r24, 0x03	; 3
    3b30:	8d 83       	std	Y+5, r24	; 0x05
    3b32:	13 c0       	rjmp	.+38     	; 0x3b5a <EEPROM_u8ReadByte+0x86>
	}
	//TWI_vWriteData( EEPROM_Address | EEPROM_EN_CFG | Copy_enuBlock | 1 );
	TWI_vWriteData( 0xA3 );
    3b34:	83 ea       	ldi	r24, 0xA3	; 163
    3b36:	0e 94 d6 07 	call	0xfac	; 0xfac <TWI_vWriteData>
	if(TWI_u8GetStatus() != TW_MT_SLA_R_ACK){
    3b3a:	0e 94 32 08 	call	0x1064	; 0x1064 <TWI_u8GetStatus>
    3b3e:	80 34       	cpi	r24, 0x40	; 64
    3b40:	19 f0       	breq	.+6      	; 0x3b48 <EEPROM_u8ReadByte+0x74>
		return 4;
    3b42:	84 e0       	ldi	r24, 0x04	; 4
    3b44:	8d 83       	std	Y+5, r24	; 0x05
    3b46:	09 c0       	rjmp	.+18     	; 0x3b5a <EEPROM_u8ReadByte+0x86>
	}
	*Copy_u8Data = TWI_u8ReadWithNoAck();
    3b48:	0e 94 13 08 	call	0x1026	; 0x1026 <TWI_u8ReadWithNoAck>
    3b4c:	ea 81       	ldd	r30, Y+2	; 0x02
    3b4e:	fb 81       	ldd	r31, Y+3	; 0x03
    3b50:	80 83       	st	Z, r24
	TWI_vStop();
    3b52:	0e 94 cb 07 	call	0xf96	; 0xf96 <TWI_vStop>
	return 5;
    3b56:	85 e0       	ldi	r24, 0x05	; 5
    3b58:	8d 83       	std	Y+5, r24	; 0x05
    3b5a:	8d 81       	ldd	r24, Y+5	; 0x05
}
    3b5c:	0f 90       	pop	r0
    3b5e:	0f 90       	pop	r0
    3b60:	0f 90       	pop	r0
    3b62:	0f 90       	pop	r0
    3b64:	0f 90       	pop	r0
    3b66:	cf 91       	pop	r28
    3b68:	df 91       	pop	r29
    3b6a:	08 95       	ret

00003b6c <BUZZER_vInit>:
/* GitHub        : https://github.com/Piistachyoo             		     */
/*************************************************************************/

#include "buzzer_interface.h"

void BUZZER_vInit(const buzzer_cfg *PTR_BUZZER){
    3b6c:	df 93       	push	r29
    3b6e:	cf 93       	push	r28
    3b70:	00 d0       	rcall	.+0      	; 0x3b72 <BUZZER_vInit+0x6>
    3b72:	cd b7       	in	r28, 0x3d	; 61
    3b74:	de b7       	in	r29, 0x3e	; 62
    3b76:	9a 83       	std	Y+2, r25	; 0x02
    3b78:	89 83       	std	Y+1, r24	; 0x01
	DIO_vSetPinDir(PTR_BUZZER->buzzer_port, PTR_BUZZER->buzzer_pin, OUTPUT);
    3b7a:	e9 81       	ldd	r30, Y+1	; 0x01
    3b7c:	fa 81       	ldd	r31, Y+2	; 0x02
    3b7e:	80 81       	ld	r24, Z
    3b80:	83 70       	andi	r24, 0x03	; 3
    3b82:	28 2f       	mov	r18, r24
    3b84:	e9 81       	ldd	r30, Y+1	; 0x01
    3b86:	fa 81       	ldd	r31, Y+2	; 0x02
    3b88:	80 81       	ld	r24, Z
    3b8a:	86 95       	lsr	r24
    3b8c:	86 95       	lsr	r24
    3b8e:	87 70       	andi	r24, 0x07	; 7
    3b90:	98 2f       	mov	r25, r24
    3b92:	82 2f       	mov	r24, r18
    3b94:	69 2f       	mov	r22, r25
    3b96:	41 e0       	ldi	r20, 0x01	; 1
    3b98:	0e 94 43 15 	call	0x2a86	; 0x2a86 <DIO_vSetPinDir>
}
    3b9c:	0f 90       	pop	r0
    3b9e:	0f 90       	pop	r0
    3ba0:	cf 91       	pop	r28
    3ba2:	df 91       	pop	r29
    3ba4:	08 95       	ret

00003ba6 <BUZZER_vShortBeep>:

void BUZZER_vShortBeep(const buzzer_cfg *PTR_BUZZER){
    3ba6:	df 93       	push	r29
    3ba8:	cf 93       	push	r28
    3baa:	00 d0       	rcall	.+0      	; 0x3bac <BUZZER_vShortBeep+0x6>
    3bac:	00 d0       	rcall	.+0      	; 0x3bae <BUZZER_vShortBeep+0x8>
    3bae:	cd b7       	in	r28, 0x3d	; 61
    3bb0:	de b7       	in	r29, 0x3e	; 62
    3bb2:	9c 83       	std	Y+4, r25	; 0x04
    3bb4:	8b 83       	std	Y+3, r24	; 0x03
	DIO_vSetPinValue(PTR_BUZZER->buzzer_port, PTR_BUZZER->buzzer_pin, HIGH);
    3bb6:	eb 81       	ldd	r30, Y+3	; 0x03
    3bb8:	fc 81       	ldd	r31, Y+4	; 0x04
    3bba:	80 81       	ld	r24, Z
    3bbc:	83 70       	andi	r24, 0x03	; 3
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	eb 81       	ldd	r30, Y+3	; 0x03
    3bc2:	fc 81       	ldd	r31, Y+4	; 0x04
    3bc4:	80 81       	ld	r24, Z
    3bc6:	86 95       	lsr	r24
    3bc8:	86 95       	lsr	r24
    3bca:	87 70       	andi	r24, 0x07	; 7
    3bcc:	98 2f       	mov	r25, r24
    3bce:	82 2f       	mov	r24, r18
    3bd0:	69 2f       	mov	r22, r25
    3bd2:	41 e0       	ldi	r20, 0x01	; 1
    3bd4:	0e 94 43 16 	call	0x2c86	; 0x2c86 <DIO_vSetPinValue>
	for(int i=0;i<20000;i++);
    3bd8:	1a 82       	std	Y+2, r1	; 0x02
    3bda:	19 82       	std	Y+1, r1	; 0x01
    3bdc:	05 c0       	rjmp	.+10     	; 0x3be8 <BUZZER_vShortBeep+0x42>
    3bde:	89 81       	ldd	r24, Y+1	; 0x01
    3be0:	9a 81       	ldd	r25, Y+2	; 0x02
    3be2:	01 96       	adiw	r24, 0x01	; 1
    3be4:	9a 83       	std	Y+2, r25	; 0x02
    3be6:	89 83       	std	Y+1, r24	; 0x01
    3be8:	89 81       	ldd	r24, Y+1	; 0x01
    3bea:	9a 81       	ldd	r25, Y+2	; 0x02
    3bec:	2e e4       	ldi	r18, 0x4E	; 78
    3bee:	80 32       	cpi	r24, 0x20	; 32
    3bf0:	92 07       	cpc	r25, r18
    3bf2:	ac f3       	brlt	.-22     	; 0x3bde <BUZZER_vShortBeep+0x38>
	DIO_vSetPinValue(PTR_BUZZER->buzzer_port, PTR_BUZZER->buzzer_pin, LOW);
    3bf4:	eb 81       	ldd	r30, Y+3	; 0x03
    3bf6:	fc 81       	ldd	r31, Y+4	; 0x04
    3bf8:	80 81       	ld	r24, Z
    3bfa:	83 70       	andi	r24, 0x03	; 3
    3bfc:	28 2f       	mov	r18, r24
    3bfe:	eb 81       	ldd	r30, Y+3	; 0x03
    3c00:	fc 81       	ldd	r31, Y+4	; 0x04
    3c02:	80 81       	ld	r24, Z
    3c04:	86 95       	lsr	r24
    3c06:	86 95       	lsr	r24
    3c08:	87 70       	andi	r24, 0x07	; 7
    3c0a:	98 2f       	mov	r25, r24
    3c0c:	82 2f       	mov	r24, r18
    3c0e:	69 2f       	mov	r22, r25
    3c10:	40 e0       	ldi	r20, 0x00	; 0
    3c12:	0e 94 43 16 	call	0x2c86	; 0x2c86 <DIO_vSetPinValue>
}
    3c16:	0f 90       	pop	r0
    3c18:	0f 90       	pop	r0
    3c1a:	0f 90       	pop	r0
    3c1c:	0f 90       	pop	r0
    3c1e:	cf 91       	pop	r28
    3c20:	df 91       	pop	r29
    3c22:	08 95       	ret

00003c24 <BUZZER_vLongBeep>:

void BUZZER_vLongBeep(const buzzer_cfg *PTR_BUZZER){
    3c24:	df 93       	push	r29
    3c26:	cf 93       	push	r28
    3c28:	00 d0       	rcall	.+0      	; 0x3c2a <BUZZER_vLongBeep+0x6>
    3c2a:	00 d0       	rcall	.+0      	; 0x3c2c <BUZZER_vLongBeep+0x8>
    3c2c:	00 d0       	rcall	.+0      	; 0x3c2e <BUZZER_vLongBeep+0xa>
    3c2e:	cd b7       	in	r28, 0x3d	; 61
    3c30:	de b7       	in	r29, 0x3e	; 62
    3c32:	9e 83       	std	Y+6, r25	; 0x06
    3c34:	8d 83       	std	Y+5, r24	; 0x05
	DIO_vSetPinValue(PTR_BUZZER->buzzer_port, PTR_BUZZER->buzzer_pin, HIGH);
    3c36:	ed 81       	ldd	r30, Y+5	; 0x05
    3c38:	fe 81       	ldd	r31, Y+6	; 0x06
    3c3a:	80 81       	ld	r24, Z
    3c3c:	83 70       	andi	r24, 0x03	; 3
    3c3e:	28 2f       	mov	r18, r24
    3c40:	ed 81       	ldd	r30, Y+5	; 0x05
    3c42:	fe 81       	ldd	r31, Y+6	; 0x06
    3c44:	80 81       	ld	r24, Z
    3c46:	86 95       	lsr	r24
    3c48:	86 95       	lsr	r24
    3c4a:	87 70       	andi	r24, 0x07	; 7
    3c4c:	98 2f       	mov	r25, r24
    3c4e:	82 2f       	mov	r24, r18
    3c50:	69 2f       	mov	r22, r25
    3c52:	41 e0       	ldi	r20, 0x01	; 1
    3c54:	0e 94 43 16 	call	0x2c86	; 0x2c86 <DIO_vSetPinValue>
	for(u32 i=0;i<80000;i++);
    3c58:	19 82       	std	Y+1, r1	; 0x01
    3c5a:	1a 82       	std	Y+2, r1	; 0x02
    3c5c:	1b 82       	std	Y+3, r1	; 0x03
    3c5e:	1c 82       	std	Y+4, r1	; 0x04
    3c60:	0b c0       	rjmp	.+22     	; 0x3c78 <BUZZER_vLongBeep+0x54>
    3c62:	89 81       	ldd	r24, Y+1	; 0x01
    3c64:	9a 81       	ldd	r25, Y+2	; 0x02
    3c66:	ab 81       	ldd	r26, Y+3	; 0x03
    3c68:	bc 81       	ldd	r27, Y+4	; 0x04
    3c6a:	01 96       	adiw	r24, 0x01	; 1
    3c6c:	a1 1d       	adc	r26, r1
    3c6e:	b1 1d       	adc	r27, r1
    3c70:	89 83       	std	Y+1, r24	; 0x01
    3c72:	9a 83       	std	Y+2, r25	; 0x02
    3c74:	ab 83       	std	Y+3, r26	; 0x03
    3c76:	bc 83       	std	Y+4, r27	; 0x04
    3c78:	89 81       	ldd	r24, Y+1	; 0x01
    3c7a:	9a 81       	ldd	r25, Y+2	; 0x02
    3c7c:	ab 81       	ldd	r26, Y+3	; 0x03
    3c7e:	bc 81       	ldd	r27, Y+4	; 0x04
    3c80:	80 38       	cpi	r24, 0x80	; 128
    3c82:	28 e3       	ldi	r18, 0x38	; 56
    3c84:	92 07       	cpc	r25, r18
    3c86:	21 e0       	ldi	r18, 0x01	; 1
    3c88:	a2 07       	cpc	r26, r18
    3c8a:	20 e0       	ldi	r18, 0x00	; 0
    3c8c:	b2 07       	cpc	r27, r18
    3c8e:	48 f3       	brcs	.-46     	; 0x3c62 <BUZZER_vLongBeep+0x3e>
	DIO_vSetPinValue(PTR_BUZZER->buzzer_port, PTR_BUZZER->buzzer_pin, LOW);
    3c90:	ed 81       	ldd	r30, Y+5	; 0x05
    3c92:	fe 81       	ldd	r31, Y+6	; 0x06
    3c94:	80 81       	ld	r24, Z
    3c96:	83 70       	andi	r24, 0x03	; 3
    3c98:	28 2f       	mov	r18, r24
    3c9a:	ed 81       	ldd	r30, Y+5	; 0x05
    3c9c:	fe 81       	ldd	r31, Y+6	; 0x06
    3c9e:	80 81       	ld	r24, Z
    3ca0:	86 95       	lsr	r24
    3ca2:	86 95       	lsr	r24
    3ca4:	87 70       	andi	r24, 0x07	; 7
    3ca6:	98 2f       	mov	r25, r24
    3ca8:	82 2f       	mov	r24, r18
    3caa:	69 2f       	mov	r22, r25
    3cac:	40 e0       	ldi	r20, 0x00	; 0
    3cae:	0e 94 43 16 	call	0x2c86	; 0x2c86 <DIO_vSetPinValue>
}
    3cb2:	26 96       	adiw	r28, 0x06	; 6
    3cb4:	0f b6       	in	r0, 0x3f	; 63
    3cb6:	f8 94       	cli
    3cb8:	de bf       	out	0x3e, r29	; 62
    3cba:	0f be       	out	0x3f, r0	; 63
    3cbc:	cd bf       	out	0x3d, r28	; 61
    3cbe:	cf 91       	pop	r28
    3cc0:	df 91       	pop	r29
    3cc2:	08 95       	ret

00003cc4 <app_vInit>:
static enu_app_states Current_State;

u8 Entered_Username[50];
u8 Entered_Password[50];

void app_vInit(void){
    3cc4:	df 93       	push	r29
    3cc6:	cf 93       	push	r28
    3cc8:	cd b7       	in	r28, 0x3d	; 61
    3cca:	de b7       	in	r29, 0x3e	; 62
	Current_State = off_state; // Initial state is off
    3ccc:	10 92 84 00 	sts	0x0084, r1

	/* Initialize hardware components */
	LED_vInit(&RED_LED);
    3cd0:	89 e6       	ldi	r24, 0x69	; 105
    3cd2:	90 e0       	ldi	r25, 0x00	; 0
    3cd4:	0e 94 77 1c 	call	0x38ee	; 0x38ee <LED_vInit>
	LED_vInit(&YELLOW_LED);
    3cd8:	8a e6       	ldi	r24, 0x6A	; 106
    3cda:	90 e0       	ldi	r25, 0x00	; 0
    3cdc:	0e 94 77 1c 	call	0x38ee	; 0x38ee <LED_vInit>
	LED_vInit(&GREEN_LED);
    3ce0:	8b e6       	ldi	r24, 0x6B	; 107
    3ce2:	90 e0       	ldi	r25, 0x00	; 0
    3ce4:	0e 94 77 1c 	call	0x38ee	; 0x38ee <LED_vInit>
	SERVO_vInit(&SERVO1);
    3ce8:	85 e7       	ldi	r24, 0x75	; 117
    3cea:	90 e0       	ldi	r25, 0x00	; 0
    3cec:	0e 94 30 1b 	call	0x3660	; 0x3660 <SERVO_vInit>
	UART_vInit(&UART1);
    3cf0:	8c e6       	ldi	r24, 0x6C	; 108
    3cf2:	90 e0       	ldi	r25, 0x00	; 0
    3cf4:	0e 94 a3 05 	call	0xb46	; 0xb46 <UART_vInit>
	BUZZER_vInit(&BUZZ1);
    3cf8:	82 e8       	ldi	r24, 0x82	; 130
    3cfa:	90 e0       	ldi	r25, 0x00	; 0
    3cfc:	0e 94 b6 1d 	call	0x3b6c	; 0x3b6c <BUZZER_vInit>
	EEPROM_vinit();
    3d00:	0e 94 26 1d 	call	0x3a4c	; 0x3a4c <EEPROM_vinit>
}
    3d04:	cf 91       	pop	r28
    3d06:	df 91       	pop	r29
    3d08:	08 95       	ret

00003d0a <app_vMain>:

void app_vMain(void){
    3d0a:	df 93       	push	r29
    3d0c:	cf 93       	push	r28
    3d0e:	cd b7       	in	r28, 0x3d	; 61
    3d10:	de b7       	in	r29, 0x3e	; 62
	UART_vEnable(&UART1);
    3d12:	8c e6       	ldi	r24, 0x6C	; 108
    3d14:	90 e0       	ldi	r25, 0x00	; 0
    3d16:	0e 94 11 07 	call	0xe22	; 0xe22 <UART_vEnable>


}
    3d1a:	cf 91       	pop	r28
    3d1c:	df 91       	pop	r29
    3d1e:	08 95       	ret

00003d20 <main>:

int main(void){
    3d20:	0f 93       	push	r16
    3d22:	1f 93       	push	r17
    3d24:	df 93       	push	r29
    3d26:	cf 93       	push	r28
    3d28:	cd b7       	in	r28, 0x3d	; 61
    3d2a:	de b7       	in	r29, 0x3e	; 62
    3d2c:	c9 54       	subi	r28, 0x49	; 73
    3d2e:	d0 40       	sbci	r29, 0x00	; 0
    3d30:	0f b6       	in	r0, 0x3f	; 63
    3d32:	f8 94       	cli
    3d34:	de bf       	out	0x3e, r29	; 62
    3d36:	0f be       	out	0x3f, r0	; 63
    3d38:	cd bf       	out	0x3d, r28	; 61
	/* Initialization part */
	app_vInit();
    3d3a:	0e 94 62 1e 	call	0x3cc4	; 0x3cc4 <app_vInit>
	app_vMain();
    3d3e:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <app_vMain>
		temp = UART_u8ReceiveData();
		UART_vSendData(temp);
		Entered_Password[i++] = temp;
	}
	UART_vSendString((u8*)"\r\nLogging...\r\n");*/
	temp = EEPROM_u8WriteByte(0, 'A', BLOCK1);
    3d42:	80 e0       	ldi	r24, 0x00	; 0
    3d44:	61 e4       	ldi	r22, 0x41	; 65
    3d46:	42 e0       	ldi	r20, 0x02	; 2
    3d48:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <EEPROM_u8WriteByte>
    3d4c:	fe 01       	movw	r30, r28
    3d4e:	e9 5b       	subi	r30, 0xB9	; 185
    3d50:	ff 4f       	sbci	r31, 0xFF	; 255
    3d52:	80 83       	st	Z, r24
	UART_vSendData(temp+48);
    3d54:	fe 01       	movw	r30, r28
    3d56:	e9 5b       	subi	r30, 0xB9	; 185
    3d58:	ff 4f       	sbci	r31, 0xFF	; 255
    3d5a:	80 81       	ld	r24, Z
    3d5c:	80 5d       	subi	r24, 0xD0	; 208
    3d5e:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_vSendData>
    3d62:	fe 01       	movw	r30, r28
    3d64:	ed 5b       	subi	r30, 0xBD	; 189
    3d66:	ff 4f       	sbci	r31, 0xFF	; 255
    3d68:	80 e0       	ldi	r24, 0x00	; 0
    3d6a:	90 e0       	ldi	r25, 0x00	; 0
    3d6c:	aa e7       	ldi	r26, 0x7A	; 122
    3d6e:	b4 e4       	ldi	r27, 0x44	; 68
    3d70:	80 83       	st	Z, r24
    3d72:	91 83       	std	Z+1, r25	; 0x01
    3d74:	a2 83       	std	Z+2, r26	; 0x02
    3d76:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d78:	8e 01       	movw	r16, r28
    3d7a:	01 5c       	subi	r16, 0xC1	; 193
    3d7c:	1f 4f       	sbci	r17, 0xFF	; 255
    3d7e:	fe 01       	movw	r30, r28
    3d80:	ed 5b       	subi	r30, 0xBD	; 189
    3d82:	ff 4f       	sbci	r31, 0xFF	; 255
    3d84:	60 81       	ld	r22, Z
    3d86:	71 81       	ldd	r23, Z+1	; 0x01
    3d88:	82 81       	ldd	r24, Z+2	; 0x02
    3d8a:	93 81       	ldd	r25, Z+3	; 0x03
    3d8c:	20 e0       	ldi	r18, 0x00	; 0
    3d8e:	30 e0       	ldi	r19, 0x00	; 0
    3d90:	4a ef       	ldi	r20, 0xFA	; 250
    3d92:	54 e4       	ldi	r21, 0x44	; 68
    3d94:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d98:	dc 01       	movw	r26, r24
    3d9a:	cb 01       	movw	r24, r22
    3d9c:	f8 01       	movw	r30, r16
    3d9e:	80 83       	st	Z, r24
    3da0:	91 83       	std	Z+1, r25	; 0x01
    3da2:	a2 83       	std	Z+2, r26	; 0x02
    3da4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3da6:	fe 01       	movw	r30, r28
    3da8:	ff 96       	adiw	r30, 0x3f	; 63
    3daa:	60 81       	ld	r22, Z
    3dac:	71 81       	ldd	r23, Z+1	; 0x01
    3dae:	82 81       	ldd	r24, Z+2	; 0x02
    3db0:	93 81       	ldd	r25, Z+3	; 0x03
    3db2:	20 e0       	ldi	r18, 0x00	; 0
    3db4:	30 e0       	ldi	r19, 0x00	; 0
    3db6:	40 e8       	ldi	r20, 0x80	; 128
    3db8:	5f e3       	ldi	r21, 0x3F	; 63
    3dba:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3dbe:	88 23       	and	r24, r24
    3dc0:	2c f4       	brge	.+10     	; 0x3dcc <main+0xac>
		__ticks = 1;
    3dc2:	81 e0       	ldi	r24, 0x01	; 1
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	9e af       	std	Y+62, r25	; 0x3e
    3dc8:	8d af       	std	Y+61, r24	; 0x3d
    3dca:	46 c0       	rjmp	.+140    	; 0x3e58 <main+0x138>
	else if (__tmp > 65535)
    3dcc:	fe 01       	movw	r30, r28
    3dce:	ff 96       	adiw	r30, 0x3f	; 63
    3dd0:	60 81       	ld	r22, Z
    3dd2:	71 81       	ldd	r23, Z+1	; 0x01
    3dd4:	82 81       	ldd	r24, Z+2	; 0x02
    3dd6:	93 81       	ldd	r25, Z+3	; 0x03
    3dd8:	20 e0       	ldi	r18, 0x00	; 0
    3dda:	3f ef       	ldi	r19, 0xFF	; 255
    3ddc:	4f e7       	ldi	r20, 0x7F	; 127
    3dde:	57 e4       	ldi	r21, 0x47	; 71
    3de0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3de4:	18 16       	cp	r1, r24
    3de6:	64 f5       	brge	.+88     	; 0x3e40 <main+0x120>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3de8:	fe 01       	movw	r30, r28
    3dea:	ed 5b       	subi	r30, 0xBD	; 189
    3dec:	ff 4f       	sbci	r31, 0xFF	; 255
    3dee:	60 81       	ld	r22, Z
    3df0:	71 81       	ldd	r23, Z+1	; 0x01
    3df2:	82 81       	ldd	r24, Z+2	; 0x02
    3df4:	93 81       	ldd	r25, Z+3	; 0x03
    3df6:	20 e0       	ldi	r18, 0x00	; 0
    3df8:	30 e0       	ldi	r19, 0x00	; 0
    3dfa:	40 e2       	ldi	r20, 0x20	; 32
    3dfc:	51 e4       	ldi	r21, 0x41	; 65
    3dfe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e02:	dc 01       	movw	r26, r24
    3e04:	cb 01       	movw	r24, r22
    3e06:	bc 01       	movw	r22, r24
    3e08:	cd 01       	movw	r24, r26
    3e0a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e0e:	dc 01       	movw	r26, r24
    3e10:	cb 01       	movw	r24, r22
    3e12:	9e af       	std	Y+62, r25	; 0x3e
    3e14:	8d af       	std	Y+61, r24	; 0x3d
    3e16:	0f c0       	rjmp	.+30     	; 0x3e36 <main+0x116>
    3e18:	88 ec       	ldi	r24, 0xC8	; 200
    3e1a:	90 e0       	ldi	r25, 0x00	; 0
    3e1c:	9c af       	std	Y+60, r25	; 0x3c
    3e1e:	8b af       	std	Y+59, r24	; 0x3b
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    3e20:	8b ad       	ldd	r24, Y+59	; 0x3b
    3e22:	9c ad       	ldd	r25, Y+60	; 0x3c
    3e24:	01 97       	sbiw	r24, 0x01	; 1
    3e26:	f1 f7       	brne	.-4      	; 0x3e24 <main+0x104>
    3e28:	9c af       	std	Y+60, r25	; 0x3c
    3e2a:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3e2c:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e2e:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e30:	01 97       	sbiw	r24, 0x01	; 1
    3e32:	9e af       	std	Y+62, r25	; 0x3e
    3e34:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e36:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e38:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e3a:	00 97       	sbiw	r24, 0x00	; 0
    3e3c:	69 f7       	brne	.-38     	; 0x3e18 <main+0xf8>
    3e3e:	16 c0       	rjmp	.+44     	; 0x3e6c <main+0x14c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e40:	fe 01       	movw	r30, r28
    3e42:	ff 96       	adiw	r30, 0x3f	; 63
    3e44:	60 81       	ld	r22, Z
    3e46:	71 81       	ldd	r23, Z+1	; 0x01
    3e48:	82 81       	ldd	r24, Z+2	; 0x02
    3e4a:	93 81       	ldd	r25, Z+3	; 0x03
    3e4c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e50:	dc 01       	movw	r26, r24
    3e52:	cb 01       	movw	r24, r22
    3e54:	9e af       	std	Y+62, r25	; 0x3e
    3e56:	8d af       	std	Y+61, r24	; 0x3d
    3e58:	8d ad       	ldd	r24, Y+61	; 0x3d
    3e5a:	9e ad       	ldd	r25, Y+62	; 0x3e
    3e5c:	9a af       	std	Y+58, r25	; 0x3a
    3e5e:	89 af       	std	Y+57, r24	; 0x39
    3e60:	89 ad       	ldd	r24, Y+57	; 0x39
    3e62:	9a ad       	ldd	r25, Y+58	; 0x3a
    3e64:	01 97       	sbiw	r24, 0x01	; 1
    3e66:	f1 f7       	brne	.-4      	; 0x3e64 <main+0x144>
    3e68:	9a af       	std	Y+58, r25	; 0x3a
    3e6a:	89 af       	std	Y+57, r24	; 0x39
	_delay_ms(1000);
	temp = EEPROM_u8WriteByte(9, 'B', BLOCK1);
    3e6c:	89 e0       	ldi	r24, 0x09	; 9
    3e6e:	62 e4       	ldi	r22, 0x42	; 66
    3e70:	42 e0       	ldi	r20, 0x02	; 2
    3e72:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <EEPROM_u8WriteByte>
    3e76:	fe 01       	movw	r30, r28
    3e78:	e9 5b       	subi	r30, 0xB9	; 185
    3e7a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e7c:	80 83       	st	Z, r24
	UART_vSendData(temp+48);
    3e7e:	fe 01       	movw	r30, r28
    3e80:	e9 5b       	subi	r30, 0xB9	; 185
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	80 81       	ld	r24, Z
    3e86:	80 5d       	subi	r24, 0xD0	; 208
    3e88:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_vSendData>
    3e8c:	80 e0       	ldi	r24, 0x00	; 0
    3e8e:	90 e0       	ldi	r25, 0x00	; 0
    3e90:	aa e7       	ldi	r26, 0x7A	; 122
    3e92:	b4 e4       	ldi	r27, 0x44	; 68
    3e94:	8d ab       	std	Y+53, r24	; 0x35
    3e96:	9e ab       	std	Y+54, r25	; 0x36
    3e98:	af ab       	std	Y+55, r26	; 0x37
    3e9a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e9c:	6d a9       	ldd	r22, Y+53	; 0x35
    3e9e:	7e a9       	ldd	r23, Y+54	; 0x36
    3ea0:	8f a9       	ldd	r24, Y+55	; 0x37
    3ea2:	98 ad       	ldd	r25, Y+56	; 0x38
    3ea4:	20 e0       	ldi	r18, 0x00	; 0
    3ea6:	30 e0       	ldi	r19, 0x00	; 0
    3ea8:	4a ef       	ldi	r20, 0xFA	; 250
    3eaa:	54 e4       	ldi	r21, 0x44	; 68
    3eac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3eb0:	dc 01       	movw	r26, r24
    3eb2:	cb 01       	movw	r24, r22
    3eb4:	89 ab       	std	Y+49, r24	; 0x31
    3eb6:	9a ab       	std	Y+50, r25	; 0x32
    3eb8:	ab ab       	std	Y+51, r26	; 0x33
    3eba:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3ebc:	69 a9       	ldd	r22, Y+49	; 0x31
    3ebe:	7a a9       	ldd	r23, Y+50	; 0x32
    3ec0:	8b a9       	ldd	r24, Y+51	; 0x33
    3ec2:	9c a9       	ldd	r25, Y+52	; 0x34
    3ec4:	20 e0       	ldi	r18, 0x00	; 0
    3ec6:	30 e0       	ldi	r19, 0x00	; 0
    3ec8:	40 e8       	ldi	r20, 0x80	; 128
    3eca:	5f e3       	ldi	r21, 0x3F	; 63
    3ecc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3ed0:	88 23       	and	r24, r24
    3ed2:	2c f4       	brge	.+10     	; 0x3ede <main+0x1be>
		__ticks = 1;
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	90 e0       	ldi	r25, 0x00	; 0
    3ed8:	98 ab       	std	Y+48, r25	; 0x30
    3eda:	8f a7       	std	Y+47, r24	; 0x2f
    3edc:	3f c0       	rjmp	.+126    	; 0x3f5c <main+0x23c>
	else if (__tmp > 65535)
    3ede:	69 a9       	ldd	r22, Y+49	; 0x31
    3ee0:	7a a9       	ldd	r23, Y+50	; 0x32
    3ee2:	8b a9       	ldd	r24, Y+51	; 0x33
    3ee4:	9c a9       	ldd	r25, Y+52	; 0x34
    3ee6:	20 e0       	ldi	r18, 0x00	; 0
    3ee8:	3f ef       	ldi	r19, 0xFF	; 255
    3eea:	4f e7       	ldi	r20, 0x7F	; 127
    3eec:	57 e4       	ldi	r21, 0x47	; 71
    3eee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ef2:	18 16       	cp	r1, r24
    3ef4:	4c f5       	brge	.+82     	; 0x3f48 <main+0x228>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ef6:	6d a9       	ldd	r22, Y+53	; 0x35
    3ef8:	7e a9       	ldd	r23, Y+54	; 0x36
    3efa:	8f a9       	ldd	r24, Y+55	; 0x37
    3efc:	98 ad       	ldd	r25, Y+56	; 0x38
    3efe:	20 e0       	ldi	r18, 0x00	; 0
    3f00:	30 e0       	ldi	r19, 0x00	; 0
    3f02:	40 e2       	ldi	r20, 0x20	; 32
    3f04:	51 e4       	ldi	r21, 0x41	; 65
    3f06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	bc 01       	movw	r22, r24
    3f10:	cd 01       	movw	r24, r26
    3f12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f16:	dc 01       	movw	r26, r24
    3f18:	cb 01       	movw	r24, r22
    3f1a:	98 ab       	std	Y+48, r25	; 0x30
    3f1c:	8f a7       	std	Y+47, r24	; 0x2f
    3f1e:	0f c0       	rjmp	.+30     	; 0x3f3e <main+0x21e>
    3f20:	88 ec       	ldi	r24, 0xC8	; 200
    3f22:	90 e0       	ldi	r25, 0x00	; 0
    3f24:	9e a7       	std	Y+46, r25	; 0x2e
    3f26:	8d a7       	std	Y+45, r24	; 0x2d
    3f28:	8d a5       	ldd	r24, Y+45	; 0x2d
    3f2a:	9e a5       	ldd	r25, Y+46	; 0x2e
    3f2c:	01 97       	sbiw	r24, 0x01	; 1
    3f2e:	f1 f7       	brne	.-4      	; 0x3f2c <main+0x20c>
    3f30:	9e a7       	std	Y+46, r25	; 0x2e
    3f32:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f34:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f36:	98 a9       	ldd	r25, Y+48	; 0x30
    3f38:	01 97       	sbiw	r24, 0x01	; 1
    3f3a:	98 ab       	std	Y+48, r25	; 0x30
    3f3c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f3e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f40:	98 a9       	ldd	r25, Y+48	; 0x30
    3f42:	00 97       	sbiw	r24, 0x00	; 0
    3f44:	69 f7       	brne	.-38     	; 0x3f20 <main+0x200>
    3f46:	14 c0       	rjmp	.+40     	; 0x3f70 <main+0x250>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f48:	69 a9       	ldd	r22, Y+49	; 0x31
    3f4a:	7a a9       	ldd	r23, Y+50	; 0x32
    3f4c:	8b a9       	ldd	r24, Y+51	; 0x33
    3f4e:	9c a9       	ldd	r25, Y+52	; 0x34
    3f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	98 ab       	std	Y+48, r25	; 0x30
    3f5a:	8f a7       	std	Y+47, r24	; 0x2f
    3f5c:	8f a5       	ldd	r24, Y+47	; 0x2f
    3f5e:	98 a9       	ldd	r25, Y+48	; 0x30
    3f60:	9c a7       	std	Y+44, r25	; 0x2c
    3f62:	8b a7       	std	Y+43, r24	; 0x2b
    3f64:	8b a5       	ldd	r24, Y+43	; 0x2b
    3f66:	9c a5       	ldd	r25, Y+44	; 0x2c
    3f68:	01 97       	sbiw	r24, 0x01	; 1
    3f6a:	f1 f7       	brne	.-4      	; 0x3f68 <main+0x248>
    3f6c:	9c a7       	std	Y+44, r25	; 0x2c
    3f6e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1000);
	temp = EEPROM_u8ReadByte(0, &i, BLOCK1);
    3f70:	9e 01       	movw	r18, r28
    3f72:	28 5b       	subi	r18, 0xB8	; 184
    3f74:	3f 4f       	sbci	r19, 0xFF	; 255
    3f76:	80 e0       	ldi	r24, 0x00	; 0
    3f78:	b9 01       	movw	r22, r18
    3f7a:	42 e0       	ldi	r20, 0x02	; 2
    3f7c:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <EEPROM_u8ReadByte>
    3f80:	fe 01       	movw	r30, r28
    3f82:	e9 5b       	subi	r30, 0xB9	; 185
    3f84:	ff 4f       	sbci	r31, 0xFF	; 255
    3f86:	80 83       	st	Z, r24
	UART_vSendData(temp+48);
    3f88:	fe 01       	movw	r30, r28
    3f8a:	e9 5b       	subi	r30, 0xB9	; 185
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	80 81       	ld	r24, Z
    3f90:	80 5d       	subi	r24, 0xD0	; 208
    3f92:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_vSendData>
    3f96:	80 e0       	ldi	r24, 0x00	; 0
    3f98:	90 e0       	ldi	r25, 0x00	; 0
    3f9a:	aa e7       	ldi	r26, 0x7A	; 122
    3f9c:	b4 e4       	ldi	r27, 0x44	; 68
    3f9e:	8f a3       	std	Y+39, r24	; 0x27
    3fa0:	98 a7       	std	Y+40, r25	; 0x28
    3fa2:	a9 a7       	std	Y+41, r26	; 0x29
    3fa4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fa6:	6f a1       	ldd	r22, Y+39	; 0x27
    3fa8:	78 a5       	ldd	r23, Y+40	; 0x28
    3faa:	89 a5       	ldd	r24, Y+41	; 0x29
    3fac:	9a a5       	ldd	r25, Y+42	; 0x2a
    3fae:	20 e0       	ldi	r18, 0x00	; 0
    3fb0:	30 e0       	ldi	r19, 0x00	; 0
    3fb2:	4a ef       	ldi	r20, 0xFA	; 250
    3fb4:	54 e4       	ldi	r21, 0x44	; 68
    3fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fba:	dc 01       	movw	r26, r24
    3fbc:	cb 01       	movw	r24, r22
    3fbe:	8b a3       	std	Y+35, r24	; 0x23
    3fc0:	9c a3       	std	Y+36, r25	; 0x24
    3fc2:	ad a3       	std	Y+37, r26	; 0x25
    3fc4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3fc6:	6b a1       	ldd	r22, Y+35	; 0x23
    3fc8:	7c a1       	ldd	r23, Y+36	; 0x24
    3fca:	8d a1       	ldd	r24, Y+37	; 0x25
    3fcc:	9e a1       	ldd	r25, Y+38	; 0x26
    3fce:	20 e0       	ldi	r18, 0x00	; 0
    3fd0:	30 e0       	ldi	r19, 0x00	; 0
    3fd2:	40 e8       	ldi	r20, 0x80	; 128
    3fd4:	5f e3       	ldi	r21, 0x3F	; 63
    3fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3fda:	88 23       	and	r24, r24
    3fdc:	2c f4       	brge	.+10     	; 0x3fe8 <main+0x2c8>
		__ticks = 1;
    3fde:	81 e0       	ldi	r24, 0x01	; 1
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	9a a3       	std	Y+34, r25	; 0x22
    3fe4:	89 a3       	std	Y+33, r24	; 0x21
    3fe6:	3f c0       	rjmp	.+126    	; 0x4066 <main+0x346>
	else if (__tmp > 65535)
    3fe8:	6b a1       	ldd	r22, Y+35	; 0x23
    3fea:	7c a1       	ldd	r23, Y+36	; 0x24
    3fec:	8d a1       	ldd	r24, Y+37	; 0x25
    3fee:	9e a1       	ldd	r25, Y+38	; 0x26
    3ff0:	20 e0       	ldi	r18, 0x00	; 0
    3ff2:	3f ef       	ldi	r19, 0xFF	; 255
    3ff4:	4f e7       	ldi	r20, 0x7F	; 127
    3ff6:	57 e4       	ldi	r21, 0x47	; 71
    3ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ffc:	18 16       	cp	r1, r24
    3ffe:	4c f5       	brge	.+82     	; 0x4052 <main+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4000:	6f a1       	ldd	r22, Y+39	; 0x27
    4002:	78 a5       	ldd	r23, Y+40	; 0x28
    4004:	89 a5       	ldd	r24, Y+41	; 0x29
    4006:	9a a5       	ldd	r25, Y+42	; 0x2a
    4008:	20 e0       	ldi	r18, 0x00	; 0
    400a:	30 e0       	ldi	r19, 0x00	; 0
    400c:	40 e2       	ldi	r20, 0x20	; 32
    400e:	51 e4       	ldi	r21, 0x41	; 65
    4010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4014:	dc 01       	movw	r26, r24
    4016:	cb 01       	movw	r24, r22
    4018:	bc 01       	movw	r22, r24
    401a:	cd 01       	movw	r24, r26
    401c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4020:	dc 01       	movw	r26, r24
    4022:	cb 01       	movw	r24, r22
    4024:	9a a3       	std	Y+34, r25	; 0x22
    4026:	89 a3       	std	Y+33, r24	; 0x21
    4028:	0f c0       	rjmp	.+30     	; 0x4048 <main+0x328>
    402a:	88 ec       	ldi	r24, 0xC8	; 200
    402c:	90 e0       	ldi	r25, 0x00	; 0
    402e:	98 a3       	std	Y+32, r25	; 0x20
    4030:	8f 8f       	std	Y+31, r24	; 0x1f
    4032:	8f 8d       	ldd	r24, Y+31	; 0x1f
    4034:	98 a1       	ldd	r25, Y+32	; 0x20
    4036:	01 97       	sbiw	r24, 0x01	; 1
    4038:	f1 f7       	brne	.-4      	; 0x4036 <main+0x316>
    403a:	98 a3       	std	Y+32, r25	; 0x20
    403c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    403e:	89 a1       	ldd	r24, Y+33	; 0x21
    4040:	9a a1       	ldd	r25, Y+34	; 0x22
    4042:	01 97       	sbiw	r24, 0x01	; 1
    4044:	9a a3       	std	Y+34, r25	; 0x22
    4046:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4048:	89 a1       	ldd	r24, Y+33	; 0x21
    404a:	9a a1       	ldd	r25, Y+34	; 0x22
    404c:	00 97       	sbiw	r24, 0x00	; 0
    404e:	69 f7       	brne	.-38     	; 0x402a <main+0x30a>
    4050:	14 c0       	rjmp	.+40     	; 0x407a <main+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4052:	6b a1       	ldd	r22, Y+35	; 0x23
    4054:	7c a1       	ldd	r23, Y+36	; 0x24
    4056:	8d a1       	ldd	r24, Y+37	; 0x25
    4058:	9e a1       	ldd	r25, Y+38	; 0x26
    405a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    405e:	dc 01       	movw	r26, r24
    4060:	cb 01       	movw	r24, r22
    4062:	9a a3       	std	Y+34, r25	; 0x22
    4064:	89 a3       	std	Y+33, r24	; 0x21
    4066:	89 a1       	ldd	r24, Y+33	; 0x21
    4068:	9a a1       	ldd	r25, Y+34	; 0x22
    406a:	9e 8f       	std	Y+30, r25	; 0x1e
    406c:	8d 8f       	std	Y+29, r24	; 0x1d
    406e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4070:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4072:	01 97       	sbiw	r24, 0x01	; 1
    4074:	f1 f7       	brne	.-4      	; 0x4072 <main+0x352>
    4076:	9e 8f       	std	Y+30, r25	; 0x1e
    4078:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1000);
	temp = EEPROM_u8ReadByte(9, &j, BLOCK1);
    407a:	9e 01       	movw	r18, r28
    407c:	27 5b       	subi	r18, 0xB7	; 183
    407e:	3f 4f       	sbci	r19, 0xFF	; 255
    4080:	89 e0       	ldi	r24, 0x09	; 9
    4082:	b9 01       	movw	r22, r18
    4084:	42 e0       	ldi	r20, 0x02	; 2
    4086:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <EEPROM_u8ReadByte>
    408a:	fe 01       	movw	r30, r28
    408c:	e9 5b       	subi	r30, 0xB9	; 185
    408e:	ff 4f       	sbci	r31, 0xFF	; 255
    4090:	80 83       	st	Z, r24
	UART_vSendData(temp+48);
    4092:	fe 01       	movw	r30, r28
    4094:	e9 5b       	subi	r30, 0xB9	; 185
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	80 81       	ld	r24, Z
    409a:	80 5d       	subi	r24, 0xD0	; 208
    409c:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_vSendData>
    40a0:	80 e0       	ldi	r24, 0x00	; 0
    40a2:	90 e0       	ldi	r25, 0x00	; 0
    40a4:	aa e7       	ldi	r26, 0x7A	; 122
    40a6:	b4 e4       	ldi	r27, 0x44	; 68
    40a8:	89 8f       	std	Y+25, r24	; 0x19
    40aa:	9a 8f       	std	Y+26, r25	; 0x1a
    40ac:	ab 8f       	std	Y+27, r26	; 0x1b
    40ae:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    40b0:	69 8d       	ldd	r22, Y+25	; 0x19
    40b2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    40b4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    40b6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	4a ef       	ldi	r20, 0xFA	; 250
    40be:	54 e4       	ldi	r21, 0x44	; 68
    40c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	8d 8b       	std	Y+21, r24	; 0x15
    40ca:	9e 8b       	std	Y+22, r25	; 0x16
    40cc:	af 8b       	std	Y+23, r26	; 0x17
    40ce:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    40d0:	6d 89       	ldd	r22, Y+21	; 0x15
    40d2:	7e 89       	ldd	r23, Y+22	; 0x16
    40d4:	8f 89       	ldd	r24, Y+23	; 0x17
    40d6:	98 8d       	ldd	r25, Y+24	; 0x18
    40d8:	20 e0       	ldi	r18, 0x00	; 0
    40da:	30 e0       	ldi	r19, 0x00	; 0
    40dc:	40 e8       	ldi	r20, 0x80	; 128
    40de:	5f e3       	ldi	r21, 0x3F	; 63
    40e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    40e4:	88 23       	and	r24, r24
    40e6:	2c f4       	brge	.+10     	; 0x40f2 <main+0x3d2>
		__ticks = 1;
    40e8:	81 e0       	ldi	r24, 0x01	; 1
    40ea:	90 e0       	ldi	r25, 0x00	; 0
    40ec:	9c 8b       	std	Y+20, r25	; 0x14
    40ee:	8b 8b       	std	Y+19, r24	; 0x13
    40f0:	3f c0       	rjmp	.+126    	; 0x4170 <main+0x450>
	else if (__tmp > 65535)
    40f2:	6d 89       	ldd	r22, Y+21	; 0x15
    40f4:	7e 89       	ldd	r23, Y+22	; 0x16
    40f6:	8f 89       	ldd	r24, Y+23	; 0x17
    40f8:	98 8d       	ldd	r25, Y+24	; 0x18
    40fa:	20 e0       	ldi	r18, 0x00	; 0
    40fc:	3f ef       	ldi	r19, 0xFF	; 255
    40fe:	4f e7       	ldi	r20, 0x7F	; 127
    4100:	57 e4       	ldi	r21, 0x47	; 71
    4102:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4106:	18 16       	cp	r1, r24
    4108:	4c f5       	brge	.+82     	; 0x415c <main+0x43c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    410a:	69 8d       	ldd	r22, Y+25	; 0x19
    410c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    410e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4110:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4112:	20 e0       	ldi	r18, 0x00	; 0
    4114:	30 e0       	ldi	r19, 0x00	; 0
    4116:	40 e2       	ldi	r20, 0x20	; 32
    4118:	51 e4       	ldi	r21, 0x41	; 65
    411a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    411e:	dc 01       	movw	r26, r24
    4120:	cb 01       	movw	r24, r22
    4122:	bc 01       	movw	r22, r24
    4124:	cd 01       	movw	r24, r26
    4126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    412a:	dc 01       	movw	r26, r24
    412c:	cb 01       	movw	r24, r22
    412e:	9c 8b       	std	Y+20, r25	; 0x14
    4130:	8b 8b       	std	Y+19, r24	; 0x13
    4132:	0f c0       	rjmp	.+30     	; 0x4152 <main+0x432>
    4134:	88 ec       	ldi	r24, 0xC8	; 200
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	9a 8b       	std	Y+18, r25	; 0x12
    413a:	89 8b       	std	Y+17, r24	; 0x11
    413c:	89 89       	ldd	r24, Y+17	; 0x11
    413e:	9a 89       	ldd	r25, Y+18	; 0x12
    4140:	01 97       	sbiw	r24, 0x01	; 1
    4142:	f1 f7       	brne	.-4      	; 0x4140 <main+0x420>
    4144:	9a 8b       	std	Y+18, r25	; 0x12
    4146:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4148:	8b 89       	ldd	r24, Y+19	; 0x13
    414a:	9c 89       	ldd	r25, Y+20	; 0x14
    414c:	01 97       	sbiw	r24, 0x01	; 1
    414e:	9c 8b       	std	Y+20, r25	; 0x14
    4150:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4152:	8b 89       	ldd	r24, Y+19	; 0x13
    4154:	9c 89       	ldd	r25, Y+20	; 0x14
    4156:	00 97       	sbiw	r24, 0x00	; 0
    4158:	69 f7       	brne	.-38     	; 0x4134 <main+0x414>
    415a:	14 c0       	rjmp	.+40     	; 0x4184 <main+0x464>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    415c:	6d 89       	ldd	r22, Y+21	; 0x15
    415e:	7e 89       	ldd	r23, Y+22	; 0x16
    4160:	8f 89       	ldd	r24, Y+23	; 0x17
    4162:	98 8d       	ldd	r25, Y+24	; 0x18
    4164:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4168:	dc 01       	movw	r26, r24
    416a:	cb 01       	movw	r24, r22
    416c:	9c 8b       	std	Y+20, r25	; 0x14
    416e:	8b 8b       	std	Y+19, r24	; 0x13
    4170:	8b 89       	ldd	r24, Y+19	; 0x13
    4172:	9c 89       	ldd	r25, Y+20	; 0x14
    4174:	98 8b       	std	Y+16, r25	; 0x10
    4176:	8f 87       	std	Y+15, r24	; 0x0f
    4178:	8f 85       	ldd	r24, Y+15	; 0x0f
    417a:	98 89       	ldd	r25, Y+16	; 0x10
    417c:	01 97       	sbiw	r24, 0x01	; 1
    417e:	f1 f7       	brne	.-4      	; 0x417c <main+0x45c>
    4180:	98 8b       	std	Y+16, r25	; 0x10
    4182:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1000);
	UART_vSendData(i);
    4184:	fe 01       	movw	r30, r28
    4186:	e8 5b       	subi	r30, 0xB8	; 184
    4188:	ff 4f       	sbci	r31, 0xFF	; 255
    418a:	80 81       	ld	r24, Z
    418c:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_vSendData>
    4190:	80 e0       	ldi	r24, 0x00	; 0
    4192:	90 e0       	ldi	r25, 0x00	; 0
    4194:	aa e7       	ldi	r26, 0x7A	; 122
    4196:	b4 e4       	ldi	r27, 0x44	; 68
    4198:	8b 87       	std	Y+11, r24	; 0x0b
    419a:	9c 87       	std	Y+12, r25	; 0x0c
    419c:	ad 87       	std	Y+13, r26	; 0x0d
    419e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    41a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    41a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    41a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    41a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    41a8:	20 e0       	ldi	r18, 0x00	; 0
    41aa:	30 e0       	ldi	r19, 0x00	; 0
    41ac:	4a ef       	ldi	r20, 0xFA	; 250
    41ae:	54 e4       	ldi	r21, 0x44	; 68
    41b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b4:	dc 01       	movw	r26, r24
    41b6:	cb 01       	movw	r24, r22
    41b8:	8f 83       	std	Y+7, r24	; 0x07
    41ba:	98 87       	std	Y+8, r25	; 0x08
    41bc:	a9 87       	std	Y+9, r26	; 0x09
    41be:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    41c0:	6f 81       	ldd	r22, Y+7	; 0x07
    41c2:	78 85       	ldd	r23, Y+8	; 0x08
    41c4:	89 85       	ldd	r24, Y+9	; 0x09
    41c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    41c8:	20 e0       	ldi	r18, 0x00	; 0
    41ca:	30 e0       	ldi	r19, 0x00	; 0
    41cc:	40 e8       	ldi	r20, 0x80	; 128
    41ce:	5f e3       	ldi	r21, 0x3F	; 63
    41d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    41d4:	88 23       	and	r24, r24
    41d6:	2c f4       	brge	.+10     	; 0x41e2 <main+0x4c2>
		__ticks = 1;
    41d8:	81 e0       	ldi	r24, 0x01	; 1
    41da:	90 e0       	ldi	r25, 0x00	; 0
    41dc:	9e 83       	std	Y+6, r25	; 0x06
    41de:	8d 83       	std	Y+5, r24	; 0x05
    41e0:	3f c0       	rjmp	.+126    	; 0x4260 <main+0x540>
	else if (__tmp > 65535)
    41e2:	6f 81       	ldd	r22, Y+7	; 0x07
    41e4:	78 85       	ldd	r23, Y+8	; 0x08
    41e6:	89 85       	ldd	r24, Y+9	; 0x09
    41e8:	9a 85       	ldd	r25, Y+10	; 0x0a
    41ea:	20 e0       	ldi	r18, 0x00	; 0
    41ec:	3f ef       	ldi	r19, 0xFF	; 255
    41ee:	4f e7       	ldi	r20, 0x7F	; 127
    41f0:	57 e4       	ldi	r21, 0x47	; 71
    41f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    41f6:	18 16       	cp	r1, r24
    41f8:	4c f5       	brge	.+82     	; 0x424c <main+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41fa:	6b 85       	ldd	r22, Y+11	; 0x0b
    41fc:	7c 85       	ldd	r23, Y+12	; 0x0c
    41fe:	8d 85       	ldd	r24, Y+13	; 0x0d
    4200:	9e 85       	ldd	r25, Y+14	; 0x0e
    4202:	20 e0       	ldi	r18, 0x00	; 0
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	40 e2       	ldi	r20, 0x20	; 32
    4208:	51 e4       	ldi	r21, 0x41	; 65
    420a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    420e:	dc 01       	movw	r26, r24
    4210:	cb 01       	movw	r24, r22
    4212:	bc 01       	movw	r22, r24
    4214:	cd 01       	movw	r24, r26
    4216:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    421a:	dc 01       	movw	r26, r24
    421c:	cb 01       	movw	r24, r22
    421e:	9e 83       	std	Y+6, r25	; 0x06
    4220:	8d 83       	std	Y+5, r24	; 0x05
    4222:	0f c0       	rjmp	.+30     	; 0x4242 <main+0x522>
    4224:	88 ec       	ldi	r24, 0xC8	; 200
    4226:	90 e0       	ldi	r25, 0x00	; 0
    4228:	9c 83       	std	Y+4, r25	; 0x04
    422a:	8b 83       	std	Y+3, r24	; 0x03
    422c:	8b 81       	ldd	r24, Y+3	; 0x03
    422e:	9c 81       	ldd	r25, Y+4	; 0x04
    4230:	01 97       	sbiw	r24, 0x01	; 1
    4232:	f1 f7       	brne	.-4      	; 0x4230 <main+0x510>
    4234:	9c 83       	std	Y+4, r25	; 0x04
    4236:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    4238:	8d 81       	ldd	r24, Y+5	; 0x05
    423a:	9e 81       	ldd	r25, Y+6	; 0x06
    423c:	01 97       	sbiw	r24, 0x01	; 1
    423e:	9e 83       	std	Y+6, r25	; 0x06
    4240:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    4242:	8d 81       	ldd	r24, Y+5	; 0x05
    4244:	9e 81       	ldd	r25, Y+6	; 0x06
    4246:	00 97       	sbiw	r24, 0x00	; 0
    4248:	69 f7       	brne	.-38     	; 0x4224 <main+0x504>
    424a:	14 c0       	rjmp	.+40     	; 0x4274 <main+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    424c:	6f 81       	ldd	r22, Y+7	; 0x07
    424e:	78 85       	ldd	r23, Y+8	; 0x08
    4250:	89 85       	ldd	r24, Y+9	; 0x09
    4252:	9a 85       	ldd	r25, Y+10	; 0x0a
    4254:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4258:	dc 01       	movw	r26, r24
    425a:	cb 01       	movw	r24, r22
    425c:	9e 83       	std	Y+6, r25	; 0x06
    425e:	8d 83       	std	Y+5, r24	; 0x05
    4260:	8d 81       	ldd	r24, Y+5	; 0x05
    4262:	9e 81       	ldd	r25, Y+6	; 0x06
    4264:	9a 83       	std	Y+2, r25	; 0x02
    4266:	89 83       	std	Y+1, r24	; 0x01
    4268:	89 81       	ldd	r24, Y+1	; 0x01
    426a:	9a 81       	ldd	r25, Y+2	; 0x02
    426c:	01 97       	sbiw	r24, 0x01	; 1
    426e:	f1 f7       	brne	.-4      	; 0x426c <main+0x54c>
    4270:	9a 83       	std	Y+2, r25	; 0x02
    4272:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	UART_vSendData(j);
    4274:	fe 01       	movw	r30, r28
    4276:	e7 5b       	subi	r30, 0xB7	; 183
    4278:	ff 4f       	sbci	r31, 0xFF	; 255
    427a:	80 81       	ld	r24, Z
    427c:	0e 94 45 07 	call	0xe8a	; 0xe8a <UART_vSendData>
    4280:	ff cf       	rjmp	.-2      	; 0x4280 <main+0x560>

00004282 <__prologue_saves__>:
    4282:	2f 92       	push	r2
    4284:	3f 92       	push	r3
    4286:	4f 92       	push	r4
    4288:	5f 92       	push	r5
    428a:	6f 92       	push	r6
    428c:	7f 92       	push	r7
    428e:	8f 92       	push	r8
    4290:	9f 92       	push	r9
    4292:	af 92       	push	r10
    4294:	bf 92       	push	r11
    4296:	cf 92       	push	r12
    4298:	df 92       	push	r13
    429a:	ef 92       	push	r14
    429c:	ff 92       	push	r15
    429e:	0f 93       	push	r16
    42a0:	1f 93       	push	r17
    42a2:	cf 93       	push	r28
    42a4:	df 93       	push	r29
    42a6:	cd b7       	in	r28, 0x3d	; 61
    42a8:	de b7       	in	r29, 0x3e	; 62
    42aa:	ca 1b       	sub	r28, r26
    42ac:	db 0b       	sbc	r29, r27
    42ae:	0f b6       	in	r0, 0x3f	; 63
    42b0:	f8 94       	cli
    42b2:	de bf       	out	0x3e, r29	; 62
    42b4:	0f be       	out	0x3f, r0	; 63
    42b6:	cd bf       	out	0x3d, r28	; 61
    42b8:	09 94       	ijmp

000042ba <__epilogue_restores__>:
    42ba:	2a 88       	ldd	r2, Y+18	; 0x12
    42bc:	39 88       	ldd	r3, Y+17	; 0x11
    42be:	48 88       	ldd	r4, Y+16	; 0x10
    42c0:	5f 84       	ldd	r5, Y+15	; 0x0f
    42c2:	6e 84       	ldd	r6, Y+14	; 0x0e
    42c4:	7d 84       	ldd	r7, Y+13	; 0x0d
    42c6:	8c 84       	ldd	r8, Y+12	; 0x0c
    42c8:	9b 84       	ldd	r9, Y+11	; 0x0b
    42ca:	aa 84       	ldd	r10, Y+10	; 0x0a
    42cc:	b9 84       	ldd	r11, Y+9	; 0x09
    42ce:	c8 84       	ldd	r12, Y+8	; 0x08
    42d0:	df 80       	ldd	r13, Y+7	; 0x07
    42d2:	ee 80       	ldd	r14, Y+6	; 0x06
    42d4:	fd 80       	ldd	r15, Y+5	; 0x05
    42d6:	0c 81       	ldd	r16, Y+4	; 0x04
    42d8:	1b 81       	ldd	r17, Y+3	; 0x03
    42da:	aa 81       	ldd	r26, Y+2	; 0x02
    42dc:	b9 81       	ldd	r27, Y+1	; 0x01
    42de:	ce 0f       	add	r28, r30
    42e0:	d1 1d       	adc	r29, r1
    42e2:	0f b6       	in	r0, 0x3f	; 63
    42e4:	f8 94       	cli
    42e6:	de bf       	out	0x3e, r29	; 62
    42e8:	0f be       	out	0x3f, r0	; 63
    42ea:	cd bf       	out	0x3d, r28	; 61
    42ec:	ed 01       	movw	r28, r26
    42ee:	08 95       	ret

000042f0 <_exit>:
    42f0:	f8 94       	cli

000042f2 <__stop_program>:
    42f2:	ff cf       	rjmp	.-2      	; 0x42f2 <__stop_program>
